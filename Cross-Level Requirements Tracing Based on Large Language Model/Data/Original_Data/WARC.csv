high_text,low_text,label
An interface implementation may be made for Python to allow the library to be used natively by Python programmers requiring no knowledge of the internal implementation of libwarc or C.,"A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",0
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",Libwarc shall be implemented to WARC v0.17.,0
"Installation scripts and/or instructions shall be made for the library and tools for each target platform, including Linux, Unix and Windows, as well as apache and lighttp installation scripts","Libwarc shall be developed on GNU/Linux, Fedora 7",0
The code and documentation shall be licensed using an open source license.,A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,0
WARC v0.17 shall be the baseline version of the WARC standard used in this project.,Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,0
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,Libwarc shall be shipped with a manual and build scripts,0
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).",Patches implemented for third party projects shall be contributed and distributed to the appropriate community,0
"The core functionality of WARC Tools, specifically the WARC writer/reader, shall be implemented as a comprehensive, standalone, general purpose software library - libwarc.","The code and documentation of libwarc shall be licensed to the community using an IIPC approved license, such as Apache 2.0 or BSD licence",0
The code and documentation shall be licensed using an open source license.,Libwarc shall be shipped with a manual and build scripts,0
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",Libwarc shall be implemented in C and shall conform to ANSI-C standard C99 revision.,0
"The deliverables shall be ported to the following platforms: Linux, FreeBSD, Mac OS X 10.5 and Windows.","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
The final WARC API shall be coded in C with minimum dependencies or external libraries (e.g. GZIP). It must not include any assembly code.,Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,0
"The deliverables shall be made available in source code, named as ""libwarc-version.tar.gz"", where version is the version of the library. A number of binary distributions may be made, including RPM, DEB and EXE.","Libwarc source code shall be released in the following archives: ""libwarc-version.tar.gz"", ""libwarc-version.tar.bz2"", ""libwarc-version.zip"" together with their corresponding digests. Developers may then adapt the build configuration files for best performance on their target machines.",0
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Libwarc shall be made available as a binary for at least GNU/Linux, FreeBSD, Mac OS X and Windows XP.",0
The code and documentation shall be licensed using an open source license.,"To ensure code portability on older computer architectures, Libwarc shall be compatible with any compiler conforming to the ANSI-C standard C89 revision.",0
"The library and each tool or extension shall be documented for developers and end users, using man pages and other common document forms.","Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",0
Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
The functionality of the API shall enable the appropriate functionality in the library scriptable1 and programmable2.,A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,0
"Web server plug-ins shall conform to the Apache 'mod' API and shall operate correctly with both Apache and Lighttp servers and shall be compatible with appropriate web sever programming standards, such as WSGI in Python and the Servlet API in Java.","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,"A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",0
"The library and each tool or extension shall be documented for developers and end users, using man pages and other common document forms.",Libwarc shall be implemented to WARC v0.17.,0
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,"Libwarc shall be developed on GNU/Linux, Fedora 7",0
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,0
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).",Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,0
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",Libwarc shall be shipped with a manual and build scripts,0
"The core functionality of WARC Tools, specifically the WARC writer/reader, shall be implemented as a comprehensive, standalone, general purpose software library - libwarc.",Patches implemented for third party projects shall be contributed and distributed to the appropriate community,0
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","The code and documentation of libwarc shall be licensed to the community using an IIPC approved license, such as Apache 2.0 or BSD licence",0
WARC v0.17 shall be the baseline version of the WARC standard used in this project.,Libwarc shall be shipped with a manual and build scripts,0
"Web server plug-ins shall conform to the Apache 'mod' API and shall operate correctly with both Apache and Lighttp servers and shall be compatible with appropriate web sever programming standards, such as WSGI in Python and the Servlet API in Java.",Libwarc shall be implemented in C and shall conform to ANSI-C standard C99 revision.,0
An interface implementation may be made for Python to allow the library to be used natively by Python programmers requiring no knowledge of the internal implementation of libwarc or C.,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
"Patches implemented for third party projects shall be documented for developers and end users, using man pages and other common document forms.",Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,0
Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,"Libwarc source code shall be released in the following archives: ""libwarc-version.tar.gz"", ""libwarc-version.tar.bz2"", ""libwarc-version.zip"" together with their corresponding digests. Developers may then adapt the build configuration files for best performance on their target machines.",0
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,"Libwarc shall be made available as a binary for at least GNU/Linux, FreeBSD, Mac OS X and Windows XP.",0
"Web server plug-ins shall conform to the Apache 'mod' API and shall operate correctly with both Apache and Lighttp servers and shall be compatible with appropriate web sever programming standards, such as WSGI in Python and the Servlet API in Java.","To ensure code portability on older computer architectures, Libwarc shall be compatible with any compiler conforming to the ANSI-C standard C89 revision.",0
Patches implemented for third party projects shall be contributed and distributed to the appropriate community.,"Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",0
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,0
"Patches implemented for third party projects shall be documented for developers and end users, using man pages and other common document forms.","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
"The core functionality of WARC Tools, specifically the WARC writer/reader, shall be implemented as a comprehensive, standalone, general purpose software library - libwarc.","A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",1
WARC v0.17 shall be the baseline version of the WARC standard used in this project.,Libwarc shall be implemented to WARC v0.17.,1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.","Libwarc shall be developed on GNU/Linux, Fedora 7",1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.",Libwarc shall be shipped with a manual and build scripts,1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.","Libwarc shall be shipped with installation guides for Fedora, Debian, FreeBSD, Mac OS X 10.5 and Windows XP.",1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.",Libwarc shall be shipped with a developer guide and useful examples.,1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.","To ensure code portability on older computer architectures, Libwarc shall be compatible with any compiler conforming to the ANSI-C standard C89 revision.",1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.","Libwarc shall be made available as a binary for at least GNU/Linux, FreeBSD, Mac OS X and Windows XP.",1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.","Libwarc shall compile and run under Solaris, AIX, MingW or other Unix compliant system and may compile and run under Windows XP.",1
"WARC Tools shall be highly portable, running on a range of Linux/Unix platforms and XP as a minimum, together with man pages, build and installation guides, developer guides, etc.",Assembly code and specific system features shall not be used in libwarc to ensure resulting code is widely portable across multiple target architectures,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",A command line tool "arc2warc" incorporating libwarc shall be able to migrate data in ARC-records to WARC-record format.,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",A set of command line tools incorporating libwarc shall perform migration of "HTTrack" archives to WARC-records.,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",A set of command line tools incorporating libwarc shall perform migration of "wget" archives to WARC-records.,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.",A set of command line tools incorporating libwarc shall perform migration of "curl" archives to WARC-records.,1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.","A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.","Extensions to ""HTTrack"", ""wget"" and ""curl"" incorporating libwarc shall be provided as patches to recent and specific versions of each tool, to enable users of the tool to access functionality of libwarc",1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.","Libwarc shall be shipped with a number of ready-to-use command lines, for example, warcdump (to dump the contents of a WARC file), w-filter, etc.",1
"Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content.","Utility and application level functionality of WARC Tools shall be made available to end users as command line tools, extensions to existing tools, and simple web applications for accessing WARC content",1
Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,Communication and support shall be provided to the open source community. This support must be provided for at least term of the project.,1
"The library and each tool or extension shall be documented for developers and end users, using man pages and other common document forms.",Libwarc shall be shipped with a manual and build scripts,1
"The library and each tool or extension shall be documented for developers and end users, using man pages and other common document forms.","Libwarc shall be shipped with installation guides for Fedora, Debian, FreeBSD, Mac OS X 10.5 and Windows XP.",1
"The library and each tool or extension shall be documented for developers and end users, using man pages and other common document forms.",Libwarc shall be shipped with a developer guide and useful examples.,1
Patches implemented for third party projects shall be contributed and distributed to the appropriate community.,Patches implemented for third party projects shall be contributed and distributed to the appropriate community,1
The code and documentation shall be licensed using an open source license.,"The code and documentation of libwarc shall be licensed to the community using an IIPC approved license, such as Apache 2.0 or BSD licence",1
"Installation scripts and/or instructions shall be made for the library and tools for each target platform, including Linux, Unix and Windows, as well as apache and lighttp installation scripts",Libwarc shall be shipped with a manual and build scripts,1
"Installation scripts and/or instructions shall be made for the library and tools for each target platform, including Linux, Unix and Windows, as well as apache and lighttp installation scripts",Libwarc and associated tools shall be shipped with installers to "mod_warc" for Apache (v2.X) and Lighttpd (v1.4.X) servers,1
The WARC Tools shall be implemented as a C library,Libwarc shall be implemented in C and shall conform to ANSI-C standard C99 revision.,1
The WARC Tools shall be implemented as a C library,"To ensure code portability on older computer architectures, Libwarc shall be compatible with any compiler conforming to the ANSI-C standard C89 revision.",1
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",1
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,"Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",1
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,A Python interface to libwarc shall be implemented using the SWIG wrapper,1
Library functionality shall have APIs and dynamic language bindings to be made available as software libraries for developers.,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",1
"Web server plug-ins shall conform to the Apache 'mod' API and shall operate correctly with both Apache and Lighttp servers and shall be compatible with appropriate web sever programming standards, such as WSGI in Python and the Servlet API in Java.",Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,1
"Web server plug-ins shall conform to the Apache 'mod' API and shall operate correctly with both Apache and Lighttp servers and shall be compatible with appropriate web sever programming standards, such as WSGI in Python and the Servlet API in Java.",Libwarc shall be incorporated within a Lighttp module to enable all actions specified in SRS 34-36 to be executed within lighttp.,1
"The deliverables shall be made available in source code, named as ""libwarc-version.tar.gz"", where version is the version of the library. A number of binary distributions may be made, including RPM, DEB and EXE.","Libwarc source code shall be released in the following archives: ""libwarc-version.tar.gz"", ""libwarc-version.tar.bz2"", ""libwarc-version.zip"" together with their corresponding digests. Developers may then adapt the build configuration files for best performance on their target machines.",1
"The deliverables shall be made available in source code, named as ""libwarc-version.tar.gz"", where version is the version of the library. A number of binary distributions may be made, including RPM, DEB and EXE.","Libwarc binary modules, ready to use binary commands and libraries (both static and shared), compiled with generic optimisation flags, shall be released also",1
"The deliverables shall be made available in source code, named as ""libwarc-version.tar.gz"", where version is the version of the library. A number of binary distributions may be made, including RPM, DEB and EXE.","Libwarc shall be made available as a binary for at least GNU/Linux, FreeBSD, Mac OS X and Windows XP.",1
"The deliverables shall be ported to the following platforms: Linux, FreeBSD, Mac OS X 10.5 and Windows.","Libwarc shall be made available as a binary for at least GNU/Linux, FreeBSD, Mac OS X and Windows XP.",1
"The deliverables shall be ported to the following platforms: Linux, FreeBSD, Mac OS X 10.5 and Windows.","Libwarc shall compile and run under Solaris, AIX, MingW or other Unix compliant system and may compile and run under Windows XP.",1
The final WARC API shall be coded in C with minimum dependencies or external libraries (e.g. GZIP). It must not include any assembly code.,"To ensure code portability on older computer architectures, Libwarc shall be compatible with any compiler conforming to the ANSI-C standard C89 revision.",1
The final WARC API shall be coded in C with minimum dependencies or external libraries (e.g. GZIP). It must not include any assembly code.,"Only essential external libraries shall be used in libwarc, such as Gzip compression and wide characters encoding libraries.",1
The final WARC API shall be coded in C with minimum dependencies or external libraries (e.g. GZIP). It must not include any assembly code.,Assembly code and specific system features shall not be used in libwarc to ensure resulting code is widely portable across multiple target architectures,1
"The C library will be developed in such a way as to allow it to be used with the Simplified Wrapper and Interface Generator, or SWIG, (www.swig.org) in order to wrap the C code and allow it to be called natively in a wide variety of languages.","Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",1
An interface implementation may be made for Python to allow the library to be used natively by Python programmers requiring no knowledge of the internal implementation of libwarc or C.,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",1
An interface implementation may be made for Python to allow the library to be used natively by Python programmers requiring no knowledge of the internal implementation of libwarc or C.,"Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",1
An interface implementation may be made for Python to allow the library to be used natively by Python programmers requiring no knowledge of the internal implementation of libwarc or C.,A Python interface to libwarc shall be implemented using the SWIG wrapper,1
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,1
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,An independent Java implementation of libwarc may be implemented subject to review of deliverables satisfying SRS 61,1
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",1
An interface implementation shall be made for Java to allow the library to be used natively by Java programmers requiring no knowledge of the internal implementation of libwarc or C.,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within Java v1.5 and and later, using Java's new container iterators, such as ""for"" and ""foreach"".",1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).",A Python interface to libwarc shall be implemented using the SWIG wrapper,1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).",A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).",An independent Java implementation of libwarc may be implemented subject to review of deliverables satisfying SRS 61,1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",1
"The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the specific implementation languages (C, Java, Python).","Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within Java v1.5 and and later, using Java's new container iterators, such as ""for"" and ""foreach"".",1
Libwarc shall be memory safe and manage dynamic memory internally,"There shall be a single entry point to libwarc, called ""warc.h"".",0
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.",The universal header "warc.h" shall ensure compatibility between all versions of libwarc.,0
The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language,"The universal header ""warc.h"" shall provide normalised interfaces to enable developers to create valid and compliant WARC-records, based on the definition in the ""ISO TC 46/SC 4 N 595"" standards document. The interfaces shall be made available to create WARC records of the following types:- ""warinfo""- ""response""- ""request""- ""metadata""- ""revisit""- ""conversion""- ""continuation""- ""resource""",0
The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language,Each WARC-record shall be accessible via a peer C class of the same name.,0
WARC Browser shall support a rewriting interface,"Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",0
It shall be possible to identify and validate WARC files using "Jhove","Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",0
"It shall be possible to collect arbitrary web content, such as html files, images etc. (for example from a web server document root directory), and write the data to WARC files",SRS 15 -Libwarc shall include ADT objects to handle read operations on ARC-records,0
A Python interface shall be implemented,"Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",0
An independent Java implementation of libwarc may be implemented,"Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",0
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc",Libwarc shall provide a WARC-record MIME-type iterator,0
A Python interface shall be implemented,Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),0
"The C library shall be implemented to be compatible with the Simplified Wrapper and Interface Generator (SWIG, http://www.swig.org) - a wrapper for libwarc C code to allow it to be called natively in a wide variety of languages.",Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard",Libwarc's iterators may be combined into composite iterators to enable the developer to more than one search field,0
Any software tool or application based on libwarc shall require just a single header file.,Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,0
"Libwarc shall enable combinations of iterators to be used, i.e. composite iterators","The payload (or the WARC-record document itself) are stored on disk, to avoid using memory heap, even for small objects.",0
Libwarc shall provide a records iterator to handle WARC-type records,Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,0
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",Libwarc shall support non-compressed WARC-records and compressed WARC-records and files,0
A Jhove plugin module and an output handler shall be made available for WARC files,"Libwarc shall support multiple compression schemas, loading a specific compressor at runtime as an external shared library.",0
A Java interface shall be implemented,A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,0
"It shall be possible to collect arbitrary web content, such as html files, images etc. (for example from a web server document root directory), and write the data to WARC files","It shall be possible to perform read operations (read from offset, filters, etc.) on WARCrecords from a remote location via http.",0
A Python interface shall be implemented,WARC Browser shall support a client-side rewriting interface by using javascript code to rewrite links being delivered alongside archived content. This is based on the principles implemented in the Wayback Machine.,0
"WARC extensions shall be released as a patch to each of the commands ""curl"", ""wget"", and ""httrack"" projects",SRS 38 -A web proxy interface shall be implemented that allows the user to set their web browser proxy to the one provided by the interface and thereby ensure all content is delivered from the archive and not from the live web.,0
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,0
Libwarc shall provide a MIMES iterator to handle MIME-types payloads,A command line tool "arc2warc" incorporating libwarc shall be able to migrate data in ARC-records to WARC-record format.,0
WARC files in various test-states shall be provided that test the Jhove deliverables,"It shall be possible to specify non-default operations of ""arc2warc"" using a named configuration file, which will describe the desired ARC-record to WARC-record conversion.",0
An independent Java implementation of libwarc may be implemented,A set of command line tools incorporating libwarc shall perform migration of "HTTrack" archives to WARC-records.,0
Iterators can use exact pattern search or regex expressions,A set of command line tools incorporating libwarc shall perform migration of "wget" archives to WARC-records.,0
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc",A set of command line tools incorporating libwarc shall perform migration of "curl" archives to WARC-records.,0
"WARC extensions help content will be provided each of the commands ""curl"", ""wget"", and ""httrack""","A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard","Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.","Extensions to ""HTTrack"", ""wget"" and ""curl"" incorporating libwarc shall be provided as patches to recent and specific versions of each tool, to enable users of the tool to access functionality of libwarc",0
Libwarc shall provide ARC-record reader functionality Libwarc reader will thereby make read operations as simple as possible.,"Helper documentation for libwarc functionality shall be made available within the ""HTTrack"", ""wget"" and ""curl"" commands.",0
It shall be possible to walk a wget mirror and write the data to WARC files,"A magic number for WARC shall be created and incorporated in the ""file"" mime-type database, enabling the simple identification of WARC files via the Unix ""file"" command",0
Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT),"The WARC validator tool specified in SRS 31-32 shall be extended to optionally make use of the Jhove command line API to identify and validate WARC files, i.e. given a specific WARC file, this command shall be able to identify the file as a WARC file, validate the level of compliance with a given standard in terms of well-formedness and validity, and finally to characterise the file by extracting and displaying significant properties contained in the file.",0
Libwarc shall provide a range of functions through a universal interface for reading a range of valid WARC-records,WarcMdoule and WarcHandler plugin modules shall be implemented for Jhove Plugin layer to enable identification and validation of WARC files.,0
Libwarc shall be memory safe and manage dynamic memory internally,WARC files in various test-states shall be provided that test the Jhove deliverables,0
Libwarc shall provide a range of functions through a universal interface for reading a range of valid WARC-records,"Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",0
It shall be possible to walk a wget mirror and write the data to WARC files,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
"WARC extensions shall be released as a patch to each of the commands ""curl"", ""wget"", and ""httrack"" projects",A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,0
Libwarc shall use gzip as the default compression format,An independent Java implementation of libwarc may be implemented subject to review of deliverables satisfying SRS 61,0
Libwarc shall provide ARC-record reader functionality Libwarc reader will thereby make read operations as simple as possible.,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",0
Dynamic memory management shall be hidden inside libwarc,"There shall be a single entry point to libwarc, called ""warc.h"".",0
The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language,The universal header "warc.h" shall ensure compatibility between all versions of libwarc.,0
Libwarc shall be memory safe and manage dynamic memory internally,"The universal header ""warc.h"" shall provide normalised interfaces to enable developers to create valid and compliant WARC-records, based on the definition in the ""ISO TC 46/SC 4 N 595"" standards document. The interfaces shall be made available to create WARC records of the following types:- ""warinfo""- ""response""- ""request""- ""metadata""- ""revisit""- ""conversion""- ""continuation""- ""resource""",0
An independent Java implementation of libwarc may be implemented,Each WARC-record shall be accessible via a peer C class of the same name.,0
An independent Java implementation of libwarc may be implemented,"Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",0
ARC to WARC conversions made by arc2warc shall be carried out according to a specification in a configuration file,"Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",0
Libwarc shall provide a records iterator to handle WARC-type records,SRS 15 -Libwarc shall include ADT objects to handle read operations on ARC-records,0
"Libwarc shall enable combinations of iterators to be used, i.e. composite iterators","Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",0
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.","Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",0
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.",Libwarc shall provide a WARC-record MIME-type iterator,0
It shall be possible to walk a wget mirror and write the data to WARC files,Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),0
It shall be possible to identify and validate WARC files using "Jhove",Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),0
Libwarc shall provide ARC-record reader functionality Libwarc reader will thereby make read operations as simple as possible.,Libwarc's iterators may be combined into composite iterators to enable the developer to more than one search field,0
It shall be possible to identify and validate WARC files using "Jhove",Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,0
It shall be possible to walk a curl directory and write the data to WARC files,"The payload (or the WARC-record document itself) are stored on disk, to avoid using memory heap, even for small objects.",0
WARC files in various test-states shall be provided that test the Jhove deliverables,Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,0
"Libwarc shall enable combinations of iterators to be used, i.e. composite iterators",Libwarc shall support non-compressed WARC-records and compressed WARC-records and files,0
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc","Libwarc shall support multiple compression schemas, loading a specific compressor at runtime as an external shared library.",0
Any software tool or application based on libwarc shall require just a single header file.,A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,0
Libwarc shall use gzip as the default compression format,"It shall be possible to perform read operations (read from offset, filters, etc.) on WARCrecords from a remote location via http.",0
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",WARC Browser shall support a client-side rewriting interface by using javascript code to rewrite links being delivered alongside archived content. This is based on the principles implemented in the Wayback Machine.,0
"WARC extensions help content will be provided each of the commands ""curl"", ""wget"", and ""httrack""",SRS 38 -A web proxy interface shall be implemented that allows the user to set their web browser proxy to the one provided by the interface and thereby ensure all content is delivered from the archive and not from the live web.,0
"Libwarc shall provide a plug-in interface to enable use of alternative compression libraries, such as ""gzip2"", ""7zip"", etc.",Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,0
It shall be possible to collect HTTrack data from the directories output by HTTrack and write the data to WARC files,A command line tool "arc2warc" incorporating libwarc shall be able to migrate data in ARC-records to WARC-record format.,0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard","It shall be possible to specify non-default operations of ""arc2warc"" using a named configuration file, which will describe the desired ARC-record to WARC-record conversion.",0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard",A set of command line tools incorporating libwarc shall perform migration of "HTTrack" archives to WARC-records.,0
"WARC extensions shall be released as a patch to each of the commands ""curl"", ""wget"", and ""httrack"" projects",A set of command line tools incorporating libwarc shall perform migration of "wget" archives to WARC-records.,0
Iterators can use exact pattern search or regex expressions,A set of command line tools incorporating libwarc shall perform migration of "curl" archives to WARC-records.,0
An Apache and Lighttp plug-in shall provide access to the libwarc API and WARC Browser over http,"A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",0
A Java interface shall be implemented,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
Libwarc shall provide a records iterator to handle WARC-type records,"Extensions to ""HTTrack"", ""wget"" and ""curl"" incorporating libwarc shall be provided as patches to recent and specific versions of each tool, to enable users of the tool to access functionality of libwarc",0
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.","Helper documentation for libwarc functionality shall be made available within the ""HTTrack"", ""wget"" and ""curl"" commands.",0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard","A magic number for WARC shall be created and incorporated in the ""file"" mime-type database, enabling the simple identification of WARC files via the Unix ""file"" command",0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard","The WARC validator tool specified in SRS 31-32 shall be extended to optionally make use of the Jhove command line API to identify and validate WARC files, i.e. given a specific WARC file, this command shall be able to identify the file as a WARC file, validate the level of compliance with a given standard in terms of well-formedness and validity, and finally to characterise the file by extracting and displaying significant properties contained in the file.",0
A Python script shall be made available to enable rapid development of WARC based solutions,WarcMdoule and WarcHandler plugin modules shall be implemented for Jhove Plugin layer to enable identification and validation of WARC files.,0
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard",WARC files in various test-states shall be provided that test the Jhove deliverables,0
Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT),"Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",0
It shall be possible to walk a curl directory and write the data to WARC files,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",0
Libwarc shall provide a default iterator as a built-in function,A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,0
A Jhove plugin module and an output handler shall be made available for WARC files,An independent Java implementation of libwarc may be implemented subject to review of deliverables satisfying SRS 61,0
It shall be possible to walk a curl directory and write the data to WARC files,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",0
Any software tool or application based on libwarc shall require just a single header file.,"There shall be a single entry point to libwarc, called ""warc.h"".",1
Any software tool or application based on libwarc shall require just a single header file.,The "libwarc" headers shall be structured in a hierarchical manner. The universal header "warc.h" will include all of them.,1
Any software tool or application based on libwarc shall require just a single header file.,"It shall be possible for developers to access, modify and manipulate of all aspects of the WARC file format by including this single header file.",1
Any software tool or application based on libwarc shall require just a single header file.,The universal header "warc.h" shall ensure compatibility between all versions of libwarc.,1
Any software tool or application based on libwarc shall require just a single header file.,The universal header "warc.h" shall ensure that deprecated function calls and changes to the library are notified at compile time.,1
Any software tool or application based on libwarc shall require just a single header file.,"The universal header ""warc.h"" shall provide normalised interfaces to enable developers to create valid and compliant WARC-records, based on the definition in the ""ISO TC 46/SC 4 N 595"" standards document. The interfaces shall be made available to create WARC records of the following types:- ""warinfo""- ""response""- ""request""- ""metadata""- ""revisit""- ""conversion""- ""continuation""- ""resource""",1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",The universal header "warc.h" shall ensure compatibility between all versions of libwarc.,1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",The universal header "warc.h" shall ensure that deprecated function calls and changes to the library are notified at compile time.,1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.","The interfaces in libwarc shall ensure that any changes to the library, will not affect any tool or application based on libwarc.",1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.","Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.",Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,1
"The libwarc interfaces shall fully encapsulate and internal functionality, isolating by abstraction any tool or application based on libwarc from changes in the internal implementation.","Major revisions to the WARC ISO standard may lead to revisions of libwarc, but these revisions should be isolated and not affect any tools developed incorporating libwarc",1
"Libwarc shall provide a range of functions through a universal interface for creating each type of valid WARC-record, thus ensuring the resulting WARC files conform to the prevailing WARC standard","The universal header ""warc.h"" shall provide normalised interfaces to enable developers to create valid and compliant WARC-records, based on the definition in the ""ISO TC 46/SC 4 N 595"" standards document. The interfaces shall be made available to create WARC records of the following types:- ""warinfo""- ""response""- ""request""- ""metadata""- ""revisit""- ""conversion""- ""continuation""- ""resource""",1
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.",Each WARC-record shall be accessible via a peer C class of the same name.,1
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.","The attributes of each WARC-record, as per the ISO standard specification, shall have a corresponding attribute in its peer C class.",1
"For each type of WARC-record, a set of functions shall be made available to create/modify the records properties.","Each peer class shall expose a set a class functions to read, write, and update attributes for the corresponding WARC-record.",1
Libwarc shall provide a range of functions through a universal interface for reading a range of valid WARC-records,"Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",1
Libwarc shall provide a range of functions through a universal interface for reading a range of valid WARC-records,Any operations on WARC-records shall be possible using functions accepting the abstract handle as an argument.,1
Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT),"Libwarc shall provide an API describing (1) the set of data, and (2) the set of operations that can be performed on the data. The data types shall be abstract (abstract data types - ADT), to ensure independence of concrete implementations.",1
Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT),"It shall be possible to create a WARC-record using a constructor, which will returns an abstract handle to data representing the WARC-record.",1
Libwarc shall provide a stable Application Programme Interface (API) to handle WARCrecords as abstract objects (ADT),Any operations on WARC-records shall be possible using functions accepting the abstract handle as an argument.,1
Libwarc shall provide ARC-record reader functionality Libwarc reader will thereby make read operations as simple as possible.,SRS 15 -Libwarc shall include ADT objects to handle read operations on ARC-records,1
Libwarc shall provide a default iterator as a built-in function,"Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",1
Libwarc shall provide a records iterator to handle WARC-type records,"Libwarc shall provide a generic iterator, to enable the developer to iterate over all WARCrecords and create an abstract WARC-document as a simple container",1
Libwarc shall provide a records iterator to handle WARC-type records,Libwarc shall provide a WARC-record-type iterator,1
Libwarc shall provide a MIMES iterator to handle MIME-types payloads,Libwarc shall provide a WARC-record MIME-type iterator,1
Iterators can use exact pattern search or regex expressions,Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),1
"Libwarc shall provide an abstract interface for iterators, to enable custom iterators",Libwarc's generic iterators may be customised for different purposes via callback handlers (i.e. hooks),1
"Libwarc shall enable combinations of iterators to be used, i.e. composite iterators",Libwarc's iterators may be combined into composite iterators to enable the developer to more than one search field,1
Libwarc shall be memory safe and manage dynamic memory internally,Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,1
Libwarc shall be memory safe and manage dynamic memory internally,"Developers using libwarc shall not be required to allocate/release memory directly, instead the developer shall use libwarc's object constructor and destructor functions.",1
Libwarc shall be memory safe and manage dynamic memory internally,Libwarc shall use dynamic heap memory for its internal usage.,1
Libwarc shall be memory safe and manage dynamic memory internally,Libwarc shall allocate minimum memory heap to store WARC-record metadata.,1
Libwarc shall be memory safe and manage dynamic memory internally,"The payload (or the WARC-record document itself) are stored on disk, to avoid using memory heap, even for small objects.",1
Libwarc shall be memory safe and manage dynamic memory internally,"Libwarc shall not use file to memory mapping technology, instead libwarc will explicitly allocate memory as needed.",1
Libwarc shall use disk-based working memory,"The payload (or the WARC-record document itself) are stored on disk, to avoid using memory heap, even for small objects.",1
Dynamic memory management shall be hidden inside libwarc,Libwarc shall encapsulate and handle all memory management when processing WARCrecords.,1
Dynamic memory management shall be hidden inside libwarc,"Developers using libwarc shall not be required to allocate/release memory directly, instead the developer shall use libwarc's object constructor and destructor functions.",1
Dynamic memory management shall be hidden inside libwarc,Libwarc shall use dynamic heap memory for its internal usage.,1
Dynamic memory management shall be hidden inside libwarc,Libwarc shall allocate minimum memory heap to store WARC-record metadata.,1
Dynamic memory management shall be hidden inside libwarc,"The payload (or the WARC-record document itself) are stored on disk, to avoid using memory heap, even for small objects.",1
Dynamic memory management shall be hidden inside libwarc,"Libwarc shall not use file to memory mapping technology, instead libwarc will explicitly allocate memory as needed.",1
Libwarc shall use gzip as the default compression format,Libwarc shall support non-compressed WARC-records and compressed WARC-records and files,1
Libwarc shall use gzip as the default compression format,The default compression format shall be Gzip,1
"Libwarc shall provide a plug-in interface to enable use of alternative compression libraries, such as ""gzip2"", ""7zip"", etc.","Libwarc shall support multiple compression schemas, loading a specific compressor at runtime as an external shared library.",1
"Libwarc shall provide a plug-in interface to enable use of alternative compression libraries, such as ""gzip2"", ""7zip"", etc.",It shall not be possible to use more than one compression schema (including noncompression) within a single WARC file. (i.e. it is not possible to mix compression schemes within a single WARC file).,1
"WARC files shall be validated using a command line tool, ""w-validator"", which will enable validation or rejection of WARC files.",A command line tool shall be implemented utilising libwarc to check the consistency of WARC-records and their conformance to the WARC ISO standard.,1
"WARC files shall be validated using a command line tool, ""w-validator"", which will enable validation or rejection of WARC files.","The command line tool shall notify the user of any WARC-record's anomalies, missing required fields or incompatible fields types.",1
WARC Browser shall provide an API that allows browsing of WARC files and associated CDX files via an HTTP server,"It shall be possible to perform read operations (read from offset, filters, etc.) on WARCrecords from a remote location via http.",1
WARC Browser shall provide an API that allows browsing of WARC files and associated CDX files via an HTTP server,WARC browser shall not support CDX files because the CDX file format is not a standard at this time and is outside of scope.,1
WARC Browser shall support a rewriting interface,WARC Browser shall support a client-side rewriting interface by using javascript code to rewrite links being delivered alongside archived content. This is based on the principles implemented in the Wayback Machine.,1
WARC Browser shall support a proxy-style interface,SRS 38 -A web proxy interface shall be implemented that allows the user to set their web browser proxy to the one provided by the interface and thereby ensure all content is delivered from the archive and not from the live web.,1
An Apache and Lighttp plug-in shall provide access to the libwarc API and WARC Browser over http,Libwarc shall be incorporated within an Apache module to enable all actions specified in SRS 34-36 to be executed within Apache.,1
An Apache and Lighttp plug-in shall provide access to the libwarc API and WARC Browser over http,Libwarc shall be incorporated within a Lighttp module to enable all actions specified in SRS 34-36 to be executed within lighttp.,1
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc",A command line tool "arc2warc" incorporating libwarc shall be able to migrate data in ARC-records to WARC-record format.,1
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc","The default operation of ""arc2warc"" shall carry out a one-to-one mapping of record fields, by converting each ARC-record to a corresponding ""response"" WARC-record and ""metadata"" WARCrecord, which shall include information about the conversion process.",1
It shall be possible to convert ARC files to WARC files using a command-line tool called "arc2warc","""arc2warc"" shall have make a default operation in cases where an ARC-record has no corresponding field in the WARC-record.",1
ARC to WARC conversions made by arc2warc shall be carried out according to a specification in a configuration file,"It shall be possible to specify non-default operations of ""arc2warc"" using a named configuration file, which will describe the desired ARC-record to WARC-record conversion.",1
It shall be possible to collect HTTrack data from the directories output by HTTrack and write the data to WARC files,A set of command line tools incorporating libwarc shall perform migration of "HTTrack" archives to WARC-records.,1
It shall be possible to collect HTTrack data from the directories output by HTTrack and write the data to WARC files,"The HTTrack archive file format and link strategy may vary from version to version of HTTrack, therefore it shall be possible to adapt the migration scripts to deal with these changes.",1
It shall be possible to walk a wget mirror and write the data to WARC files,A set of command line tools incorporating libwarc shall perform migration of "wget" archives to WARC-records.,1
It shall be possible to walk a curl directory and write the data to WARC files,A set of command line tools incorporating libwarc shall perform migration of "curl" archives to WARC-records.,1
"It shall be possible to collect arbitrary web content, such as html files, images etc. (for example from a web server document root directory), and write the data to WARC files","A set of command line tools and an API incorporating libwarc shall enable the collection of online documents, such as html and embedded files, etc., and write them to valid WARC- records.",1
A Python script shall be made available to enable rapid development of WARC based solutions,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",1
"WARC extensions shall be released as a patch to each of the commands ""curl"", ""wget"", and ""httrack"" projects","Extensions to ""HTTrack"", ""wget"" and ""curl"" incorporating libwarc shall be provided as patches to recent and specific versions of each tool, to enable users of the tool to access functionality of libwarc",1
"WARC extensions help content will be provided each of the commands ""curl"", ""wget"", and ""httrack""","Helper documentation for libwarc functionality shall be made available within the ""HTTrack"", ""wget"" and ""curl"" commands.",1
It shall be possible to identify WARC files using the unix "file" command,"A magic number for WARC shall be created and incorporated in the ""file"" mime-type database, enabling the simple identification of WARC files via the Unix ""file"" command",1
It shall be possible to identify and validate WARC files using "Jhove","The WARC validator tool specified in SRS 31-32 shall be extended to optionally make use of the Jhove command line API to identify and validate WARC files, i.e. given a specific WARC file, this command shall be able to identify the file as a WARC file, validate the level of compliance with a given standard in terms of well-formedness and validity, and finally to characterise the file by extracting and displaying significant properties contained in the file.",1
It shall be possible to identify and validate WARC files using "Jhove",WarcMdoule and WarcHandler plugin modules shall be implemented for Jhove Plugin layer to enable identification and validation of WARC files.,1
A Jhove plugin module and an output handler shall be made available for WARC files,WarcMdoule and WarcHandler plugin modules shall be implemented for Jhove Plugin layer to enable identification and validation of WARC files.,1
WARC files in various test-states shall be provided that test the Jhove deliverables,WARC files in various test-states shall be provided that test the Jhove deliverables,1
"The C library shall be implemented to be compatible with the Simplified Wrapper and Interface Generator (SWIG, http://www.swig.org) - a wrapper for libwarc C code to allow it to be called natively in a wide variety of languages.","Libwarc shall provide interfaces to SWIG wrappers to allow dynamic language bindings (Python, Ruby, Perl, Lua ...)",1
A Python interface shall be implemented,"Python scripts shall be implemented incorporating libwarc, and making all of the functionality of libwarc and API available in Python.",1
A Python interface shall be implemented,A Python interface to libwarc shall be implemented using the SWIG wrapper,1
A Java interface shall be implemented,A Java interface to libwarc shall be implemented using the SWIG wrapper and/or JNI,1
An independent Java implementation of libwarc may be implemented,An independent Java implementation of libwarc may be implemented subject to review of deliverables satisfying SRS 61,1
The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within various dynamic languages and in Java v1.4 and earlier, using metaphors and paradigms familiar to those languages.",1
The functionality of the library shall be exposed in such a way as to fit the metaphors and paradigms of the implementation language,"Libwarc and the bindings to its functionality shall enable the use of libwarc's iterators described in SRS 16-20 to be used within Java v1.5 and and later, using Java's new container iterators, such as ""for"" and ""foreach"".",1
