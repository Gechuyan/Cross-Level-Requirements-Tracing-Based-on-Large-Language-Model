0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005353774,0.071622733,1.098612289,0.251358785,7.59427464,5.272148701,32.64089172,9.872244748,1,5.410478389,0.002509561,0.010990005,0.052700777,0.046561185,0.202841851,2.708050201,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005608716,0.025341569,0.405465108,0.101366277,7.500481059,2.827560373,32.64089172,11.14183361,1,7.263251047,0.003379986,0.010030348,0.054079772,0.051430102,0.335581127,2.931193752,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
 The DPU-TIS  shall provide TIS_HK to the DPU-CCM on request.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.575868041,3.571768197,32.64089172,12.34910017,0.993333333,8.593786069,0.002286684,0.01317404,0.022866842,0.055381256,0.199784502,1.347073648,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.005608716,0,0,0,6.370884753,1.399396803,21.30137226,9.904080058,0.993333333,7.748142217,0.005415495,0.023607438,0.064985943,0.054691259,0.521672134,5.010635294,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.21693301,2.389744067,32.64089172,10.55679523,0.993333333,7.151877515,0.007245788,0.066048956,0.10144103,0.05254975,0.215674046,2.813410717,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,9.716477976,2.628091274,32.64089172,11.48016812,1,6.768724997,0.002850909,0.01317404,0.03136,0.053775175,0.128754875,2.931193752,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004530117,0.023850889,0.405465108,0.098339733,6.855545012,0.846970217,32.64089172,11.43757906,0.993333333,6.940782538,0.003814653,0.01608024,0.064849094,0.051528313,0.149215499,4.317488114,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
 The DPU-DPA shall perform bounds checking before accessing memory.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005608716,0,0,0,1.995802535,0.269768129,14.22082103,5.219162577,0.82,8.94097374,0.005449981,0.029526101,0.049049829,0.061648195,0.390243534,1.678430784,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
"  The DPU-TIS shall provide the capability for an application program to jam the value of the SC_TIME into the hardware, if automatic time synchronization is disabled.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004530117,0.113160421,1.098612289,0.322192659,7.611701773,5.546578403,32.64089172,9.678767001,1,4.298864569,0.004407521,0.02228669,0.101372988,0.051014916,0.206813036,3.912023005,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The DPU-SSI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004362335,0.025341569,0.405465108,0.099717935,5.591451783,1.581896175,32.64089172,9.255047123,1,5.864650375,0.003127222,0.018806314,0.100071101,0.047587391,0.358539197,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
"  The Bootstrap Monitor of DPU-BOOT CSC shall be activated if the Clear-To-Send (CTS) signal is active on the RS-232 interface.   If no activity is detected on the RS-232 interface within 30 seconds, the Bootstrap shall load a configuration of DPU-RTOS according to BC_INDEX in the SYSTEM_BLOCK.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.003799453,0.064305767,1.098612289,0.210529026,7.229731652,1.880301343,53.04851082,12.29829076,1,6.222800662,0.003904848,0.030975145,0.140574545,0.045882047,0.239681442,4.317488114,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.006199107,0.07520387,1.098612289,0.257338449,6.039108291,1.744518472,32.64089172,10.4458532,1,8.623947696,0.005435295,0.053974486,0.108705909,0.053399675,0.243909451,3.912023005,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,7.695410775,1.777044805,32.64089172,12.29901458,0.993333333,5.632809637,0.004379388,0.023975071,0.052552657,0.051231317,0.375790688,4.317488114,0.405465108,0.348237453,0.004907626,0.031189624,0.405465108,0.110183719,6.447875662,0,74.81253043,20.70451475,1,11.64593929,0.021655169,0.161058499,0.563034385,0.067224639,0.215020029,2.220108871,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005121002,0.028961793,0.405465108,0.108365108,7.86684855,2.166904279,53.04851082,15.47096537,1,9.134207188,0.007536841,0.030975145,0.105515777,0.051301439,0.236835663,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,4.861767146,0.308805829,32.64089172,9.528727973,0.993333333,8.31320823,0.00287264,0.012870276,0.045962236,0.05204354,0.314301499,5.010635294,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.004206537,0.016218604,0.405465108,0.081093022,0.8330067,0,45.52440007,19.69609836,1,8.909673129,0.038756023,0.234640863,0.968900587,0.066243059,0.376261655,5.398162702,0
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.006543502,0.027031007,0.405465108,0.104690641,7.460725835,3.102976979,32.64089172,11.08455784,0.993333333,5.633150238,0.003442717,0.018592303,0.051640759,0.047983997,0.418037414,2.371577964,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
"  When tracking is enabled, the DPU-DPA will produce a PROD_TRACKING_REC at the commanded rate.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005353774,0.146887885,1.098612289,0.323427505,11.10426885,3.127443514,53.04851082,16.52316591,1,7.242443539,0.003505836,0.01640009,0.045575874,0.046657871,0.142515277,2.040220829,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005353774,0.07520387,1.098612289,0.257338449,7.049134979,3.566777021,32.64089172,9.921880211,1,6.090554639,0.00342198,0.015194868,0.068439608,0.049073675,0.270352059,3.624340933,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,6.65529339,1.223637341,53.04851082,15.81481634,1,7.071979157,0.009233122,0.04672809,0.129263708,0.052411531,0.117695336,1.752538756,0.405465108,0.348237453,0.003926101,0.024799253,1.098612289,0.139943487,4.258459065,0,74.81253043,16.07436956,1,12.46331899,0.017486392,0.264424359,1.346452177,0.070758779,0.191822632,4.01186834,0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005608716,0.025341569,0.405465108,0.101366277,7.500481059,2.827560373,32.64089172,11.14183361,1,7.263251047,0.003379986,0.010030348,0.054079772,0.051430102,0.335581127,2.931193752,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.004206537,0.100400585,1.098612289,0.278762109,7.945322478,3.720897776,53.04851082,11.59315587,1,5.649760166,0.001932756,0.018053973,0.065713703,0.049940216,0.248593633,5.010635294,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,0
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM."," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.004530117,0.047765752,1.098612289,0.229076498,6.554226533,2.18695276,25.72089663,8.350697489,0.993333333,7.930134206,0.00136754,0.008159725,0.031453409,0.049005166,0.286220601,2.371577964,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0.405465108,0.348237453,0.005608716,0.125339783,1.098612289,0.320709835,10.55001787,6.936331591,53.04851082,12.67362236,1,6.029942301,0.002307395,0.010990005,0.055377476,0.046732936,0.168928913,2.238046572,0.405465108,0.348237453,0.004206537,0.048079154,1.098612289,0.197953091,2.108803339,0,74.81253043,19.65140059,1,10.4908524,0.03099337,0.293717082,2.200529236,0.069509053,0.179370723,4.705015521,0
  The DPU-DCI shall provide an application program with the ability to configure the SCM_DCI_WIN parameters.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005121002,0.1074341,1.098612289,0.305055066,7.957499655,2.561089187,32.64089172,10.83779457,1,6.812467501,0.002365538,0.009301968,0.033117531,0.047699209,0.146119766,1.347073648,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
  The DPU-SSI shall provide the capability for an application program to reset the SSI by writing to the SSI Reset Register.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.462857764,2.699822337,32.64089172,10.17063632,1,5.630951482,0.004622097,0.029924013,0.078575646,0.046137934,0.095077201,1.347073648,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0.405465108,0.348237453,0.004907626,0.025341569,0.405465108,0.099717935,7.208482776,1.506183715,53.04851082,11.94260892,1,7.862984932,0.00339945,0.021824118,0.108782388,0.054433206,0.339840872,3.912023005,0.405465108,0.348237453,0.004206537,0.040160234,1.098612289,0.181593869,1.410004426,0,74.81253043,19.24705588,1,11.48551722,0.032432709,0.408486571,2.75678028,0.067877913,0.281409926,5.398162702,0
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.004061484,0,0,0,5.286300271,1.755827294,31.66054102,8.202594474,0.993333333,7.058074292,0.003278865,0.01317404,0.072135032,0.051053453,0.50856068,4.317488114,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004530117,0.036721971,1.098612289,0.169522438,5.807304976,2.929178098,53.04851082,10.29877192,1,7.63560744,0.003208809,0.040166216,0.166858051,0.047888081,0.243802937,3.624340933,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.005353774,0.035257835,0.405465108,0.116816146,9.19019444,0,74.81253043,24.34122967,1,11.45890997,0.022681353,0.209620593,0.521671122,0.066783127,0.104956507,2.402430428,0
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.435718082,2.216454848,53.04851082,13.92248703,1,10.07544464,0.001271386,0.008159725,0.01907079,0.049573042,0.304434202,2.371577964,0.405465108,0.348237453,0.003926101,0.04065074,1.098612289,0.190773939,4.517708467,0,45.52440007,17.72148871,1,11.29593337,0.024369885,0.343912995,0.901685751,0.067381148,0.438205231,3.31872116,0
"   The DPU-CCM shall include the capability to write data to DRAM, the VME Bus, and the Input/Output Channel Controller (IOCC) on ground command.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004711321,0.020273255,0.405465108,0.090664754,5.993910324,0.609871848,32.64089172,10.30089245,1,5.692057665,0.004003301,0.01317404,0.080066023,0.048639468,0.205119815,3.912023005,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0,0,0,3.949240017,1.104028809,19.65342329,7.126580591,0.973333333,10.72919394,0.003186718,0.008831569,0.031867178,0.05852869,0.336568834,1.504077397,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.004362335,0.025341569,0.405465108,0.099717935,5.591451783,1.581896175,32.64089172,9.255047123,1,5.864650375,0.003127222,0.018806314,0.100071101,0.047587391,0.358539197,5.010635294,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.005608716,0.028961793,0.405465108,0.108365108,6.299654122,0,32.64089172,10.50888511,0.986666667,10.76287541,0.00224399,0.010990005,0.03141586,0.054343684,0.150800242,0.544727175,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.117047695,7.461456284,2.868936123,32.64089172,12.6784839,1,5.907999873,0.009105994,0.053974486,0.109271931,0.050209434,0.257623006,4.317488114,0.405465108,0.348237453,0.004711321,0.056757638,1.098612289,0.222398035,2.415099273,0,74.81253043,22.31176383,1,11.97321314,0.044699409,0.816973141,2.369068694,0.072226416,0.302362662,5.398162702,0
 The DPU-SCUI  shall provide SCUI_HK to the DPU-CCM on request.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.369320286,3.571768197,32.64089172,12.5428135,0.993333333,7.230333747,0.003604088,0.01317404,0.036040882,0.055381256,0.41642562,5.010635294,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0.405465108,0.348237453,0.005353774,0.017628918,0.405465108,0.084545319,8.220517246,2.006761541,53.04851082,12.89731031,1,10.03567432,0.002145517,0.012870276,0.049346884,0.047223191,0.277271506,3.912023005,0.405465108,0.348237453,0.00368072,0.042247321,1.098612289,0.183694688,0.037429394,0,74.81253043,17.15090311,1,11.15557294,0.03451994,0.665137892,4.349512383,0.073846282,0.265462512,5.398162702,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.230519585,3.787279017,53.04851082,14.6692207,1,6.607105318,0.00638708,0.057602602,0.121354529,0.050274944,0.219816827,3.064725145,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005608716,0.090930595,1.098612289,0.260970978,6.740533038,0.953321715,53.04851082,13.18726495,1,10.06705588,0.002312746,0.009559668,0.048567666,0.053464407,0.511687126,4.317488114,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,0
"  If commanded, during the collection of event data, the DPU-DPA shall produce PROD_ACS_MSG.","Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,5.136689854,1.18514862,32.64089172,9.517282365,0.973333333,8.671590816,0.002848612,0.01640009,0.034183346,0.056283083,0.162382773,1.257217319,0.405465108,0.348237453,0.005353774,0.082678843,1.098612289,0.236388935,6.231469891,0,74.81253043,19.20754757,1,10.3328822,0.015661242,0.126377918,0.438514768,0.078964348,0.104430786,2.453723722,0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.",HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0.405465108,0.348237453,0.004362335,0.017628918,0.405465108,0.084545319,3.022091663,1.672904592,32.64089172,8.469809029,0.986666667,6.937866505,0.01058009,0.128566129,0.243342081,0.05246794,0.804536718,4.317488114,0.405465108,0.348237453,0.005353774,0.095477125,1.098612289,0.266895923,5.887317722,0,74.81253043,25.52048974,1,11.2662118,0.040810929,0.325418062,0.816218572,0.064592229,0.183144422,2.6901125,0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.723222296,3.364667667,32.64089172,13.85808118,0.993333333,5.436817262,0.018789204,0.199688633,0.281838057,0.048837634,0.324618517,3.912023005,0.405465108,0.348237453,0.004362335,0.066455369,1.098612289,0.232663179,1.908291607,0,74.81253043,18.52190193,1,8.319902952,0.030596572,0.302315065,2.264146306,0.075183376,0.384762459,4.01186834,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.117047695,7.461456284,2.868936123,32.64089172,12.6784839,1,5.907999873,0.009105994,0.053974486,0.109271931,0.050209434,0.257623006,4.317488114,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
 The DPU-DPA shall perform bounds checking before accessing memory.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0,0,0,1.995802535,0.269768129,14.22082103,5.219162577,0.82,8.94097374,0.005449981,0.029526101,0.049049829,0.061648195,0.390243534,1.678430784,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,9.716477976,2.628091274,32.64089172,11.48016812,1,6.768724997,0.002850909,0.01317404,0.03136,0.053775175,0.128754875,2.931193752,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,0
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0.405465108,0.348237453,0.006543502,0.125339783,1.098612289,0.327917698,8.696371138,3.98873101,32.64089172,11.12163784,0.993333333,6.164859444,0.002844336,0.012870276,0.034132034,0.053913371,0.187117725,2.371577964,0.405465108,0.348237453,0.003464207,0.023871468,1.098612289,0.141062759,-2.47230964,0,74.81253043,17.33700262,1,10.52982836,0.038499661,0.429052038,5.505451511,0.081290946,0.195509032,4.705015521,0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.005353774,0.057923587,0.405465108,0.147239188,8.629897524,2.298170107,53.04851082,15.91995219,1,6.092535419,0.007042884,0.030975145,0.098600379,0.051944422,0.345140918,4.317488114,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
  The DPU-DPA shall use the first tracking image accumulated after entering Image mode to locate guide stars using the algorithm described in Appendix C.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0.405465108,0.348237453,0.005608716,0.017628918,0.405465108,0.084545319,5.084951932,1.733915894,32.64089172,10.11032307,0.993333333,7.318251595,0.005367284,0.053974486,0.123447526,0.052093032,0.339089148,3.624340933,0.405465108,0.348237453,0.003926101,0.042091048,1.098612289,0.172278507,2.870183863,0,74.81253043,22.29998915,1,10.23200199,0.041721762,0.816973141,2.294696892,0.067355276,0.226779371,5.398162702,0
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0.405465108,0.348237453,0.004362335,0.019307862,0.405465108,0.08847974,6.506634722,3.228963707,32.64089172,9.646619757,0.993333333,5.847235736,0.003050344,0.01317404,0.064057216,0.049618274,0.308989617,4.317488114,0.405465108,0.348237453,0.003099554,0.032001647,1.098612289,0.168689953,1.471731956,0,74.81253043,18.78753658,1,9.394610363,0.026933916,0.665137892,2.5317881,0.066979107,0.324303884,4.705015521,0
  The DPU-BIT shall use the EEPROM Driver CSC when reading from and writing to the EEPROM.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,8.168479074,5.476332975,32.64089172,9.644416172,1,3.501591357,0.003314183,0.018592303,0.04971275,0.046871098,0.239236751,3.624340933,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
  The image mode shall consist of a science window.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,9.595145968,1.686707209,53.04851082,17.23820228,1,10.07677199,0.002559445,0.008159725,0.023035003,0.060364178,0.435200574,3.218875825,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,0
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0.405465108,0.348237453,0.004907626,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.003926101,0.050985674,1.098612289,0.211290331,1.307500644,0,74.81253043,19.1957366,1,8.198407474,0.028771421,0.293717082,1.697513849,0.07858959,0.416710652,4.705015521,0
  The DPU-DPA shall initiate reaction/response to a command from the DPU-CCM with a latency of no greater than 10 ms.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005121002,0.064020807,0.405465108,0.151901147,8.225221549,2.645523376,53.04851082,14.27715356,1,7.652313417,0.004713682,0.032608573,0.08955996,0.047419371,0.229345877,5.010635294,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
  The text segment and IVT of the DPU-RTOS shall be write-protected.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.12225233,8.531990552,2.502804513,32.64089172,10.61845318,1,7.978506348,0.001603741,0.008159725,0.017641153,0.050919804,0.309168201,3.624340933,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the SSI Error Interrupt.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.465691615,3.787279017,53.04851082,14.52760709,1,6.286305754,0.00773114,0.057602602,0.146891667,0.048736845,0.158361284,2.302585093,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.398190916,0,45.52440007,21.10373934,1,11.11873117,0.026684257,0.129134489,0.400263852,0.088258418,0.204927558,2.453723722,0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.197443344,3.183090076,32.64089172,9.418500417,1,6.876956945,0.003322563,0.029924013,0.053161004,0.049704887,0.35612585,1.875141078,0.405465108,0.348237453,0.004530117,0.08594728,1.098612289,0.270302614,3.837725269,0,74.81253043,24.33478264,1,8.92472576,0.049702627,0.300261847,1.739591961,0.069510387,0.16792934,4.01186834,0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.006543502,0.028961793,0.405465108,0.108365108,6.77055923,3.163247953,32.64089172,9.79556185,0.993333333,4.315687327,0.00520768,0.024639406,0.072907519,0.05315274,0.6511598,3.624340933,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.110183719,6.750150319,3.054043595,53.04851082,12.19474426,1,6.205924516,0.003298839,0.016317564,0.085769803,0.046898759,0.385522377,3.218875825,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,6.317319938,1.978616844,32.64089172,11.34375715,1,6.347469338,0.006482506,0.039749741,0.103720101,0.049582146,0.403070561,4.317488114,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the Timeout Interrupt Condition (INTTO_EN).,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.004711321,0.095477125,1.098612289,0.266895923,8.68440585,3.031733978,53.04851082,14.45976466,1,6.867029604,0.005963726,0.057602602,0.119274513,0.047589649,0.158858105,2.813410717,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004907626,0.020273255,0.405465108,0.090664754,6.495191382,2.852027233,32.64089172,9.928052419,0.993333333,5.366799425,0.005486584,0.030975145,0.109731674,0.047161427,0.222398796,3.218875825,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
 The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0.405465108,0.348237453,0.006199107,0,0,0,3.232689228,0.945653335,14.22082103,5.049620292,0.893333333,7.916529857,0.004874816,0.01640009,0.058497794,0.061217113,0.507653972,2.708050201,0.405465108,0.348237453,0.003926101,0.032365127,1.098612289,0.159414353,1.752771001,0,45.52440007,18.96132702,1,9.188516359,0.037950231,0.816973141,2.239063623,0.071763273,0.289804293,3.606403232,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.006199107,0.07520387,1.098612289,0.257338449,6.039108291,1.744518472,32.64089172,10.4458532,1,8.623947696,0.005435295,0.053974486,0.108705909,0.053399675,0.243909451,3.912023005,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.006543502,0.028961793,0.405465108,0.108365108,6.77055923,3.163247953,32.64089172,9.79556185,0.993333333,4.315687327,0.00520768,0.024639406,0.072907519,0.05315274,0.6511598,3.624340933,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
  The DPU-CCM shall implement a mechanism whereby large memory loads and dumps can be accomplished incrementally.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.056467895,2.191153183,53.04851082,13.61552032,1,8.871139048,0.002789279,0.01317404,0.04462846,0.052915907,0.296413898,2.931193752,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,0
"  If commanded, during the collection of event data, the DPU-DPA shall produce PROD_ACS_MSG.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,5.136689854,1.18514862,32.64089172,9.517282365,0.973333333,8.671590816,0.002848612,0.01640009,0.034183346,0.056283083,0.162382773,1.257217319,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.004530117,0.036721971,1.098612289,0.169522438,5.807304976,2.929178098,53.04851082,10.29877192,1,7.63560744,0.003208809,0.040166216,0.166858051,0.047888081,0.243802937,3.624340933,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,0
  The DPU-SSI shall provide the capability for an application program to reset the SSI by writing to the SSI Reset Register.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.462857764,2.699822337,32.64089172,10.17063632,1,5.630951482,0.004622097,0.029924013,0.078575646,0.046137934,0.095077201,1.347073648,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,0
 The DPU-ICUI shall provide ICUI_HK to the DPU-CCM on request.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.575868041,3.571768197,32.64089172,12.34910017,0.993333333,8.593786069,0.002286684,0.01317404,0.022866842,0.055381256,0.199784502,1.347073648,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.006199107,0.028961793,0.405465108,0.108365108,6.83403007,3.237991444,32.64089172,14.42673415,0.993333333,6.121893974,0.020408026,0.199688633,0.285712359,0.048260952,0.427523163,5.010635294,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,0
  The DPU-DCI shall provide an application program with a function to read the contents of the ping/pong buffer.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.005353774,0.11232603,1.098612289,0.287365353,11.31649679,5.798206774,53.04851082,14.40995842,1,5.068091203,0.001679827,0.009301968,0.028557051,0.04764974,0.159674914,2.525728644,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.25571329,3.787279017,53.04851082,14.65867309,1,6.276703919,0.006366043,0.057602602,0.120954824,0.049955134,0.21285459,3.064725145,0.405465108,0.348237453,0.004530117,0.070806329,1.098612289,0.253358691,0.513876958,0,74.81253043,21.2396791,1,11.77877581,0.042802539,0.552021201,2.48254724,0.06169227,0.492633302,5.398162702,0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.004907626,0.054558357,1.098612289,0.205195127,8.84968164,4.118904553,53.04851082,12.48516171,1,6.663387234,0.002849881,0.021694532,0.099745836,0.046759057,0.266410903,4.317488114,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0.405465108,0.348237453,0.005121002,0.027031007,0.405465108,0.104690641,5.848808037,1.957822096,32.64089172,11.6152304,0.993333333,5.095185069,0.00627883,0.040228329,0.09418245,0.048947934,0.418841168,4.317488114,0.405465108,0.348237453,0.003926101,0.038077909,1.098612289,0.183560148,2.096817026,0,74.81253043,17.9536513,1,8.821122389,0.025604448,0.462045667,2.022751431,0.067380547,0.206447355,4.299550413,0
  The DPU-ADC shall provide an application program with the capability to read the current values of the SCM_ADC_MUX and SCM_ADC_DAT registers.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.004907626,0.079161968,1.098612289,0.263763908,7.958335797,4.273414852,32.64089172,9.958301877,1,5.510647117,0.002406381,0.010990005,0.045721241,0.047888461,0.159106842,1.544899391,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,0
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0.405465108,0.348237453,0.005353774,0,0,0,4.817418608,3.360776028,31.66054102,11.8150953,0.98,5.873911146,0.014892981,0.128566129,0.163822789,0.052983457,0.808129016,5.010635294,0.405465108,0.348237453,0.004362335,0.031303975,1.098612289,0.156842628,1.193718764,0,74.81253043,17.89805377,1,12.68033007,0.028885535,0.552021201,1.76201764,0.06408246,0.308007237,4.01186834,0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.004907626,0.025341569,0.405465108,0.099717935,7.208482776,1.506183715,53.04851082,11.94260892,1,7.862984932,0.00339945,0.021824118,0.108782388,0.054433206,0.339840872,3.912023005,0.405465108,0.348237453,0.004206537,0.051609257,1.098612289,0.199805656,1.978767432,0,74.81253043,21.70204521,1,14.71750575,0.034568151,0.816973141,1.279021599,0.068370923,0.099641927,3.606403232,0
 The DPU-SCUI  shall provide SCUI_HK to the DPU-CCM on request.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.369320286,3.571768197,32.64089172,12.5428135,0.993333333,7.230333747,0.003604088,0.01317404,0.036040882,0.055381256,0.41642562,5.010635294,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.091754437,6.010566674,1.327943502,53.04851082,11.62402303,1,8.774716225,0.003568394,0.021728902,0.135598989,0.049734736,0.332706703,4.317488114,0.405465108,0.348237453,0.005121002,0.05570657,1.098612289,0.222534692,4.659799324,0,45.52440007,17.00671601,0.990950226,8.462848029,0.027514153,0.157557635,0.742882141,0.080451093,0.253587056,3.095577609,0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.00736144,0.040546511,0.405465108,0.128219325,8.042073095,4.102154097,32.64089172,11.13267206,0.993333333,7.038501527,0.003597895,0.01317404,0.035978951,0.052227469,0.188434886,1.544899391,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.005353774,0.017628918,0.405465108,0.084545319,8.220517246,2.006761541,53.04851082,12.89731031,1,10.03567432,0.002145517,0.012870276,0.049346884,0.047223191,0.277271506,3.912023005,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.006543502,0.062379247,0.405465108,0.152265856,10.58320341,4.500604355,53.04851082,16.42866568,1,6.533407322,0.007485289,0.057602602,0.097308751,0.053138853,0.216736593,2.302585093,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.",Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0.405465108,0.348237453,0.005889152,0.045051679,0.405465108,0.135155036,9.05872319,0.788669058,53.04851082,17.33841213,1,9.585735386,0.001864577,0.008159725,0.016781189,0.055452748,0.615731819,3.218875825,0.405465108,0.348237453,0.005353774,0.020273255,0.405465108,0.089494838,4.33877328,0,74.81253043,24.45518186,1,6.080971337,0.048648717,0.816973141,1.945948668,0.068437254,0.166913119,3.383259681,0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0.405465108,0.348237453,0.005121002,0.018430232,0.405465108,0.086445452,6.723522343,1.875653978,32.64089172,10.71367403,1,6.34060071,0.004010994,0.018592303,0.088241876,0.045771729,0.469610648,4.317488114,0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.094193877,6.098156404,0,74.81253043,25.56791673,1,8.744137809,0.047297705,0.816973141,1.702717364,0.070089916,0.19506015,4.299550413,0
The DPU-EDAC shall record the number of SBEs that have been detected in DRAM since boot and the address of the last two SBEs.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.005889152,0.019307862,0.405465108,0.08847974,6.645823518,2.249497855,32.64089172,9.94142774,1,6.630809131,0.002175544,0.011670936,0.045686427,0.048821731,0.245386045,2.708050201,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,0
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.005121002,0.1074341,1.098612289,0.305055066,7.299217141,0.814963391,53.04851082,14.75013414,1,9.152493112,0.003762451,0.01640009,0.05267431,0.064033639,0.392502765,3.624340933,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.25571329,3.787279017,53.04851082,14.65867309,1,6.276703919,0.006366043,0.057602602,0.120954824,0.049955134,0.21285459,3.064725145,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.005608716,0.062379247,0.405465108,0.152265856,11.9682059,3.526952732,53.04851082,17.14745795,1,6.782171716,0.003618726,0.014814937,0.047043444,0.048596515,0.210443352,3.401197382,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004061484,0.08594728,1.098612289,0.270302614,1.658103063,0,74.81253043,23.85007878,1,9.151660441,0.039381187,0.302315065,1.378341546,0.07339589,0.292401892,4.299550413,0
 The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.006199107,0,0,0,3.232689228,0.945653335,14.22082103,5.049620292,0.893333333,7.916529857,0.004874816,0.01640009,0.058497794,0.061217113,0.507653972,2.708050201,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.006199107,0.031189624,0.405465108,0.112455788,6.283412031,2.755432086,32.64089172,9.516574007,0.993333333,8.571554407,0.001593493,0.008159725,0.020715411,0.053937008,0.295917987,2.197224577,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,0
 The DPU-BOOT CSC shall set the processor speed  to MHz.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.00736144,0.040546511,0.405465108,0.128219325,8.261192616,4.676267184,32.64089172,11.30306457,0.993333333,6.892275937,0.003023308,0.012870276,0.030233077,0.050676933,0.314200062,4.317488114,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
"  The DPU-DCI shall provide an application program with the ability to read the current hardware status, including the Data Level Trigger, the Data Timeout Trigger, the DCI Event Mode, and the Normal/Test Mode.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0.405465108,0.348237453,0.005121002,0.057849131,1.098612289,0.226657569,6.25302482,3.697206305,32.64089172,8.739221632,1,5.995463126,0.002206596,0.009301968,0.057371509,0.048050089,0.21899168,2.931193752,0.405465108,0.348237453,0.003271751,0.031303975,1.098612289,0.156842628,1.159439125,0,74.81253043,24.72925261,1,11.37073806,0.052632344,0.816973141,3.21057296,0.08047088,0.170626254,5.398162702,0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004061484,0,0,0,-1.452655887,0,40.28750799,14.01989159,0.977375566,13.80087164,0.036800617,0.160841236,0.846414199,0.090066534,1.092013461,5.398162702,0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0.405465108,0.348237453,0.006199107,0.028961793,0.405465108,0.108365108,6.83403007,3.237991444,32.64089172,14.42673415,0.993333333,6.121893974,0.020408026,0.199688633,0.285712359,0.048260952,0.427523163,5.010635294,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,-7.334746354,0,45.52440007,33.86360525,0.954751131,8.971136526,0.050205998,0.336623225,0.953913957,0.077752949,0.71393411,5.398162702,0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,6.292384479,2.533290019,32.64089172,10.50682596,0.993333333,8.083735047,0.001831371,0.008159725,0.031133302,0.048725792,0.335314831,2.708050201,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0.405465108,0.348237453,0.004711321,0.021340269,0.405465108,0.093020075,6.393212468,2.209652263,32.64089172,10.78406774,0.993333333,6.01111885,0.007414897,0.05067867,0.14088304,0.048337324,0.408925365,3.218875825,0.405465108,0.348237453,0.00368072,0.034576492,1.098612289,0.175164056,1.352666914,0,74.81253043,17.68710094,1,8.705409194,0.030601887,0.264424359,2.662364169,0.077160858,0.234936858,4.705015521,0
 The DPU-DCI shall provide access to the DCI status register so that an application program can determine error type.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.006199107,0.079161968,1.098612289,0.263763908,7.143917455,5.483153946,32.64089172,9.664436575,1,5.594377982,0.006096801,0.066950782,0.115839223,0.046310375,0.177290609,1.857899272,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
"  When tracking is enabled, the DPU-DPA will produce a PROD_TRACKING_REC at the commanded rate.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005353774,0.146887885,1.098612289,0.323427505,11.10426885,3.127443514,53.04851082,16.52316591,1,7.242443539,0.003505836,0.01640009,0.045575874,0.046657871,0.142515277,2.040220829,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.",Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0.405465108,0.348237453,0.004530117,0.068197947,1.098612289,0.228158976,7.483922911,1.386517258,53.04851082,13.39327932,1,9.901293017,0.003467706,0.018806314,0.097095766,0.048803737,0.403642114,5.010635294,0.405465108,0.348237453,0.005121002,0.088475141,1.098612289,0.27819479,2.690952872,0,45.52440007,17.38645997,0.959276018,11.7891405,0.02645415,0.161058499,0.449720547,0.059110306,0.492330206,3.452252552,0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0.095477125,1.098612289,0.266895923,11.92302893,5.954731198,53.04851082,14.12196581,1,4.431832391,0.001779869,0.010990005,0.035597377,0.04897638,0.158969265,1.707418321,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The DPU-BIT shall use the EEPROM Driver CSC when reading from and writing to the EEPROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,8.168479074,5.476332975,32.64089172,9.644416172,1,3.501591357,0.003314183,0.018592303,0.04971275,0.046871098,0.239236751,3.624340933,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.197443344,3.183090076,32.64089172,9.418500417,1,6.876956945,0.003322563,0.029924013,0.053161004,0.049704887,0.35612585,1.875141078,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the DCI Interface.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.079161968,1.098612289,0.263763908,7.499729199,0.853319476,32.64089172,10.72519222,1,5.551523796,0.004759633,0.023975071,0.090433023,0.046523166,0.1425269,2.813410717,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.374868953,1.820303566,32.64089172,9.961976383,1,7.626602611,0.003304378,0.01317404,0.046261286,0.058767002,0.394093167,2.708050201,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The DPU-CCM shall provide a command to resend DPU_HK_START.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.006199107,0.045051679,0.405465108,0.135155036,11.23773006,6.873768264,53.04851082,17.32468845,1,8.209649495,0.003265494,0.01317404,0.029389444,0.056199911,0.281029311,1.347073648,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.004206537,0.023169435,0.405465108,0.095488699,5.981368328,2.253581843,53.04851082,11.33188402,1,3.923857446,0.004068757,0.023136724,0.142406489,0.049054757,0.45470325,5.010635294,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0.405465108,0.348237453,0.006199107,0.031189624,0.405465108,0.112455788,6.283412031,2.755432086,32.64089172,9.516574007,0.993333333,8.571554407,0.001593493,0.008159725,0.020715411,0.053937008,0.295917987,2.197224577,0.405465108,0.348237453,0.00368072,0.071933904,1.098612289,0.252709776,1.194038736,0,74.81253043,17.62710207,1,11.126388,0.028504354,0.300261847,2.223339606,0.076047919,0.307216531,4.705015521,0
"  The DPU-SSI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.004711321,0.022525839,0.405465108,0.095569042,6.064420459,2.009447097,32.64089172,11.12251285,0.993333333,7.078344561,0.007561433,0.05067867,0.136105802,0.049129974,0.403301914,3.218875825,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,0
  The DPU-DCI shall provide an application program with a function to read the contents of the ping/pong buffer.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.005353774,0.11232603,1.098612289,0.287365353,11.31649679,5.798206774,53.04851082,14.40995842,1,5.068091203,0.001679827,0.009301968,0.028557051,0.04764974,0.159674914,2.525728644,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.005608716,0.062379247,0.405465108,0.152265856,11.9682059,3.526952732,53.04851082,17.14745795,1,6.782171716,0.003618726,0.014814937,0.047043444,0.048596515,0.210443352,3.401197382,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,0
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0.405465108,0.348237453,0.005608716,0.028961793,0.405465108,0.108365108,6.299654122,0,32.64089172,10.50888511,0.986666667,10.76287541,0.00224399,0.010990005,0.03141586,0.054343684,0.150800242,0.544727175,0.405465108,0.348237453,0.004206537,0.073335126,1.098612289,0.257557778,2.74345878,0,45.52440007,15.48691545,0.995475113,10.67373391,0.020330691,0.154594115,1.138518682,0.071863811,0.454960265,5.398162702,0
  The DPU-EDAC shall report EDAC_HK on request.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.006928414,0,0,0,6.130800388,0.269768129,24.16548551,9.498348988,0.973333333,11.46021695,0.001369212,0.008159725,0.009584486,0.064751291,0.092968126,0.206614249,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.",Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.004362335,0.068088459,1.098612289,0.216202032,7.113853887,3.146168001,53.04851082,11.25306727,1,5.613551642,0.002669954,0.018806314,0.09077843,0.050733144,0.24792141,3.912023005,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,6.65529339,1.223637341,53.04851082,15.81481634,1,7.071979157,0.009233122,0.04672809,0.129263708,0.052411531,0.117695336,1.752538756,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0.405465108,0.348237453,0.005121002,0.014480897,0.405465108,0.076625703,6.270721901,1.934369686,32.64089172,8.354500591,1,8.661015997,0.002429604,0.014137033,0.068028921,0.049490555,0.306602027,3.624340933,0.405465108,0.348237453,0.004711321,0.065394669,1.098612289,0.237860115,1.548716545,0,45.52440007,16.31466473,1,8.020118866,0.030491421,0.209620593,1.402605344,0.078000366,0.22090605,4.705015521,0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.",Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.004907626,0.015017226,0.405465108,0.078031796,5.264956052,0.766822333,32.64089172,9.459174339,1,5.667973646,0.00563173,0.029542409,0.152056713,0.047226862,0.272083143,5.010635294,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.25571329,3.787279017,53.04851082,14.65867309,1,6.276703919,0.006366043,0.057602602,0.120954824,0.049955134,0.21285459,3.064725145,0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,4.113995673,0,45.52440007,15.75914625,0.945701357,11.01348011,0.024249927,0.18202996,0.363748899,0.070459362,0.108181649,1.750105242,0
  The DPU-EDAC shall record the number of MBEs that have been detected in PROM and EEPROM since boot and the address of the last two MBEs.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0.405465108,0.348237453,0.005889152,0.018430232,0.405465108,0.086445452,6.535652843,2.790649579,32.64089172,9.714090419,1,6.629523677,0.00219305,0.011670936,0.048247102,0.048201571,0.26172415,2.445685937,0.405465108,0.348237453,0.005121002,0.065846293,1.098612289,0.224405291,3.553418553,0,74.81253043,23.09329772,1,9.909170576,0.037730805,0.264424359,1.094193346,0.071696469,0.231408348,2.453723722,0
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.006543502,0.033788759,0.405465108,0.117047695,8.939615348,3.275789059,32.64089172,12.77609001,0.993333333,6.657233305,0.0064915,0.0592439,0.077898004,0.051128962,0.134897391,1.919592841,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.004907626,0.019307862,0.405465108,0.08847974,8.310545856,2.628091274,53.04851082,13.6318606,1,11.90927556,0.001558996,0.01317404,0.032738907,0.050121824,0.145751628,2.525728644,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004061484,0.01126292,0.405465108,0.067577518,5.411878453,1.819811711,32.64089172,8.770240745,1,7.291843048,0.00240055,0.018592303,0.086419813,0.046588039,0.389473593,5.010635294,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005608716,0.071622733,1.098612289,0.251358785,5.165550863,1.743494432,53.04851082,16.56793822,1,7.086162303,0.015351592,0.251150229,0.322383437,0.047464847,0.11600777,3.401197382,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.004206537,0.066847884,1.098612289,0.240341284,2.400373963,0,45.52440007,16.49367796,1,7.933306677,0.023335031,0.130484201,1.050076394,0.081980488,0.208630436,4.705015521,0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,0
"   The DPU-CCM shall include the capability to write data to DRAM, the VME Bus, and the Input/Output Channel Controller (IOCC) on ground command.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004711321,0.020273255,0.405465108,0.090664754,5.993910324,0.609871848,32.64089172,10.30089245,1,5.692057665,0.004003301,0.01317404,0.080066023,0.048639468,0.205119815,3.912023005,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
  The DPU-DCI shall provide an application program with the ability to force a ping-pong buffer swap when the interface is in Test Mode.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005353774,0.136734309,1.098612289,0.333194056,10.33123733,4.630392746,53.04851082,14.57471288,1,7.09037286,0.002685647,0.015194868,0.059084227,0.047137186,0.184090093,2.931193752,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.004907626,0.079161968,1.098612289,0.263763908,7.455624492,3.787279017,32.64089172,9.730207996,1,6.440767197,0.002699415,0.010990005,0.051288879,0.047076013,0.125531207,2.813410717,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.114474904,7.222385649,0.98921027,53.04851082,13.36321037,1,8.240290008,0.004138516,0.028176413,0.099324378,0.052257754,0.453137836,4.317488114,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the Timeout Interrupt Condition (INTTO_EN).,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004711321,0.095477125,1.098612289,0.266895923,8.68440585,3.031733978,53.04851082,14.45976466,1,6.867029604,0.005963726,0.057602602,0.119274513,0.047589649,0.158858105,2.813410717,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005608716,0,0,0,5.724130151,3.292263646,31.66054102,12.63918772,0.986666667,5.78474485,0.014895821,0.128566129,0.163854035,0.052160497,0.70576525,5.010635294,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,5.250627352,2.092093283,32.64089172,11.12520611,1,6.35269521,0.011306724,0.061221395,0.180907591,0.049327887,0.494176603,5.010635294,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The DPU-EDAC shall record the number of SBEs that have been detected in PROM and EEPROM since boot and the address of the last two SBEs.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005889152,0.018430232,0.405465108,0.086445452,6.535652843,2.790649579,32.64089172,9.714090419,1,6.629523677,0.00219305,0.011670936,0.048247102,0.048201571,0.26172415,2.445685937,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.435718082,2.216454848,53.04851082,13.92248703,1,10.07544464,0.001271386,0.008159725,0.01907079,0.049573042,0.304434202,2.371577964,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-DPA shall initiate reaction/response to a command from the DPU-CCM with a latency of no greater than 10 ms.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005121002,0.064020807,0.405465108,0.151901147,8.225221549,2.645523376,53.04851082,14.27715356,1,7.652313417,0.004713682,0.032608573,0.08955996,0.047419371,0.229345877,5.010635294,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,8.027913776,1.924657201,32.64089172,11.88063044,0.993333333,6.5006158,0.004090636,0.01317404,0.057268908,0.052589039,0.251452373,2.525728644,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004530117,0.040546511,0.405465108,0.124799527,6.412016691,0.413175374,53.04851082,13.67656972,1,8.788891679,0.002336666,0.013304178,0.046733312,0.054279038,0.239138658,4.317488114,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,9.249994413,3.03839723,32.64089172,12.42516987,0.993333333,5.671865421,0.002461656,0.008159725,0.029539877,0.049495618,0.206292313,4.317488114,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004907626,0.020273255,0.405465108,0.090664754,6.495191382,2.852027233,32.64089172,9.928052419,0.993333333,5.366799425,0.005486584,0.030975145,0.109731674,0.047161427,0.222398796,3.218875825,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.006543502,0.125339783,1.098612289,0.327917698,8.696371138,3.98873101,32.64089172,11.12163784,0.993333333,6.164859444,0.002844336,0.012870276,0.034132034,0.053913371,0.187117725,2.371577964,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005608716,0.125339783,1.098612289,0.320709835,10.55001787,6.936331591,53.04851082,12.67362236,1,6.029942301,0.002307395,0.010990005,0.055377476,0.046732936,0.168928913,2.238046572,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004907626,0.019307862,0.405465108,0.08847974,8.310545856,2.628091274,53.04851082,13.6318606,1,11.90927556,0.001558996,0.01317404,0.032738907,0.050121824,0.145751628,2.525728644,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005353774,0,0,0,6.294699669,0.134884065,24.16548551,8.750036859,0.986666667,10.47595897,0.001229876,0.008159725,0.012298759,0.058045639,0.196085549,0.544727175,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005121002,0.014480897,0.405465108,0.076625703,6.270721901,1.934369686,32.64089172,8.354500591,1,8.661015997,0.002429604,0.014137033,0.068028921,0.049490555,0.306602027,3.624340933,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005121002,0.022525839,0.405465108,0.095569042,7.128826961,2.867644829,32.64089172,10.75182494,1,5.199364255,0.004533315,0.029347082,0.081599673,0.050294624,0.290774639,2.371577964,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.114474904,8.802517932,3.182943119,53.04851082,13.20129125,1,5.617653585,0.004175308,0.029542409,0.100207387,0.045444783,0.270047786,3.401197382,0.405465108,0.348237453,0.004907626,0.031189624,0.405465108,0.110183719,6.447875662,0,74.81253043,20.70451475,1,11.64593929,0.021655169,0.161058499,0.563034385,0.067224639,0.215020029,2.220108871,0
  The DPU-BOOT CSC shall increment the BOOT_CNT parameter in the EEPROM each time the DPU-RTOS is copied from EEPROM to DRAM and executed.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005889152,0.07520387,1.098612289,0.257338449,9.036125467,4.796579011,32.64089172,10.66790341,1,4.301212979,0.002193476,0.012870276,0.043869512,0.046431182,0.301567366,3.218875825,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,0
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,8.844705196,2.194148411,32.64089172,12.58944688,0.993333333,9.051412029,0.00459679,0.013784839,0.041371112,0.052432677,0.074064247,0.733969175,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-DCI shall provide an application program with the ability to force a ping-pong buffer swap when the interface is in Test Mode.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0.405465108,0.348237453,0.005353774,0.136734309,1.098612289,0.333194056,10.33123733,4.630392746,53.04851082,14.57471288,1,7.09037286,0.002685647,0.015194868,0.059084227,0.047137186,0.184090093,2.931193752,0.405465108,0.348237453,0.004206537,0.016218604,0.405465108,0.081093022,0.8330067,0,45.52440007,19.69609836,1,8.909673129,0.038756023,0.234640863,0.968900587,0.066243059,0.376261655,5.398162702,0
"  The DPU-RTOS shall schedule tasks based on priority, and shall time-slice tasks with the same priority.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005608716,0.028961793,0.405465108,0.108365108,7.246832904,0.714322967,32.64089172,10.81071062,1,7.960267334,0.001398042,0.008159725,0.019572583,0.051825883,0.293417265,2.525728644,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
 The DPU-BIT shall complete the BIT within A seconds.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.006928414,0.167119711,1.098612289,0.374164057,7.092032141,1.822313197,32.64089172,11.28563569,0.993333333,5.271911377,0.005600091,0.018592303,0.050400818,0.05067166,0.339751057,2.931193752,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.004530117,0.023850889,0.405465108,0.098339733,6.855545012,0.846970217,32.64089172,11.43757906,0.993333333,6.940782538,0.003814653,0.01608024,0.064849094,0.051528313,0.149215499,4.317488114,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,0
"  The DPU-ADC CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0.405465108,0.348237453,0.004711321,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003926101,0.024799253,1.098612289,0.139943487,4.258459065,0,74.81253043,16.07436956,1,12.46331899,0.017486392,0.264424359,1.346452177,0.070758779,0.191822632,4.01186834,0
  The DPU-TIS shall read from the SCM registers in B-bit words only.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,7.695410775,1.777044805,32.64089172,12.29901458,0.993333333,5.632809637,0.004379388,0.023975071,0.052552657,0.051231317,0.375790688,4.317488114,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.071622733,1.098612289,0.251358785,8.414429736,3.99446136,32.64089172,10.9424916,1,5.586559485,0.002550104,0.015194868,0.053552174,0.047901702,0.250796463,2.931193752,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
  The DPU-CCM shall forward the DPU_HBEAT message to DPU-ICUI for transmission to the ICU at an interval of A seconds.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.144593871,1.098612289,0.359899242,9.293233613,5.453581349,32.64089172,10.23104013,1,5.528812714,0.002153666,0.01317404,0.038765983,0.051396488,0.257252702,2.931193752,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.00736144,0.040546511,0.405465108,0.128219325,8.042073095,4.102154097,32.64089172,11.13267206,0.993333333,7.038501527,0.003597895,0.01317404,0.035978951,0.052227469,0.188434886,1.544899391,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0.405465108,0.348237453,0.004362335,0.017628918,0.405465108,0.084545319,3.022091663,1.672904592,32.64089172,8.469809029,0.986666667,6.937866505,0.01058009,0.128566129,0.243342081,0.05246794,0.804536718,4.317488114,0.405465108,0.348237453,0.004206537,0.048079154,1.098612289,0.197953091,2.108803339,0,74.81253043,19.65140059,1,10.4908524,0.03099337,0.293717082,2.200529236,0.069509053,0.179370723,4.705015521,0
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.435718082,2.216454848,53.04851082,13.92248703,1,10.07544464,0.001271386,0.008159725,0.01907079,0.049573042,0.304434202,2.371577964,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
 The DPU-SSI shall provide an application program with the capability to read the SSI status register.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005608716,0.100271826,1.098612289,0.295264328,7.221711927,3.787279017,32.64089172,11.06347599,1,5.913441346,0.008689104,0.066950782,0.130336559,0.046127584,0.087845861,1.347073648,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.723222296,3.364667667,32.64089172,13.85808118,0.993333333,5.436817262,0.018789204,0.199688633,0.281838057,0.048837634,0.324618517,3.912023005,0.405465108,0.348237453,0.004206537,0.040160234,1.098612289,0.181593869,1.410004426,0,74.81253043,19.24705588,1,11.48551722,0.032432709,0.408486571,2.75678028,0.067877913,0.281409926,5.398162702,0
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.006199107,0.036860464,0.405465108,0.12225233,8.739531387,3.360776028,32.64089172,11.48300864,0.993333333,7.679366775,0.002448825,0.012870276,0.026937072,0.052148811,0.14577892,2.445685937,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,7.695410775,1.777044805,32.64089172,12.29901458,0.993333333,5.632809637,0.004379388,0.023975071,0.052552657,0.051231317,0.375790688,4.317488114,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004530117,0.047765752,1.098612289,0.229076498,6.554226533,2.18695276,25.72089663,8.350697489,0.993333333,7.930134206,0.00136754,0.008159725,0.031453409,0.049005166,0.286220601,2.371577964,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0.405465108,0.348237453,0.005353774,0.118304077,1.098612289,0.328806722,6.158989894,5.151009132,32.64089172,11.50131293,1,4.02606525,0.011091002,0.061221395,0.24400204,0.046046723,0.503152192,5.010635294,0.405465108,0.348237453,0.005353774,0.035257835,0.405465108,0.116816146,9.19019444,0,74.81253043,24.34122967,1,11.45890997,0.022681353,0.209620593,0.521671122,0.066783127,0.104956507,2.402430428,0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.003926101,0.04065074,1.098612289,0.190773939,4.517708467,0,45.52440007,17.72148871,1,11.29593337,0.024369885,0.343912995,0.901685751,0.067381148,0.438205231,3.31872116,0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004711321,0.015594812,0.405465108,0.07951825,5.095162195,0.609871848,32.64089172,9.633773605,1,5.698930755,0.005843006,0.029542409,0.151918147,0.047325102,0.269291651,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,0
The DPU-BOOT CSC X shall occupy no more than 32 KB of PROM.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,3.997987947,1.668415202,14.22082103,5.750498406,0.94,7.80143268,0.003528023,0.012870276,0.045864304,0.052902029,0.364825041,2.48490665,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.005608716,0.084508638,1.098612289,0.304700226,2.466664168,0.553650055,18.83336281,5.200942671,0.88,9.89426188,0.003386235,0.008263839,0.044021061,0.056806364,0.936338349,3.218875825,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,0
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.12225233,7.115412051,0.639713501,32.64089172,10.95456478,0.993333333,7.061646262,0.003838274,0.01317404,0.042221019,0.049758275,0.275915557,3.624340933,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.004907626,0.015017226,0.405465108,0.078031796,5.264956052,0.766822333,32.64089172,9.459174339,1,5.667973646,0.00563173,0.029542409,0.152056713,0.047226862,0.272083143,5.010635294,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
"  The DPU-ADC shall provide an application program with a function to perform an alternating read/setup-start sequence which will read the A/D result setup on the last call store the result into the scan list, and setup the conversion for the next item in the scan list; then on the next call start the conversion which was setup during the last call.","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0.405465108,0.348237453,0.004711321,0.046574207,1.098612289,0.190185268,7.45496171,2.752405972,53.04851082,11.61915795,1,7.146521263,0.002412173,0.011670936,0.098899087,0.048532766,0.263660961,4.317488114,0.405465108,0.348237453,0.004711321,0.056757638,1.098612289,0.222398035,2.415099273,0,74.81253043,22.31176383,1,11.97321314,0.044699409,0.816973141,2.369068694,0.072226416,0.302362662,5.398162702,0
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.004530117,0.040546511,0.405465108,0.124799527,6.412016691,0.413175374,53.04851082,13.67656972,1,8.788891679,0.002336666,0.013304178,0.046733312,0.054279038,0.239138658,4.317488114,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,0
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.095569042,4.477983872,0.134884065,32.64089172,8.672386285,0.993333333,7.060931189,0.003843849,0.01317404,0.069189275,0.052712659,0.234039824,4.317488114,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,0
  The DPU-CCM shall implement a mechanism whereby large memory loads and dumps can be accomplished incrementally.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.056467895,2.191153183,53.04851082,13.61552032,1,8.871139048,0.002789279,0.01317404,0.04462846,0.052915907,0.296413898,2.931193752,0.405465108,0.348237453,0.00368072,0.042247321,1.098612289,0.183694688,0.037429394,0,74.81253043,17.15090311,1,11.15557294,0.03451994,0.665137892,4.349512383,0.073846282,0.265462512,5.398162702,0
  The DPU-DCI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the DCI Interface.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005353774,0.079161968,1.098612289,0.263763908,7.499729199,0.853319476,32.64089172,10.72519222,1,5.551523796,0.004759633,0.023975071,0.090433023,0.046523166,0.1425269,2.813410717,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,0
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.12225233,7.115412051,0.639713501,32.64089172,10.95456478,0.993333333,7.061646262,0.003838274,0.01317404,0.042221019,0.049758275,0.275915557,3.624340933,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,0
 The DPU-SCUI  shall provide SCUI_HK to the DPU-CCM on request.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.369320286,3.571768197,32.64089172,12.5428135,0.993333333,7.230333747,0.003604088,0.01317404,0.036040882,0.055381256,0.41642562,5.010635294,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,0
  The text segment and IVT of the DPU-RTOS shall be write-protected.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.12225233,8.531990552,2.502804513,32.64089172,10.61845318,1,7.978506348,0.001603741,0.008159725,0.017641153,0.050919804,0.309168201,3.624340933,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,0
"  The DPU-SSI shall provide an operational mode (Tx MESSAGE MODE) for transmitting blocks in which consecutive words in a block are transmitted,  and the transmitter is disabled until a transmit IBG interrupt is received.  At this point the transmitter is re-enabled, and the next message can be transmitted.","Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0.405465108,0.348237453,0.004530117,0.07520387,1.098612289,0.254017814,7.117281038,2.430291002,53.04851082,11.50860019,1,8.138414147,0.001763192,0.009582931,0.070527686,0.047358792,0.259789026,3.624340933,0.405465108,0.348237453,0.005353774,0.082678843,1.098612289,0.236388935,6.231469891,0,74.81253043,19.20754757,1,10.3328822,0.015661242,0.126377918,0.438514768,0.078964348,0.104430786,2.453723722,0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0.405465108,0.348237453,0.006199107,0.023850889,0.405465108,0.098339733,6.715798558,4.155447037,32.64089172,9.346543382,1,6.265737087,0.005545595,0.029347082,0.094275122,0.048168063,0.290086224,2.371577964,0.405465108,0.348237453,0.005353774,0.095477125,1.098612289,0.266895923,5.887317722,0,74.81253043,25.52048974,1,11.2662118,0.040810929,0.325418062,0.816218572,0.064592229,0.183144422,2.6901125,0
"  If the DPU-SCUI FIFO is full when DPU-DPA attempts to enqueue its data product, DPU-DPA shall suspend event processing until room is available on the respective FIFO for the current data product.  Incoming data may be dropped while suspended.  An error shall be reported DPU-CCM.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.004907626,0.072296936,1.098612289,0.261322646,4.784631391,2.213526752,32.64089172,7.937712321,0.993333333,6.596013238,0.002301561,0.01317404,0.082856182,0.048637793,0.387362043,3.624340933,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,0
  The DPU-BIT shall use the EEPROM Driver CSC when reading from and writing to the EEPROM.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,8.168479074,5.476332975,32.64089172,9.644416172,1,3.501591357,0.003314183,0.018592303,0.04971275,0.046871098,0.239236751,3.624340933,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,0
 The DPU-SCUI shall buffer an amount of data specified by the SCU_BUFFER_SIZE parameter provided during initialization.  The default buffer size will be set to X MB of data.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0.405465108,0.348237453,0.004711321,0.060163096,1.098612289,0.231017763,7.252050281,5.104354599,32.64089172,8.490552083,1,4.131585614,0.002480361,0.01317404,0.062009036,0.049261295,0.358255553,2.238046572,0.405465108,0.348237453,0.004362335,0.066455369,1.098612289,0.232663179,1.908291607,0,74.81253043,18.52190193,1,8.319902952,0.030596572,0.302315065,2.264146306,0.075183376,0.384762459,4.01186834,0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
"  When tracking is enabled, the DPU-DPA will produce a PROD_TRACKING_REC at the commanded rate.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005353774,0.146887885,1.098612289,0.323427505,11.10426885,3.127443514,53.04851082,16.52316591,1,7.242443539,0.003505836,0.01640009,0.045575874,0.046657871,0.142515277,2.040220829,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005889152,0,0,0,2.45644206,0.639713501,14.22082103,5.747838196,0.82,5.814891907,0.007261147,0.018592303,0.050828032,0.05239389,1.130373476,3.624340933,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
 The DPU-EDAC shall record the current contents of EDAC_HK to EEPROM and force a DPU watchdog in the event an MBE in DRAM is detected.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.005121002,0.130789339,1.098612289,0.326779551,11.16004191,4.273414852,53.04851082,14.19161458,1,6.896942783,0.002416776,0.022314282,0.05558585,0.046157972,0.291288641,5.010635294,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,0
" The DPU-CCM shall include the capability to read data from DRAM, the VME Bus, and the IOCC on ground command.","remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.095569042,7.508677382,3.424285419,32.64089172,10.22734576,1,4.945198432,0.003399975,0.01317404,0.061199558,0.047798512,0.153727318,2.813410717,0.405465108,0.348237453,0.003464207,0.023871468,1.098612289,0.141062759,-2.47230964,0,74.81253043,17.33700262,1,10.52982836,0.038499661,0.429052038,5.505451511,0.081290946,0.195509032,4.705015521,0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.230519585,3.787279017,53.04851082,14.6692207,1,6.607105318,0.00638708,0.057602602,0.121354529,0.050274944,0.219816827,3.064725145,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
"  The DPU-ADC CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0.405465108,0.348237453,0.004711321,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003926101,0.042091048,1.098612289,0.172278507,2.870183863,0,74.81253043,22.29998915,1,10.23200199,0.041721762,0.816973141,2.294696892,0.067355276,0.226779371,5.398162702,0
"  The DPU-SSI shall provide an operational mode (Tx MESSAGE MODE) for transmitting blocks in which consecutive words in a block are transmitted,  and the transmitter is disabled until a transmit IBG interrupt is received.  At this point the transmitter is re-enabled, and the next message can be transmitted.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0.405465108,0.348237453,0.004530117,0.07520387,1.098612289,0.254017814,7.117281038,2.430291002,53.04851082,11.50860019,1,8.138414147,0.001763192,0.009582931,0.070527686,0.047358792,0.259789026,3.624340933,0.405465108,0.348237453,0.003099554,0.032001647,1.098612289,0.168689953,1.471731956,0,74.81253043,18.78753658,1,9.394610363,0.026933916,0.665137892,2.5317881,0.066979107,0.324303884,4.705015521,0
 The DPU-TMALI shall use DPU-DCI to communicate with the DCI Interface.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.881290138,5.798206774,32.64089172,10.57351357,0.993333333,8.414678188,0.002840194,0.009036017,0.031242136,0.050723477,0.165754888,1.059391576,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,0
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.112155958,0.269768129,32.64089172,12.2844916,0.993333333,9.801282745,0.003798833,0.012378786,0.056982494,0.058062046,0.258581365,2.525728644,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,0
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0.405465108,0.348237453,0.004711321,0.022525839,0.405465108,0.095569042,6.064420459,2.009447097,32.64089172,11.12251285,0.993333333,7.078344561,0.007561433,0.05067867,0.136105802,0.049129974,0.403301914,3.218875825,0.405465108,0.348237453,0.003926101,0.050985674,1.098612289,0.211290331,1.307500644,0,74.81253043,19.1957366,1,8.198407474,0.028771421,0.293717082,1.697513849,0.07858959,0.416710652,4.705015521,0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
  The DPU-EDAC shall record the number of SBEs that have been detected in PROM and EEPROM since boot and the address of the last two SBEs.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.005889152,0.018430232,0.405465108,0.086445452,6.535652843,2.790649579,32.64089172,9.714090419,1,6.629523677,0.00219305,0.011670936,0.048247102,0.048201571,0.26172415,2.445685937,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.004907626,0.021340269,0.405465108,0.093020075,5.960514377,2.216945994,32.64089172,10.41142779,0.993333333,8.564247742,0.004265253,0.029542409,0.081039811,0.051095236,0.195731798,2.445685937,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.",External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0.405465108,0.348237453,0.004530117,0.036721971,1.098612289,0.169522438,5.807304976,2.929178098,53.04851082,10.29877192,1,7.63560744,0.003208809,0.040166216,0.166858051,0.047888081,0.243802937,3.624340933,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.398190916,0,45.52440007,21.10373934,1,11.11873117,0.026684257,0.129134489,0.400263852,0.088258418,0.204927558,2.453723722,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.117047695,7.461456284,2.868936123,32.64089172,12.6784839,1,5.907999873,0.009105994,0.053974486,0.109271931,0.050209434,0.257623006,4.317488114,0.405465108,0.348237453,0.004530117,0.08594728,1.098612289,0.270302614,3.837725269,0,74.81253043,24.33478264,1,8.92472576,0.049702627,0.300261847,1.739591961,0.069510387,0.16792934,4.01186834,0
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.112155958,0.269768129,32.64089172,12.2844916,0.993333333,9.801282745,0.003798833,0.012378786,0.056982494,0.058062046,0.258581365,2.525728644,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.005121002,0.120787267,1.098612289,0.323503811,8.039847543,2.012083786,53.04851082,13.47708719,1,7.459409309,0.007436445,0.157850971,0.252839146,0.048181201,0.260856313,2.813410717,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.004530117,0.062567773,1.098612289,0.207853444,7.347545406,3.151043214,53.04851082,10.91648875,1,5.612733762,0.001606154,0.008918459,0.059427689,0.050077324,0.27252759,5.010635294,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,7.429713548,0.688150253,32.64089172,12.3882888,1,4.786356229,0.012707115,0.157850971,0.216020955,0.052225486,0.243977046,4.317488114,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,0
  The DPU-TIS shall read from the SCM registers in B-bit words only.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,7.695410775,1.777044805,32.64089172,12.29901458,0.993333333,5.632809637,0.004379388,0.023975071,0.052552657,0.051231317,0.375790688,4.317488114,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0.405465108,0.348237453,0.005121002,0.060921253,1.098612289,0.205276456,7.977037935,3.691457513,53.04851082,11.36865599,1,4.824616481,0.002728795,0.019568125,0.103694221,0.050921364,0.259333181,3.218875825,0.405465108,0.348237453,0.003926101,0.032365127,1.098612289,0.159414353,1.752771001,0,45.52440007,18.96132702,1,9.188516359,0.037950231,0.816973141,2.239063623,0.071763273,0.289804293,3.606403232,0
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,9.732063276,2.627956055,53.04851082,14.64682866,1,7.763790878,0.004115995,0.018592303,0.08643589,0.044831578,0.387206038,5.010635294,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,0
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.006543502,0.125339783,1.098612289,0.327917698,8.696371138,3.98873101,32.64089172,11.12163784,0.993333333,6.164859444,0.002844336,0.012870276,0.034132034,0.053913371,0.187117725,2.371577964,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.004907626,0.07520387,1.098612289,0.257338449,7.056166028,2.22340364,32.64089172,10.10202036,1,4.603981428,0.002765885,0.010990005,0.055317691,0.049515728,0.393331736,5.010635294,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.004061484,0.01126292,0.405465108,0.067577518,5.411878453,1.819811711,32.64089172,8.770240745,1,7.291843048,0.00240055,0.018592303,0.086419813,0.046588039,0.389473593,5.010635294,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.006199107,0.028961793,0.405465108,0.108365108,6.83403007,3.237991444,32.64089172,14.42673415,0.993333333,6.121893974,0.020408026,0.199688633,0.285712359,0.048260952,0.427523163,5.010635294,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.374868953,1.820303566,32.64089172,9.961976383,1,7.626602611,0.003304378,0.01317404,0.046261286,0.058767002,0.394093167,2.708050201,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,0
  The DPU-ICUI shall forward real-time commands to DPU-CCM within 500 milliseconds of receipt from the ICU.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,5.493941111,1.831610662,32.64089172,9.883259731,1,6.015909877,0.006852851,0.029347082,0.10964562,0.055619932,0.36629052,2.931193752,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.005121002,0.028961793,0.405465108,0.108365108,7.86684855,2.166904279,53.04851082,15.47096537,1,9.134207188,0.007536841,0.030975145,0.105515777,0.051301439,0.236835663,5.010635294,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400-01, Company X Specification for the Company X Communication/Memory Module.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.614527868,2.10786928,32.64089172,10.51523194,0.993333333,6.786051258,0.004856864,0.05067867,0.092280411,0.048757712,0.368155733,2.931193752,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0.405465108,0.348237453,0.005121002,0.015017226,0.405465108,0.078031796,7.090387512,2.861667916,32.64089172,9.569988863,0.993333333,5.759328587,0.002865073,0.018408774,0.07735697,0.051326255,0.217932507,3.218875825,0.405465108,0.348237453,0.004530117,0.070806329,1.098612289,0.253358691,0.513876958,0,74.81253043,21.2396791,1,11.77877581,0.042802539,0.552021201,2.48254724,0.06169227,0.492633302,5.398162702,0
"  The DPU-DCI shall provide an application program with the ability to read the current hardware status, including the Data Level Trigger, the Data Timeout Trigger, the DCI Event Mode, and the Normal/Test Mode.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005121002,0.057849131,1.098612289,0.226657569,6.25302482,3.697206305,32.64089172,8.739221632,1,5.995463126,0.002206596,0.009301968,0.057371509,0.048050089,0.21899168,2.931193752,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0.405465108,0.348237453,0.004907626,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.003926101,0.038077909,1.098612289,0.183560148,2.096817026,0,74.81253043,17.9536513,1,8.821122389,0.025604448,0.462045667,2.022751431,0.067380547,0.206447355,4.299550413,0
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,0
  The DPU-EDAC shall report EDAC_HK on request.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0.405465108,0.348237453,0.006928414,0,0,0,6.130800388,0.269768129,24.16548551,9.498348988,0.973333333,11.46021695,0.001369212,0.008159725,0.009584486,0.064751291,0.092968126,0.206614249,0.405465108,0.348237453,0.004362335,0.031303975,1.098612289,0.156842628,1.193718764,0,74.81253043,17.89805377,1,12.68033007,0.028885535,0.552021201,1.76201764,0.06408246,0.308007237,4.01186834,0
 The DPU-SCUI  shall provide the capability for data producing applications to specify whether or not queued data may be segmented.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.005121002,0.042680538,0.405465108,0.127843865,7.2243747,3.189692039,32.64089172,9.298143631,0.993333333,5.411393482,0.002828887,0.01317404,0.053748859,0.050283789,0.218302424,2.525728644,0.405465108,0.348237453,0.004206537,0.051609257,1.098612289,0.199805656,1.978767432,0,74.81253043,21.70204521,1,14.71750575,0.034568151,0.816973141,1.279021599,0.068370923,0.099641927,3.606403232,0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.006543502,0.028961793,0.405465108,0.108365108,6.77055923,3.163247953,32.64089172,9.79556185,0.993333333,4.315687327,0.00520768,0.024639406,0.072907519,0.05315274,0.6511598,3.624340933,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0.405465108,0.348237453,0.004061484,0.01126292,0.405465108,0.067577518,5.411878453,1.819811711,32.64089172,8.770240745,1,7.291843048,0.00240055,0.018592303,0.086419813,0.046588039,0.389473593,5.010635294,0.405465108,0.348237453,0.005121002,0.05570657,1.098612289,0.222534692,4.659799324,0,45.52440007,17.00671601,0.990950226,8.462848029,0.027514153,0.157557635,0.742882141,0.080451093,0.253587056,3.095577609,0
  The DPU-DPA shall report errors to DPU-CCM.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.008413074,0,0,0,5.802856478,2.216454848,19.65342329,7.915236583,0.973333333,8.94333092,0.001559323,0.008159725,0.010915264,0.060581955,0.262612279,1.560647748,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.005889152,0.021340269,0.405465108,0.093020075,8.410006032,3.358590835,53.04851082,13.20250464,1,7.251311255,0.002525368,0.012870276,0.047981985,0.04842027,0.308833051,2.931193752,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,0
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.005121002,0.045578103,1.098612289,0.201773227,5.713058012,2.184799825,32.64089172,8.068650592,1,5.993270812,0.003071546,0.013304178,0.10136101,0.04888668,0.526913422,4.317488114,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
"  The DPU-SSI shall provide an operational mode (Tx MESSAGE MODE) for transmitting blocks in which consecutive words in a block are transmitted,  and the transmitter is disabled until a transmit IBG interrupt is received.  At this point the transmitter is re-enabled, and the next message can be transmitted.",Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0.405465108,0.348237453,0.004530117,0.07520387,1.098612289,0.254017814,7.117281038,2.430291002,53.04851082,11.50860019,1,8.138414147,0.001763192,0.009582931,0.070527686,0.047358792,0.259789026,3.624340933,0.405465108,0.348237453,0.005353774,0.020273255,0.405465108,0.089494838,4.33877328,0,74.81253043,24.45518186,1,6.080971337,0.048648717,0.816973141,1.945948668,0.068437254,0.166913119,3.383259681,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.282558802,3.571768197,32.64089172,12.63337297,0.993333333,7.161019029,0.004998543,0.027118587,0.049985429,0.054166077,0.12846095,1.347073648,0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.094193877,6.098156404,0,74.81253043,25.56791673,1,8.744137809,0.047297705,0.816973141,1.702717364,0.070089916,0.19506015,4.299550413,0
"  The DPU-EDAC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module, and document IBM-FAULT-MGMT, RSC System: Fault Handling and Storage Management.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.004206537,0.015594812,0.405465108,0.07951825,4.564197449,0.888112001,32.64089172,10.37189705,1,9.009498951,0.006837204,0.05067867,0.177767315,0.049813556,0.360773804,5.010635294,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,0
 The DPU-TIS  shall provide TIS_HK to the DPU-CCM on request.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.575868041,3.571768197,32.64089172,12.34910017,0.993333333,8.593786069,0.002286684,0.01317404,0.022866842,0.055381256,0.199784502,1.347073648,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,0
  The DPU-DCI shall provide an application program with a function to read the contents of the ping/pong buffer.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005353774,0.11232603,1.098612289,0.287365353,11.31649679,5.798206774,53.04851082,14.40995842,1,5.068091203,0.001679827,0.009301968,0.028557051,0.04764974,0.159674914,2.525728644,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.005353774,0.071622733,1.098612289,0.251358785,8.414429736,3.99446136,32.64089172,10.9424916,1,5.586559485,0.002550104,0.015194868,0.053552174,0.047901702,0.250796463,2.931193752,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,0
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0.405465108,0.348237453,0.006543502,0.027031007,0.405465108,0.104690641,7.460725835,3.102976979,32.64089172,11.08455784,0.993333333,5.633150238,0.003442717,0.018592303,0.051640759,0.047983997,0.418037414,2.371577964,0.405465108,0.348237453,0.004061484,0.08594728,1.098612289,0.270302614,1.658103063,0,74.81253043,23.85007878,1,9.151660441,0.039381187,0.302315065,1.378341546,0.07339589,0.292401892,4.299550413,0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.006199107,0.023850889,0.405465108,0.098339733,6.715798558,4.155447037,32.64089172,9.346543382,1,6.265737087,0.005545595,0.029347082,0.094275122,0.048168063,0.290086224,2.371577964,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,8.027913776,1.924657201,32.64089172,11.88063044,0.993333333,6.5006158,0.004090636,0.01317404,0.057268908,0.052589039,0.251452373,2.525728644,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.003271751,0.031303975,1.098612289,0.156842628,1.159439125,0,74.81253043,24.72925261,1,11.37073806,0.052632344,0.816973141,3.21057296,0.08047088,0.170626254,5.398162702,0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0.405465108,0.348237453,0.005353774,0.032437209,0.405465108,0.112268205,8.767623149,6.700522979,53.04851082,11.9101903,1,8.646475901,0.00139476,0.008159725,0.034868993,0.048296051,0.245729404,1.966112856,0.405465108,0.348237453,0.004061484,0,0,0,-1.452655887,0,40.28750799,14.01989159,0.977375566,13.80087164,0.036800617,0.160841236,0.846414199,0.090066534,1.092013461,5.398162702,0
  The DPU-EDAC shall report EDAC_HK on request.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0.405465108,0.348237453,0.006928414,0,0,0,6.130800388,0.269768129,24.16548551,9.498348988,0.973333333,11.46021695,0.001369212,0.008159725,0.009584486,0.064751291,0.092968126,0.206614249,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,-7.334746354,0,45.52440007,33.86360525,0.954751131,8.971136526,0.050205998,0.336623225,0.953913957,0.077752949,0.71393411,5.398162702,0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,0
"  The DPU-DCI shall provide an application program with the ability to read the current hardware status, including the Data Level Trigger, the Data Timeout Trigger, the DCI Event Mode, and the Normal/Test Mode.","Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0.405465108,0.348237453,0.005121002,0.057849131,1.098612289,0.226657569,6.25302482,3.697206305,32.64089172,8.739221632,1,5.995463126,0.002206596,0.009301968,0.057371509,0.048050089,0.21899168,2.931193752,0.405465108,0.348237453,0.00368072,0.034576492,1.098612289,0.175164056,1.352666914,0,74.81253043,17.68710094,1,8.705409194,0.030601887,0.264424359,2.662364169,0.077160858,0.234936858,4.705015521,0
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,8.844705196,2.194148411,32.64089172,12.58944688,0.993333333,9.051412029,0.00459679,0.013784839,0.041371112,0.052432677,0.074064247,0.733969175,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,6.65529339,1.223637341,53.04851082,15.81481634,1,7.071979157,0.009233122,0.04672809,0.129263708,0.052411531,0.117695336,1.752538756,0.405465108,0.348237453,0.005121002,0.088475141,1.098612289,0.27819479,2.690952872,0,45.52440007,17.38645997,0.959276018,11.7891405,0.02645415,0.161058499,0.449720547,0.059110306,0.492330206,3.452252552,0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005121002,0.013981555,0.405465108,0.07529298,6.385777725,3.59563601,32.64089172,8.053562991,1,5.92905664,0.002994979,0.019568125,0.086854399,0.05115001,0.284879706,3.624340933,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004907626,0.07520387,1.098612289,0.257338449,7.056166028,2.22340364,32.64089172,10.10202036,1,4.603981428,0.002765885,0.010990005,0.055317691,0.049515728,0.393331736,5.010635294,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.006543502,0.045051679,0.405465108,0.135155036,11.39770755,6.873768264,53.04851082,17.09662027,1,8.949188892,0.001743154,0.008159725,0.015688384,0.05717586,0.309484345,1.455287233,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
  The DPU-CCM shall forward the DPU_HBEAT message to DPU-ICUI for transmission to the ICU at an interval of A seconds.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005353774,0.144593871,1.098612289,0.359899242,9.293233613,5.453581349,32.64089172,10.23104013,1,5.528812714,0.002153666,0.01317404,0.038765983,0.051396488,0.257252702,2.931193752,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,0
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,9.732063276,2.627956055,53.04851082,14.64682866,1,7.763790878,0.004115995,0.018592303,0.08643589,0.044831578,0.387206038,5.010635294,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
    The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Address Limit Interrupt Condition (INTADR_EN).,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004711321,0.086797387,1.098612289,0.255418384,8.076657403,3.031733978,53.04851082,13.97313695,1,7.192224109,0.005595416,0.057602602,0.123099154,0.047146317,0.192956176,3.064725145,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,0
 The DPU-BOOT CSC shall set the processor speed  to MHz.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.00736144,0.040546511,0.405465108,0.128219325,8.261192616,4.676267184,32.64089172,11.30306457,0.993333333,6.892275937,0.003023308,0.012870276,0.030233077,0.050676933,0.314200062,4.317488114,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
"  The DPU-RTOS shall schedule tasks based on priority, and shall time-slice tasks with the same priority.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0.028961793,0.405465108,0.108365108,7.246832904,0.714322967,32.64089172,10.81071062,1,7.960267334,0.001398042,0.008159725,0.019572583,0.051825883,0.293417265,2.525728644,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,0
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0.405465108,0.348237453,0.006543502,0.125339783,1.098612289,0.327917698,8.696371138,3.98873101,32.64089172,11.12163784,0.993333333,6.164859444,0.002844336,0.012870276,0.034132034,0.053913371,0.187117725,2.371577964,0.405465108,0.348237453,0.00368072,0.071933904,1.098612289,0.252709776,1.194038736,0,74.81253043,17.62710207,1,11.126388,0.028504354,0.300261847,2.223339606,0.076047919,0.307216531,4.705015521,0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.004907626,0.054558357,1.098612289,0.205195127,8.84968164,4.118904553,53.04851082,12.48516171,1,6.663387234,0.002849881,0.021694532,0.099745836,0.046759057,0.266410903,4.317488114,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.004907626,0.025341569,0.405465108,0.101366277,7.213287689,3.054043595,32.64089172,10.30155837,1,7.257128458,0.002812177,0.012870276,0.044994839,0.04959794,0.308613353,2.708050201,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,0
  The DPU-SSI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005889152,0,0,0,2.45644206,0.639713501,14.22082103,5.747838196,0.82,5.814891907,0.007261147,0.018592303,0.050828032,0.05239389,1.130373476,3.624340933,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,0
"   The DPU-CCM shall include the capability to write data to DRAM, the VME Bus, and the Input/Output Channel Controller (IOCC) on ground command.","Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0.405465108,0.348237453,0.004711321,0.020273255,0.405465108,0.090664754,5.993910324,0.609871848,32.64089172,10.30089245,1,5.692057665,0.004003301,0.01317404,0.080066023,0.048639468,0.205119815,3.912023005,0.405465108,0.348237453,0.004206537,0.073335126,1.098612289,0.257557778,2.74345878,0,45.52440007,15.48691545,0.995475113,10.67373391,0.020330691,0.154594115,1.138518682,0.071863811,0.454960265,5.398162702,0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.004530117,0.023850889,0.405465108,0.098339733,6.855545012,0.846970217,32.64089172,11.43757906,0.993333333,6.940782538,0.003814653,0.01608024,0.064849094,0.051528313,0.149215499,4.317488114,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,0
 The DPU-BIT shall complete the BIT within A seconds.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.006928414,0.167119711,1.098612289,0.374164057,7.092032141,1.822313197,32.64089172,11.28563569,0.993333333,5.271911377,0.005600091,0.018592303,0.050400818,0.05067166,0.339751057,2.931193752,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.114474904,7.222385649,0.98921027,53.04851082,13.36321037,1,8.240290008,0.004138516,0.028176413,0.099324378,0.052257754,0.453137836,4.317488114,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,0
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0.405465108,0.348237453,0.006543502,0.045051679,0.405465108,0.135155036,11.39770755,6.873768264,53.04851082,17.09662027,1,8.949188892,0.001743154,0.008159725,0.015688384,0.05717586,0.309484345,1.455287233,0.405465108,0.348237453,0.004711321,0.065394669,1.098612289,0.237860115,1.548716545,0,45.52440007,16.31466473,1,8.020118866,0.030491421,0.209620593,1.402605344,0.078000366,0.22090605,4.705015521,0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.006543502,0.062379247,0.405465108,0.152265856,10.58320341,4.500604355,53.04851082,16.42866568,1,6.533407322,0.007485289,0.057602602,0.097308751,0.053138853,0.216736593,2.302585093,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,0
"  The DPU-TIS shall provide the capability for an application program to jam the value of the SC_TIME into the hardware, if automatic time synchronization is disabled.",Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0.405465108,0.348237453,0.004530117,0.113160421,1.098612289,0.322192659,7.611701773,5.546578403,32.64089172,9.678767001,1,4.298864569,0.004407521,0.02228669,0.101372988,0.051014916,0.206813036,3.912023005,0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,4.113995673,0,45.52440007,15.75914625,0.945701357,11.01348011,0.024249927,0.18202996,0.363748899,0.070459362,0.108181649,1.750105242,0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.110183719,6.750150319,3.054043595,53.04851082,12.19474426,1,6.205924516,0.003298839,0.016317564,0.085769803,0.046898759,0.385522377,3.218875825,0.405465108,0.348237453,0.005121002,0.065846293,1.098612289,0.224405291,3.553418553,0,74.81253043,23.09329772,1,9.909170576,0.037730805,0.264424359,1.094193346,0.071696469,0.231408348,2.453723722,0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.715744386,3.787279017,32.64089172,10.09799196,1,5.507022829,0.003081444,0.012582414,0.052384547,0.046477716,0.090200573,1.347073648,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,0
 The DPU-TIS  shall provide TIS_HK to the DPU-CCM on request.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.575868041,3.571768197,32.64089172,12.34910017,0.993333333,8.593786069,0.002286684,0.01317404,0.022866842,0.055381256,0.199784502,1.347073648,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,0
"  In image mode, the DPU-DPA shall calculate the memory location to increment for each valid detector event received.  The memory location shall be incremented for each valid event.  Each memory location shall be able to count so many events.  An Image mode exposure shall produce a PROD_IMAGE.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004907626,0.056163015,1.098612289,0.208057918,5.732715812,1.534956891,53.04851082,11.03037251,1,6.679061421,0.003899031,0.024639406,0.132567064,0.050424911,0.32616661,4.317488114,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.117047695,7.461456284,2.868936123,32.64089172,12.6784839,1,5.907999873,0.009105994,0.053974486,0.109271931,0.050209434,0.257623006,4.317488114,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,0
  The text segment and IVT of the DPU-RTOS shall be write-protected.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.12225233,8.531990552,2.502804513,32.64089172,10.61845318,1,7.978506348,0.001603741,0.008159725,0.017641153,0.050919804,0.309168201,3.624340933,0.405465108,0.348237453,0.004206537,0.066847884,1.098612289,0.240341284,2.400373963,0,45.52440007,16.49367796,1,7.933306677,0.023335031,0.130484201,1.050076394,0.081980488,0.208630436,4.705015521,0
 The DPU-EDAC shall install an ISR to be invoked when an SBE occurs and scrub the location containing the SBE.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.005889152,0.083559855,1.098612289,0.270693057,7.666782269,2.655780016,32.64089172,10.29412557,1,7.682229148,0.002324924,0.016317564,0.041848627,0.051229425,0.206530001,3.218875825,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.004907626,0.038615725,0.405465108,0.121960906,8.635257665,3.346275026,53.04851082,13.30780137,1,9.029702647,0.001241671,0.008159725,0.02607509,0.050181147,0.203173893,1.683545885,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,0
The DPU-BOOT CSC shall execute when power is applied to the DPU.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.006543502,0.125339783,1.098612289,0.327917698,8.696371138,3.98873101,32.64089172,11.12163784,0.993333333,6.164859444,0.002844336,0.012870276,0.034132034,0.053913371,0.187117725,2.371577964,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.110183719,6.750150319,3.054043595,53.04851082,12.19474426,1,6.205924516,0.003298839,0.016317564,0.085769803,0.046898759,0.385522377,3.218875825,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,1
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.110183719,6.750150319,3.054043595,53.04851082,12.19474426,1,6.205924516,0.003298839,0.016317564,0.085769803,0.046898759,0.385522377,3.218875825,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.110183719,6.750150319,3.054043595,53.04851082,12.19474426,1,6.205924516,0.003298839,0.016317564,0.085769803,0.046898759,0.385522377,3.218875825,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.005353774,0.054062014,0.405465108,0.142669295,10.50715949,3.00511021,53.04851082,16.34565644,1,9.543673128,0.00225461,0.012870276,0.033819156,0.051525465,0.266234482,2.708050201,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,1
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005353774,0.057923587,0.405465108,0.147239188,8.629897524,2.298170107,53.04851082,15.91995219,1,6.092535419,0.007042884,0.030975145,0.098600379,0.051944422,0.345140918,4.317488114,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.004907626,0.015017226,0.405465108,0.078031796,5.264956052,0.766822333,32.64089172,9.459174339,1,5.667973646,0.00563173,0.029542409,0.152056713,0.047226862,0.272083143,5.010635294,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.004711321,0.015594812,0.405465108,0.07951825,5.095162195,0.609871848,32.64089172,9.633773605,1,5.698930755,0.005843006,0.029542409,0.151918147,0.047325102,0.269291651,5.010635294,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.",Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,0.405465108,0.348237453,0.004711321,0.015594812,0.405465108,0.07951825,5.095162195,0.609871848,32.64089172,9.633773605,1,5.698930755,0.005843006,0.029542409,0.151918147,0.047325102,0.269291651,5.010635294,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.273947291,4.396944154,0,74.81253043,24.43521801,1,9.370825345,0.044259094,0.816973141,1.504809193,0.07236855,0.190560008,3.606403232,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004907626,0.020273255,0.405465108,0.090664754,6.495191382,2.852027233,32.64089172,9.928052419,0.993333333,5.366799425,0.005486584,0.030975145,0.109731674,0.047161427,0.222398796,3.218875825,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.114474904,8.802517932,3.182943119,53.04851082,13.20129125,1,5.617653585,0.004175308,0.029542409,0.100207387,0.045444783,0.270047786,3.401197382,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.114474904,8.802517932,3.182943119,53.04851082,13.20129125,1,5.617653585,0.004175308,0.029542409,0.100207387,0.045444783,0.270047786,3.401197382,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.114474904,8.802517932,3.182943119,53.04851082,13.20129125,1,5.617653585,0.004175308,0.029542409,0.100207387,0.045444783,0.270047786,3.401197382,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004907626,0.025341569,0.405465108,0.101366277,7.213287689,3.054043595,32.64089172,10.30155837,1,7.257128458,0.002812177,0.012870276,0.044994839,0.04959794,0.308613353,2.708050201,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,8.844657435,3.360776028,53.04851082,13.47997185,1,6.871204558,0.003137274,0.012870276,0.065882744,0.045927028,0.292924847,3.624340933,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,8.844657435,3.360776028,53.04851082,13.47997185,1,6.871204558,0.003137274,0.012870276,0.065882744,0.045927028,0.292924847,3.624340933,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,8.844657435,3.360776028,53.04851082,13.47997185,1,6.871204558,0.003137274,0.012870276,0.065882744,0.045927028,0.292924847,3.624340933,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.005353774,0.038615725,0.405465108,0.121960906,8.844657435,3.360776028,53.04851082,13.47997185,1,6.871204558,0.003137274,0.012870276,0.065882744,0.045927028,0.292924847,3.624340933,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,1
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.005608716,0.071622733,1.098612289,0.251358785,5.165550863,1.743494432,53.04851082,16.56793822,1,7.086162303,0.015351592,0.251150229,0.322383437,0.047464847,0.11600777,3.401197382,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.005608716,0.062379247,0.405465108,0.152265856,11.9682059,3.526952732,53.04851082,17.14745795,1,6.782171716,0.003618726,0.014814937,0.047043444,0.048596515,0.210443352,3.401197382,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005608716,0.062379247,0.405465108,0.152265856,11.9682059,3.526952732,53.04851082,17.14745795,1,6.782171716,0.003618726,0.014814937,0.047043444,0.048596515,0.210443352,3.401197382,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005608716,0.062379247,0.405465108,0.152265856,11.9682059,3.526952732,53.04851082,17.14745795,1,6.782171716,0.003618726,0.014814937,0.047043444,0.048596515,0.210443352,3.401197382,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005353774,0.120326192,1.098612289,0.31495648,7.694364062,2.482668441,53.04851082,12.73912259,1,6.467434426,0.003438797,0.012870276,0.085969932,0.04792977,0.328889456,4.317488114,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005121002,0,0,0,3.988035384,1.925492167,19.65342329,6.760409967,0.986666667,7.032497569,0.003208939,0.012870276,0.051343023,0.054685123,0.382989844,2.371577964,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005121002,0,0,0,3.988035384,1.925492167,19.65342329,6.760409967,0.986666667,7.032497569,0.003208939,0.012870276,0.051343023,0.054685123,0.382989844,2.371577964,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005121002,0,0,0,3.988035384,1.925492167,19.65342329,6.760409967,0.986666667,7.032497569,0.003208939,0.012870276,0.051343023,0.054685123,0.382989844,2.371577964,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0.405465108,0.348237453,0.005121002,0,0,0,3.988035384,1.925492167,19.65342329,6.760409967,0.986666667,7.032497569,0.003208939,0.012870276,0.051343023,0.054685123,0.382989844,2.371577964,0.405465108,0.348237453,0.004061484,0.062669892,1.098612289,0.233118593,2.532281682,0,74.81253043,20.05565595,1,7.295187205,0.036833974,0.154594115,1.768030762,0.082807836,0.331999803,5.398162702,1
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.006199107,0.036860464,0.405465108,0.12225233,8.739531387,3.360776028,32.64089172,11.48300864,0.993333333,7.679366775,0.002448825,0.012870276,0.026937072,0.052148811,0.14577892,2.445685937,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,8.844705196,2.194148411,32.64089172,12.58944688,0.993333333,9.051412029,0.00459679,0.013784839,0.041371112,0.052432677,0.074064247,0.733969175,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,8.844705196,2.194148411,32.64089172,12.58944688,0.993333333,9.051412029,0.00459679,0.013784839,0.041371112,0.052432677,0.074064247,0.733969175,0.405465108,0.348237453,0.004206537,0.016218604,0.405465108,0.081093022,0.8330067,0,45.52440007,19.69609836,1,8.909673129,0.038756023,0.234640863,0.968900587,0.066243059,0.376261655,5.398162702,1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0.405465108,0.348237453,0.007852202,0.045051679,0.405465108,0.135155036,8.844705196,2.194148411,32.64089172,12.58944688,0.993333333,9.051412029,0.00459679,0.013784839,0.041371112,0.052432677,0.074064247,0.733969175,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,-7.334746354,0,45.52440007,33.86360525,0.954751131,8.971136526,0.050205998,0.336623225,0.953913957,0.077752949,0.71393411,5.398162702,1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.005608716,0.036860464,0.405465108,0.12225233,6.80872998,0.476633345,32.64089172,11.24297859,0.993333333,9.52316213,0.003842806,0.014814937,0.042270865,0.05243904,0.154798876,3.218875825,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,1
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005121002,0.028961793,0.405465108,0.108365108,7.86684855,2.166904279,53.04851082,15.47096537,1,9.134207188,0.007536841,0.030975145,0.105515777,0.051301439,0.236835663,5.010635294,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.004530117,0.023850889,0.405465108,0.098339733,6.855545012,0.846970217,32.64089172,11.43757906,0.993333333,6.940782538,0.003814653,0.01608024,0.064849094,0.051528313,0.149215499,4.317488114,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,5.250627352,2.092093283,32.64089172,11.12520611,1,6.35269521,0.011306724,0.061221395,0.180907591,0.049327887,0.494176603,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005353774,0.118304077,1.098612289,0.328806722,6.158989894,5.151009132,32.64089172,11.50131293,1,4.02606525,0.011091002,0.061221395,0.24400204,0.046046723,0.503152192,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.005608716,0.068367154,1.098612289,0.245775878,6.519595978,5.151009132,32.64089172,10.0248882,1,5.022998033,0.008328088,0.030975145,0.183217937,0.047565692,0.446919831,5.010635294,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",0.405465108,0.348237453,0.005608716,0.068367154,1.098612289,0.245775878,6.519595978,5.151009132,32.64089172,10.0248882,1,5.022998033,0.008328088,0.030975145,0.183217937,0.047565692,0.446919831,5.010635294,0.405465108,0.348237453,0.004362335,0.019307862,0.405465108,0.087394058,4.180158687,0,74.81253043,19.13281176,1,10.888457,0.023874558,0.160876303,1.002731454,0.076326921,0.232446765,5.398162702,1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.004907626,0.031189624,0.405465108,0.110183719,6.447875662,0,74.81253043,20.70451475,1,11.64593929,0.021655169,0.161058499,0.563034385,0.067224639,0.215020029,2.220108871,1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.004530117,0.152102485,1.098612289,0.357609656,8.163700789,0,74.81253043,22.70092538,1,9.556857491,0.02071253,0.156272698,0.559238303,0.066075783,0.203788848,3.200938124,1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as an bit XOR.,0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.005608716,0.153099393,1.098612289,0.369106155,10.91826328,0,74.81253043,22.88398175,1,9.460839489,0.01486039,0.068589955,0.252626636,0.065877288,0.084885177,1.526961691,1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0.405465108,0.348237453,0.004530117,0.020793082,0.405465108,0.090603556,6.839342693,2.16773847,53.04851082,11.95057773,1,7.171622031,0.00377918,0.030975145,0.147388012,0.046991066,0.192965816,4.317488114,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,6.145960124,0,74.81253043,25.83664908,1,10.21760158,0.032932361,0.355888096,0.559850137,0.078086894,0.035446848,0.82603237,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.003464207,0.043764358,1.098612289,0.189246932,1.713826041,0,74.81253043,15.65756559,1,11.22002499,0.026601737,0.300261847,2.074935517,0.072293035,0.28521825,5.398162702,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.005121002,0.065846293,1.098612289,0.224405291,3.553418553,0,74.81253043,23.09329772,1,9.909170576,0.037730805,0.264424359,1.094193346,0.071696469,0.231408348,2.453723722,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0.405465108,0.348237453,0.006543502,0.040546511,0.405465108,0.128219325,6.383929896,2.023960359,32.64089172,10.62651099,0.993333333,7.375373623,0.003879319,0.012870276,0.038793192,0.05294077,0.251672965,2.014903021,0.405465108,0.348237453,0.004711321,0.065394669,1.098612289,0.237860115,1.548716545,0,45.52440007,16.31466473,1,8.020118866,0.030491421,0.209620593,1.402605344,0.078000366,0.22090605,4.705015521,1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004907626,0.021340269,0.405465108,0.093020075,5.960514377,2.216945994,32.64089172,10.41142779,0.993333333,8.564247742,0.004265253,0.029542409,0.081039811,0.051095236,0.195731798,2.445685937,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.004907626,0.021340269,0.405465108,0.093020075,5.960514377,2.216945994,32.64089172,10.41142779,0.993333333,8.564247742,0.004265253,0.029542409,0.081039811,0.051095236,0.195731798,2.445685937,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,1
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.004711321,0.021340269,0.405465108,0.093020075,6.393212468,2.209652263,32.64089172,10.78406774,0.993333333,6.01111885,0.007414897,0.05067867,0.14088304,0.048337324,0.408925365,3.218875825,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,6.317319938,1.978616844,32.64089172,11.34375715,1,6.347469338,0.006482506,0.039749741,0.103720101,0.049582146,0.403070561,4.317488114,0.405465108,0.348237453,0.004206537,0.016218604,0.405465108,0.081093022,0.8330067,0,45.52440007,19.69609836,1,8.909673129,0.038756023,0.234640863,0.968900587,0.066243059,0.376261655,5.398162702,1
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0.405465108,0.348237453,0.005353774,0.025341569,0.405465108,0.101366277,6.317319938,1.978616844,32.64089172,11.34375715,1,6.347469338,0.006482506,0.039749741,0.103720101,0.049582146,0.403070561,4.317488114,0.405465108,0.348237453,0.004061484,0.062669892,1.098612289,0.233118593,2.532281682,0,74.81253043,20.05565595,1,7.295187205,0.036833974,0.154594115,1.768030762,0.082807836,0.331999803,5.398162702,1
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005353774,0.017628918,0.405465108,0.084545319,8.220517246,2.006761541,53.04851082,12.89731031,1,10.03567432,0.002145517,0.012870276,0.049346884,0.047223191,0.277271506,3.912023005,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,1
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005889152,0.021340269,0.405465108,0.093020075,8.410006032,3.358590835,53.04851082,13.20250464,1,7.251311255,0.002525368,0.012870276,0.047981985,0.04842027,0.308833051,2.931193752,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0.405465108,0.348237453,0.005353774,0,0,0,4.817418608,3.360776028,31.66054102,11.8150953,0.98,5.873911146,0.014892981,0.128566129,0.163822789,0.052983457,0.808129016,5.010635294,0.405465108,0.348237453,0.004061484,0.00687229,0.405465108,0.052787061,-0.730378435,0,45.52440007,18.88457866,1,9.061806533,0.046771476,0.665137892,2.759517074,0.090952731,0.246326163,3.31872116,1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,0.405465108,0.348237453,0.005353774,0,0,0,4.817418608,3.360776028,31.66054102,11.8150953,0.98,5.873911146,0.014892981,0.128566129,0.163822789,0.052983457,0.808129016,5.010635294,0.405465108,0.348237453,0.004206537,0.019307862,0.405465108,0.087394058,2.75410564,0,74.81253043,20.37817953,1,9.75653354,0.034457855,0.213516211,1.447229898,0.082302213,0.201130782,3.200938124,1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003926101,0.024799253,1.098612289,0.139943487,4.258459065,0,74.81253043,16.07436956,1,12.46331899,0.017486392,0.264424359,1.346452177,0.070758779,0.191822632,4.01186834,1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003799453,0.039066945,1.098612289,0.185854443,1.915748823,0,74.81253043,19.09671033,1,11.94625256,0.033777538,0.816973141,2.60087045,0.070344972,0.279419553,4.705015521,1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.093020075,6.269882023,2.10786928,32.64089172,10.8461778,0.993333333,6.786051258,0.007221711,0.05067867,0.137212508,0.048757712,0.386383231,3.218875825,0.405465108,0.348237453,0.003799453,0.044158786,1.098612289,0.202385258,1.399783811,0,74.81253043,16.26551849,1,11.1492483,0.024787789,0.364510704,2.305264383,0.076972805,0.236221014,4.705015521,1
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005608716,0,0,0,6.370884753,1.399396803,21.30137226,9.904080058,0.993333333,7.748142217,0.005415495,0.023607438,0.064985943,0.054691259,0.521672134,5.010635294,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,7.429713548,0.688150253,32.64089172,12.3882888,1,4.786356229,0.012707115,0.157850971,0.216020955,0.052225486,0.243977046,4.317488114,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,7.429713548,0.688150253,32.64089172,12.3882888,1,4.786356229,0.012707115,0.157850971,0.216020955,0.052225486,0.243977046,4.317488114,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,7.429713548,0.688150253,32.64089172,12.3882888,1,4.786356229,0.012707115,0.157850971,0.216020955,0.052225486,0.243977046,4.317488114,0.405465108,0.348237453,0.005889152,0.023850889,0.405465108,0.098339733,9.44868878,0,74.81253043,24.77518006,1,10.91883464,0.020992104,0.1094833,0.356865774,0.064714963,0.152183356,3.000267429,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.27819479,7.429713548,0.688150253,32.64089172,12.3882888,1,4.786356229,0.012707115,0.157850971,0.216020955,0.052225486,0.243977046,4.317488114,0.405465108,0.348237453,0.005608716,0.073720929,0.405465108,0.164018712,8.512207281,0,74.81253043,30.39869421,1,10.47574483,0.035507546,0.161058499,0.390583008,0.066691547,0.09771673,0.36772478,1
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.006543502,0,0,0,3.954407104,0.134884065,18.83336281,7.89493109,0.953333333,10.78526104,0.003161837,0.01317404,0.025294694,0.062085146,0.160438666,0.206614249,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0.405465108,0.348237453,0.006543502,0,0,0,3.954407104,0.134884065,18.83336281,7.89493109,0.953333333,10.78526104,0.003161837,0.01317404,0.025294694,0.062085146,0.160438666,0.206614249,0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,2.778690914,0,45.52440007,21.42252731,0.986425339,8.466996561,0.037473564,0.300103203,0.637050594,0.116530816,0.489146731,4.705015521,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,8.09627372,4.488803422,32.64089172,9.935352862,1,3.111802601,0.003441684,0.01317404,0.051625253,0.050964901,0.173705667,2.445685937,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,8.09627372,4.488803422,32.64089172,9.935352862,1,3.111802601,0.003441684,0.01317404,0.051625253,0.050964901,0.173705667,2.445685937,0.405465108,0.348237453,0.00368072,0.042247321,1.098612289,0.183694688,0.037429394,0,74.81253043,17.15090311,1,11.15557294,0.03451994,0.665137892,4.349512383,0.073846282,0.265462512,5.398162702,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,8.09627372,4.488803422,32.64089172,9.935352862,1,3.111802601,0.003441684,0.01317404,0.051625253,0.050964901,0.173705667,2.445685937,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send a Purge Science Queue command from the ICU to the DPA software. The Purge Science Queue command shall be used to command the DPU to delete all data currently in the science telemetry output queue (i.e., data pending transmission to the spacecraft).",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,8.09627372,4.488803422,32.64089172,9.935352862,1,3.111802601,0.003441684,0.01317404,0.051625253,0.050964901,0.173705667,2.445685937,0.405465108,0.348237453,0.004530117,0.021340269,0.405465108,0.091754437,6.708498152,0,74.81253043,25.44426766,1,8.252848648,0.043298019,0.816973141,1.645324718,0.073235833,0.184330536,4.299550413,1
 The DPU-CCM shall provide a command to reboot the DPU.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.006543502,0.081093022,0.405465108,0.1709591,13.56199688,8.006262419,53.04851082,17.53043377,1,4.346234539,0.004347752,0.01317404,0.043477523,0.050813023,0.241068826,2.708050201,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,1
 The DPU-CCM shall provide a command to reboot the DPU.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,0.405465108,0.348237453,0.006543502,0.081093022,0.405465108,0.1709591,13.56199688,8.006262419,53.04851082,17.53043377,1,4.346234539,0.004347752,0.01317404,0.043477523,0.050813023,0.241068826,2.708050201,0.405465108,0.348237453,0.005889152,0.023850889,0.405465108,0.098339733,9.44868878,0,74.81253043,24.77518006,1,10.91883464,0.020992104,0.1094833,0.356865774,0.064714963,0.152183356,3.000267429,1
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0.405465108,0.348237453,0.004711321,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.004206537,0.048079154,1.098612289,0.197953091,2.108803339,0,74.81253043,19.65140059,1,10.4908524,0.03099337,0.293717082,2.200529236,0.069509053,0.179370723,4.705015521,1
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.004711321,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,1
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005121002,0.027031007,0.405465108,0.104690641,5.848808037,1.957822096,32.64089172,11.6152304,0.993333333,5.095185069,0.00627883,0.040228329,0.09418245,0.048947934,0.418841168,4.317488114,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004907626,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.004907626,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0.405465108,0.348237453,0.004907626,0.040546511,0.405465108,0.124799527,4.992603787,1.51489156,32.64089172,8.797513651,1,6.280433405,0.0040706,0.028176413,0.081412002,0.054966749,0.386273747,2.931193752,0.405465108,0.348237453,0.004530117,0.036721971,1.098612289,0.169522438,2.033152392,0,74.81253043,21.45328742,1,10.01066066,0.042632985,0.816973141,2.216915198,0.067244918,0.394243411,4.299550413,1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.004206537,0.040160234,1.098612289,0.181593869,1.410004426,0,74.81253043,19.24705588,1,11.48551722,0.032432709,0.408486571,2.75678028,0.067877913,0.281409926,5.398162702,1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.004061484,0.031835404,1.098612289,0.172728793,-0.328487159,0,74.81253043,16.84743905,1,9.405384,0.032200267,0.665137892,4.153834438,0.071110411,0.282824821,5.398162702,1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.004061484,0.069665712,1.098612289,0.235818235,2.749570331,0,74.81253043,20.40787745,1,9.044334866,0.030006878,0.462045667,1.470337017,0.068742269,0.315377236,3.606403232,1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0.405465108,0.348237453,0.004711321,0.045051679,0.405465108,0.131119645,6.395183648,2.588750992,53.04851082,12.42065802,1,8.993752001,0.002481539,0.01317404,0.044667698,0.051020278,0.593404202,5.010635294,0.405465108,0.348237453,0.00368072,0.034576492,1.098612289,0.175164056,1.352666914,0,74.81253043,17.68710094,1,8.705409194,0.030601887,0.264424359,2.662364169,0.077160858,0.234936858,4.705015521,1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.374868953,1.820303566,32.64089172,9.961976383,1,7.626602611,0.003304378,0.01317404,0.046261286,0.058767002,0.394093167,2.708050201,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.374868953,1.820303566,32.64089172,9.961976383,1,7.626602611,0.003304378,0.01317404,0.046261286,0.058767002,0.394093167,2.708050201,0.405465108,0.348237453,0.00368072,0.024039577,1.098612289,0.141547722,-1.500846353,0,74.81253043,17.67588739,1,9.750093607,0.042902682,0.665137892,6.092180906,0.074250062,0.225235712,4.705015521,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.00368072,0.024039577,1.098612289,0.141547722,-1.500846353,0,74.81253043,17.67588739,1,9.750093607,0.042902682,0.665137892,6.092180906,0.074250062,0.225235712,4.705015521,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe TMALI CSC is initialized by spawning the tmaliTask() with the startup default parameters.  This task will allocate memory for the TMALI_EVENT_QUEUE, install DCI ISRs, initialize static variables and data structures, and then enter an end-less loop in which it transfers the data from the DCI to the TMALI queue, throttled by the semaphore semDciWait.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004061484,0.084120499,1.098612289,0.284232687,4.324042728,0,45.52440007,16.40194825,0.995475113,8.901883546,0.024890495,0.300261847,1.09518179,0.068505622,0.254948436,4.299550413,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.003099554,0.032001647,1.098612289,0.168689953,1.471731956,0,74.81253043,18.78753658,1,9.394610363,0.026933916,0.665137892,2.5317881,0.066979107,0.324303884,4.705015521,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004711321,0.095506211,1.098612289,0.291033832,1.737832349,0,74.81253043,19.70126132,1,10.77418235,0.029900823,0.198913373,1.285735376,0.075975487,0.219849843,4.01186834,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004362335,0.060163096,1.098612289,0.228648287,2.44858956,0,74.81253043,19.91554847,1,8.985140401,0.034139583,0.552021201,1.706979144,0.072452916,0.183901539,5.398162702,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004711321,0.038970255,1.098612289,0.174483614,0.16140656,0,74.81253043,23.80572066,1,10.12211294,0.044818454,0.302315065,2.196104254,0.070854231,0.092248032,5.398162702,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.005121002,0.136983668,1.098612289,0.351328739,4.059221946,0,45.52440007,17.49654272,0.972850679,12.06828227,0.026312074,0.175735835,0.499929414,0.081546075,0.120012639,2.402430428,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,0.405465108,0.348237453,0.005353774,0,0,0,4.76999156,0.134884065,21.30137226,8.11231859,0.986666667,11.54085318,0.003818662,0.023607438,0.053461275,0.055457056,0.32354764,2.525728644,0.405465108,0.348237453,0.004907626,0.083559855,1.098612289,0.270693057,3.944685499,0,45.52440007,18.24947756,0.972850679,11.72873864,0.028256919,0.175735835,0.508624551,0.083238129,0.152114876,1.178654996,1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,9.716477976,2.628091274,32.64089172,11.48016812,1,6.768724997,0.002850909,0.01317404,0.03136,0.053775175,0.128754875,2.931193752,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,9.716477976,2.628091274,32.64089172,11.48016812,1,6.768724997,0.002850909,0.01317404,0.03136,0.053775175,0.128754875,2.931193752,0.405465108,0.348237453,0.003569183,0.057038432,1.098612289,0.228756813,1.469869848,0,74.81253043,20.12739005,1,10.29216393,0.037726655,0.364510704,2.71631916,0.080137135,0.245864323,4.299550413,1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,9.716477976,2.628091274,32.64089172,11.48016812,1,6.768724997,0.002850909,0.01317404,0.03136,0.053775175,0.128754875,2.931193752,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,1
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0.405465108,0.348237453,0.004711321,0.118304077,1.098612289,0.328806722,5.531425343,2.160545848,32.64089172,8.791754628,1,6.106455859,0.002521985,0.01317404,0.05548366,0.050821194,0.356237307,5.010635294,0.405465108,0.348237453,0.005353774,0.035257835,0.405465108,0.116816146,9.19019444,0,74.81253043,24.34122967,1,11.45890997,0.022681353,0.209620593,0.521671122,0.066783127,0.104956507,2.402430428,1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,6.65529339,1.223637341,53.04851082,15.81481634,1,7.071979157,0.009233122,0.04672809,0.129263708,0.052411531,0.117695336,1.752538756,0.405465108,0.348237453,0.003926101,0.04065074,1.098612289,0.190773939,4.517708467,0,45.52440007,17.72148871,1,11.29593337,0.024369885,0.343912995,0.901685751,0.067381148,0.438205231,3.31872116,1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,6.65529339,1.223637341,53.04851082,15.81481634,1,7.071979157,0.009233122,0.04672809,0.129263708,0.052411531,0.117695336,1.752538756,0.405465108,0.348237453,0.004530117,0.08594728,1.098612289,0.270302614,3.837725269,0,74.81253043,24.33478264,1,8.92472576,0.049702627,0.300261847,1.739591961,0.069510387,0.16792934,4.01186834,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.003799453,0.102813944,1.098612289,0.311892994,5.495970707,0,45.52440007,18.94072108,1,7.386787579,0.031904905,0.234640863,1.148576585,0.081993426,0.643849341,4.705015521,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.006199107,0,0,0,1.996519546,0,40.28750799,26.75821342,0.986425339,15.22301459,0.060529109,0.552021201,0.605291086,0.086569424,0.276270951,0.773189888,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.003926101,0.025880752,0.405465108,0.100187285,1.922052947,0,74.81253043,18.16865135,1,8.301116124,0.023703306,0.160876303,1.114055388,0.067870705,0.756948956,5.398162702,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0.405465108,0.348237453,0.004907626,0.018430232,0.405465108,0.086445452,5.622377657,0.509215421,32.64089172,10.4598541,1,9.074788411,0.00456919,0.066950782,0.100522176,0.047627436,0.210032176,2.813410717,0.405465108,0.348237453,0.005608716,0.061598145,1.098612289,0.217418842,7.759008988,0,74.81253043,19.03296184,1,9.410314941,0.018050622,0.108546523,0.559569294,0.071164212,0.138990138,3.606403232,1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.006199107,0.023850889,0.405465108,0.098339733,6.715798558,4.155447037,32.64089172,9.346543382,1,6.265737087,0.005545595,0.029347082,0.094275122,0.048168063,0.290086224,2.371577964,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.006199107,0.023850889,0.405465108,0.098339733,6.715798558,4.155447037,32.64089172,9.346543382,1,6.265737087,0.005545595,0.029347082,0.094275122,0.048168063,0.290086224,2.371577964,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0.405465108,0.348237453,0.006199107,0.023850889,0.405465108,0.098339733,6.715798558,4.155447037,32.64089172,9.346543382,1,6.265737087,0.005545595,0.029347082,0.094275122,0.048168063,0.290086224,2.371577964,0.405465108,0.348237453,0.004061484,0.08594728,1.098612289,0.270302614,1.658103063,0,74.81253043,23.85007878,1,9.151660441,0.039381187,0.302315065,1.378341546,0.07339589,0.292401892,4.299550413,1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.005121002,0.120787267,1.098612289,0.323503811,8.039847543,2.012083786,53.04851082,13.47708719,1,7.459409309,0.007436445,0.157850971,0.252839146,0.048181201,0.260856313,2.813410717,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005121002,0.120787267,1.098612289,0.323503811,8.039847543,2.012083786,53.04851082,13.47708719,1,7.459409309,0.007436445,0.157850971,0.252839146,0.048181201,0.260856313,2.813410717,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005889152,0.076024708,0.405465108,0.16344821,9.992232892,4.183977127,53.04851082,17.38182045,1,4.96603695,0.014379039,0.199688633,0.230064628,0.049517956,0.282230478,3.064725145,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.005889152,0.076024708,0.405465108,0.16344821,9.992232892,4.183977127,53.04851082,17.38182045,1,4.96603695,0.014379039,0.199688633,0.230064628,0.049517956,0.282230478,3.064725145,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005889152,0.076024708,0.405465108,0.16344821,9.992232892,4.183977127,53.04851082,17.38182045,1,4.96603695,0.014379039,0.199688633,0.230064628,0.049517956,0.282230478,3.064725145,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.005889152,0.076024708,0.405465108,0.16344821,9.992232892,4.183977127,53.04851082,17.38182045,1,4.96603695,0.014379039,0.199688633,0.230064628,0.049517956,0.282230478,3.064725145,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,1
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.004907626,0.019307862,0.405465108,0.08847974,8.310545856,2.628091274,53.04851082,13.6318606,1,11.90927556,0.001558996,0.01317404,0.032738907,0.050121824,0.145751628,2.525728644,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0.405465108,0.348237453,0.004206537,0.023169435,0.405465108,0.095488699,5.981368328,2.253581843,53.04851082,11.33188402,1,3.923857446,0.004068757,0.023136724,0.142406489,0.049054757,0.45470325,5.010635294,0.405465108,0.348237453,0.004711321,0.056757638,1.098612289,0.222398035,2.415099273,0,74.81253043,22.31176383,1,11.97321314,0.044699409,0.816973141,2.369068694,0.072226416,0.302362662,5.398162702,1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.004206537,0.023169435,0.405465108,0.095488699,5.981368328,2.253581843,53.04851082,11.33188402,1,3.923857446,0.004068757,0.023136724,0.142406489,0.049054757,0.45470325,5.010635294,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.004206537,0.023169435,0.405465108,0.095488699,5.981368328,2.253581843,53.04851082,11.33188402,1,3.923857446,0.004068757,0.023136724,0.142406489,0.049054757,0.45470325,5.010635294,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.004362335,0.068088459,1.098612289,0.216202032,7.113853887,3.146168001,53.04851082,11.25306727,1,5.613551642,0.002669954,0.018806314,0.09077843,0.050733144,0.24792141,3.912023005,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0.405465108,0.348237453,0.004362335,0.068088459,1.098612289,0.216202032,7.113853887,3.146168001,53.04851082,11.25306727,1,5.613551642,0.002669954,0.018806314,0.09077843,0.050733144,0.24792141,3.912023005,0.405465108,0.348237453,0.00368072,0.054184443,1.098612289,0.209536304,1.643393242,0,74.81253043,16.5070743,1,10.76669365,0.025610539,0.264424359,1.613463937,0.091062096,0.387236121,5.398162702,1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.004061484,0.083023587,1.098612289,0.250201355,8.998453558,1.932498761,53.04851082,14.16996586,1,7.219441987,0.002376315,0.01317404,0.054655255,0.044063238,0.109063473,2.525728644,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0.405465108,0.348237453,0.004061484,0.083023587,1.098612289,0.250201355,8.998453558,1.932498761,53.04851082,14.16996586,1,7.219441987,0.002376315,0.01317404,0.054655255,0.044063238,0.109063473,2.525728644,0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,6.340418486,0,45.52440007,19.45212547,1,9.462791225,0.026341617,0.209620593,0.632198817,0.080118806,0.294212535,2.102325836,1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0.405465108,0.348237453,0.004061484,0.083023587,1.098612289,0.250201355,8.998453558,1.932498761,53.04851082,14.16996586,1,7.219441987,0.002376315,0.01317404,0.054655255,0.044063238,0.109063473,2.525728644,0.405465108,0.348237453,0.00368072,0.054184443,1.098612289,0.209536304,1.643393242,0,74.81253043,16.5070743,1,10.76669365,0.025610539,0.264424359,1.613463937,0.091062096,0.387236121,5.398162702,1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0.405465108,0.348237453,0.005121002,0.022525839,0.405465108,0.095569042,7.128826961,2.867644829,32.64089172,10.75182494,1,5.199364255,0.004533315,0.029347082,0.081599673,0.050294624,0.290774639,2.371577964,0.405465108,0.348237453,0.00368072,0.042247321,1.098612289,0.183694688,0.037429394,0,74.81253043,17.15090311,1,11.15557294,0.03451994,0.665137892,4.349512383,0.073846282,0.265462512,5.398162702,1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.005121002,0.022525839,0.405465108,0.095569042,7.128826961,2.867644829,32.64089172,10.75182494,1,5.199364255,0.004533315,0.029347082,0.081599673,0.050294624,0.290774639,2.371577964,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0.405465108,0.348237453,0.005121002,0.022525839,0.405465108,0.095569042,7.128826961,2.867644829,32.64089172,10.75182494,1,5.199364255,0.004533315,0.029347082,0.081599673,0.050294624,0.290774639,2.371577964,0.405465108,0.348237453,0.003799453,0.041779928,1.098612289,0.191539069,0.714722956,0,74.81253043,13.31215437,1,10.79713528,0.02090806,0.325418062,2.258070509,0.075440256,0.139214416,3.200938124,1
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.008413074,0.045051679,0.405465108,0.135155036,8.288097192,0.992209117,32.64089172,11.75798238,0.993333333,5.925454902,0.004191466,0.01317404,0.037723193,0.054482773,0.193590299,0.916290732,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,1
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.00736144,0.040546511,0.405465108,0.128219325,8.042073095,4.102154097,32.64089172,11.13267206,0.993333333,7.038501527,0.003597895,0.01317404,0.035978951,0.052227469,0.188434886,1.544899391,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,1
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005608716,0,0,0,3.04554958,0.607329982,18.83336281,6.403107214,0.973333333,8.463929251,0.006066259,0.057602602,0.115258923,0.052246675,0.698129785,3.218875825,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005353774,0.032437209,0.405465108,0.112268205,8.767623149,6.700522979,53.04851082,11.9101903,1,8.646475901,0.00139476,0.008159725,0.034868993,0.048296051,0.245729404,1.966112856,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis function returns the next EVENT in the queue to the caller.  The caller should store the value returned by this function in a variable defined locally within the scope of the function from which it is called.  If the return value is stored as described above, the EVENT value is stored in a RAD6000 register rather than memory.  Processing is therefore much faster since register accesses on the RAD6000 are much faster than memory accesses.A compilation option TMALI_NOCHECKS is provided for the disabling of buffer empty checks. This results in slightly faster code but should only be used when the application using this function is known to make proper calls to the function.  If the TMALI module is compiled with the TMALI_NOCHECKS option an improper call to the tmaliNextEvent function (calling it when no data is available in the TMALI buffer) will compromise the TMALI buffer data structure.The queue structure and the related pointers are described in the local tmaliP.h header file. As only the write pointer (pOut) is manipulated here and the operations on the 32 bit pointers themselves are 'atomic' no mutual exclusion problem can occur.  ",0.405465108,0.348237453,0.005353774,0.032437209,0.405465108,0.112268205,8.767623149,6.700522979,53.04851082,11.9101903,1,8.646475901,0.00139476,0.008159725,0.034868993,0.048296051,0.245729404,1.966112856,0.405465108,0.348237453,0.003569183,0.047955936,1.098612289,0.20868902,1.155462123,0,74.81253043,15.91852914,1,9.775771998,0.028464756,0.816973141,3.330376401,0.081394513,0.252648725,5.398162702,1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.005353774,0.032437209,0.405465108,0.112268205,8.767623149,6.700522979,53.04851082,11.9101903,1,8.646475901,0.00139476,0.008159725,0.034868993,0.048296051,0.245729404,1.966112856,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0.405465108,0.348237453,0.005608716,0.047701777,0.405465108,0.134657226,10.82536744,6.358434249,53.04851082,14.62161869,1,5.007136007,0.002801477,0.012591319,0.04762511,0.047319576,0.146553397,1.544899391,0.405465108,0.348237453,0.005353774,0.082678843,1.098612289,0.236388935,6.231469891,0,74.81253043,19.20754757,1,10.3328822,0.015661242,0.126377918,0.438514768,0.078964348,0.104430786,2.453723722,1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005608716,0.047701777,0.405465108,0.134657226,10.82536744,6.358434249,53.04851082,14.62161869,1,5.007136007,0.002801477,0.012591319,0.04762511,0.047319576,0.146553397,1.544899391,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.005608716,0.047701777,0.405465108,0.134657226,10.82536744,6.358434249,53.04851082,14.62161869,1,5.007136007,0.002801477,0.012591319,0.04762511,0.047319576,0.146553397,1.544899391,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.282558802,3.571768197,32.64089172,12.63337297,0.993333333,7.161019029,0.004998543,0.027118587,0.049985429,0.054166077,0.12846095,1.347073648,0.405465108,0.348237453,0.005353774,0.095477125,1.098612289,0.266895923,5.887317722,0,74.81253043,25.52048974,1,11.2662118,0.040810929,0.325418062,0.816218572,0.064592229,0.183144422,2.6901125,1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsWhen no data is available in the TMALI queue this routine blocks on a semaphore awaiting availability of events on the TMALI queue as indicated by the ISR.  When data is already available on the TMALI queue, or the semaphore is taken, the number of events on the TMALI queue is determined and returned to the caller.  The parameter TickstoWait specifies the maximum time which the function can wait until data becomes available in kernel-ticks.  The parameter may be set to a symbolic value FOREVER which causes the function only to return when data is available.  When the function is called with a timeout value and no data becomes avialable within that period the function will return zero (events available).If the tmali task has not been initialized the function returns an error.",0.405465108,0.348237453,0.005889152,0.040546511,0.405465108,0.128219325,9.282558802,3.571768197,32.64089172,12.63337297,0.993333333,7.161019029,0.004998543,0.027118587,0.049985429,0.054166077,0.12846095,1.347073648,0.405465108,0.348237453,0.004061484,0.048342848,1.098612289,0.192383174,3.841192547,0,74.81253043,15.63070223,1,8.080543086,0.01982005,0.1094833,1.565783961,0.071509759,0.324173108,4.705015521,1
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.004711321,0.01689438,0.405465108,0.082765219,6.291846457,2.976937232,53.04851082,10.8971298,1,7.530498589,0.001973815,0.008159725,0.047371561,0.051251027,0.485884698,2.525728644,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.005121002,0.014480897,0.405465108,0.076625703,6.270721901,1.934369686,32.64089172,8.354500591,1,8.661015997,0.002429604,0.014137033,0.068028921,0.049490555,0.306602027,3.624340933,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",0.405465108,0.348237453,0.005121002,0.014480897,0.405465108,0.076625703,6.270721901,1.934369686,32.64089172,8.354500591,1,8.661015997,0.002429604,0.014137033,0.068028921,0.049490555,0.306602027,3.624340933,0.405465108,0.348237453,0.003799453,0.028932462,1.098612289,0.150920514,0.145062063,0,74.81253043,19.24399367,1,7.205616844,0.038830632,0.343912995,2.562821703,0.075531746,0.315383839,4.705015521,1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0.405465108,0.348237453,0.005121002,0.014480897,0.405465108,0.076625703,6.270721901,1.934369686,32.64089172,8.354500591,1,8.661015997,0.002429604,0.014137033,0.068028921,0.049490555,0.306602027,3.624340933,0.405465108,0.348237453,0.003926101,0.037676762,1.098612289,0.187451749,-0.106511566,0,74.81253043,19.39655732,1,7.619439005,0.041739586,0.816973141,4.54961486,0.074520247,0.275493682,5.398162702,1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0.405465108,0.348237453,0.005121002,0.013981555,0.405465108,0.07529298,6.385777725,3.59563601,32.64089172,8.053562991,1,5.92905664,0.002994979,0.019568125,0.086854399,0.05115001,0.284879706,3.624340933,0.405465108,0.348237453,0.004362335,0.066455369,1.098612289,0.232663179,1.908291607,0,74.81253043,18.52190193,1,8.319902952,0.030596572,0.302315065,2.264146306,0.075183376,0.384762459,4.01186834,1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0.405465108,0.348237453,0.005121002,0.013981555,0.405465108,0.07529298,6.385777725,3.59563601,32.64089172,8.053562991,1,5.92905664,0.002994979,0.019568125,0.086854399,0.05115001,0.284879706,3.624340933,0.405465108,0.348237453,0.005353774,0.082678843,1.098612289,0.236388935,6.231469891,0,74.81253043,19.20754757,1,10.3328822,0.015661242,0.126377918,0.438514768,0.078964348,0.104430786,2.453723722,1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0.405465108,0.348237453,0.005121002,0.013981555,0.405465108,0.07529298,6.385777725,3.59563601,32.64089172,8.053562991,1,5.92905664,0.002994979,0.019568125,0.086854399,0.05115001,0.284879706,3.624340933,0.405465108,0.348237453,0.004206537,0.073443942,1.098612289,0.236263289,8.448147182,0,74.81253043,22.09617182,1,8.719363995,0.018906371,0.300261847,0.491565654,0.08109484,0.316346049,2.913256052,1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0.405465108,0.348237453,0.005121002,0.013981555,0.405465108,0.07529298,6.385777725,3.59563601,32.64089172,8.053562991,1,5.92905664,0.002994979,0.019568125,0.086854399,0.05115001,0.284879706,3.624340933,0.405465108,0.348237453,0.004711321,0.060163096,1.098612289,0.228648287,4.560971539,0,74.81253043,18.51250224,1,6.157980427,0.026375862,0.343912995,1.318793091,0.070991223,0.396304203,3.606403232,1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.004530117,0.047765752,1.098612289,0.229076498,6.554226533,2.18695276,25.72089663,8.350697489,0.993333333,7.930134206,0.00136754,0.008159725,0.031453409,0.049005166,0.286220601,2.371577964,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0.405465108,0.348237453,0.004530117,0.047765752,1.098612289,0.229076498,6.554226533,2.18695276,25.72089663,8.350697489,0.993333333,7.930134206,0.00136754,0.008159725,0.031453409,0.049005166,0.286220601,2.371577964,0.405465108,0.348237453,0.003926101,0.032365127,1.098612289,0.159414353,1.752771001,0,45.52440007,18.96132702,1,9.188516359,0.037950231,0.816973141,2.239063623,0.071763273,0.289804293,3.606403232,1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0.405465108,0.348237453,0.004530117,0.047765752,1.098612289,0.229076498,6.554226533,2.18695276,25.72089663,8.350697489,0.993333333,7.930134206,0.00136754,0.008159725,0.031453409,0.049005166,0.286220601,2.371577964,0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,6.340418486,0,45.52440007,19.45212547,1,9.462791225,0.026341617,0.209620593,0.632198817,0.080118806,0.294212535,2.102325836,1
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.006543502,0.062379247,0.405465108,0.152265856,10.58320341,4.500604355,53.04851082,16.42866568,1,6.533407322,0.007485289,0.057602602,0.097308751,0.053138853,0.216736593,2.302585093,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.006543502,0.062379247,0.405465108,0.152265856,10.58320341,4.500604355,53.04851082,16.42866568,1,6.533407322,0.007485289,0.057602602,0.097308751,0.053138853,0.216736593,2.302585093,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.005353774,0,0,0,2.817850159,0,25.54252176,7.282995441,0.665158371,14.03831375,0.008182327,0.032434984,0.163646533,0.080284907,0.484662201,1.783872104,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,8.917273254,5.901281675,32.64089172,11.33128008,0.993333333,6.183936171,0.002099577,0.008159725,0.027294498,0.052888319,0.149347534,1.257217319,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.095569042,4.477983872,0.134884065,32.64089172,8.672386285,0.993333333,7.060931189,0.003843849,0.01317404,0.069189275,0.052712659,0.234039824,4.317488114,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.095569042,4.477983872,0.134884065,32.64089172,8.672386285,0.993333333,7.060931189,0.003843849,0.01317404,0.069189275,0.052712659,0.234039824,4.317488114,0.405465108,0.348237453,0.00368072,0.034576492,1.098612289,0.175164056,1.352666914,0,74.81253043,17.68710094,1,8.705409194,0.030601887,0.264424359,2.662364169,0.077160858,0.234936858,4.705015521,1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.095569042,4.477983872,0.134884065,32.64089172,8.672386285,0.993333333,7.060931189,0.003843849,0.01317404,0.069189275,0.052712659,0.234039824,4.317488114,0.405465108,0.348237453,0.004530117,0.043398693,1.098612289,0.183814949,3.882474446,0,74.81253043,19.77029556,1,11.33733728,0.02621879,0.234640863,1.153626767,0.061911,0.186801304,3.095577609,1
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0.405465108,0.348237453,0.003926101,0.011925444,0.405465108,0.069536692,6.027581938,2.186959288,32.64089172,9.014565119,1,7.027410579,0.004069015,0.054394034,0.138346523,0.046363519,0.309907932,4.317488114,0.405465108,0.348237453,0.003464207,0.023871468,1.098612289,0.141062759,-2.47230964,0,74.81253043,17.33700262,1,10.52982836,0.038499661,0.429052038,5.505451511,0.081290946,0.195509032,4.705015521,1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.004362335,0.019307862,0.405465108,0.08847974,6.506634722,3.228963707,32.64089172,9.646619757,0.993333333,5.847235736,0.003050344,0.01317404,0.064057216,0.049618274,0.308989617,4.317488114,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",0.405465108,0.348237453,0.004362335,0.019307862,0.405465108,0.08847974,6.506634722,3.228963707,32.64089172,9.646619757,0.993333333,5.847235736,0.003050344,0.01317404,0.064057216,0.049618274,0.308989617,4.317488114,0.405465108,0.348237453,0.004711321,0.095506211,1.098612289,0.291033832,1.737832349,0,74.81253043,19.70126132,1,10.77418235,0.029900823,0.198913373,1.285735376,0.075975487,0.219849843,4.01186834,1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.003926101,0.042091048,1.098612289,0.172278507,2.870183863,0,74.81253043,22.29998915,1,10.23200199,0.041721762,0.816973141,2.294696892,0.067355276,0.226779371,5.398162702,1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.004362335,0.08594728,1.098612289,0.270302614,6.157012561,0,74.81253043,20.38627876,1,9.912732479,0.023173065,0.130484201,0.811057281,0.073162952,0.195644928,2.833213344,1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.003569183,0.057038432,1.098612289,0.228756813,1.469869848,0,74.81253043,20.12739005,1,10.29216393,0.037726655,0.364510704,2.71631916,0.080137135,0.245864323,4.299550413,1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",0.405465108,0.348237453,0.005608716,0.020273255,0.405465108,0.090664754,8.410070519,4.699618634,32.64089172,10.36350932,1,4.548308672,0.00277425,0.01317404,0.055485008,0.049940908,0.301266293,3.064725145,0.405465108,0.348237453,0.004530117,0.07520387,1.098612289,0.254017814,3.649611865,0,74.81253043,22.8226348,1,7.504243883,0.033962721,0.198913373,1.358508829,0.076142374,0.305210352,5.398162702,1
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0.405465108,0.348237453,0.005121002,0.045578103,1.098612289,0.201773227,5.713058012,2.184799825,32.64089172,8.068650592,1,5.993270812,0.003071546,0.013304178,0.10136101,0.04888668,0.526913422,4.317488114,0.405465108,0.348237453,0.003099554,0.032001647,1.098612289,0.168689953,1.471731956,0,74.81253043,18.78753658,1,9.394610363,0.026933916,0.665137892,2.5317881,0.066979107,0.324303884,4.705015521,1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.003099554,0.036267334,1.098612289,0.184812134,-0.998774092,0,74.81253043,16.5488085,1,11.56094126,0.034621715,0.816973141,6.405017233,0.074474009,0.203849459,5.398162702,1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.003926101,0.042091048,1.098612289,0.172278507,2.870183863,0,74.81253043,22.29998915,1,10.23200199,0.041721762,0.816973141,2.294696892,0.067355276,0.226779371,5.398162702,1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.004206537,0.048079154,1.098612289,0.197953091,2.108803339,0,74.81253043,19.65140059,1,10.4908524,0.03099337,0.293717082,2.200529236,0.069509053,0.179370723,4.705015521,1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.005353774,0.036860464,0.405465108,0.119306058,9.936381945,7.140297632,53.04851082,13.13743317,1,6.756456336,0.003323751,0.01317404,0.073122526,0.048511356,0.27929018,5.010635294,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,1
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.004711321,0.026159039,0.405465108,0.101257222,7.495860283,3.642336192,53.04851082,11.78128171,1,7.374644798,0.002745545,0.023607438,0.085111883,0.048447945,0.214014611,3.624340933,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,1
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0.405465108,0.348237453,0.004907626,0.059673203,1.098612289,0.214160352,7.646097896,1.56786767,53.04851082,12.12133454,1,8.608478004,0.002323141,0.01317404,0.074340503,0.047157135,0.270147906,4.317488114,0.405465108,0.348237453,0.003926101,0.050985674,1.098612289,0.211290331,1.307500644,0,74.81253043,19.1957366,1,8.198407474,0.028771421,0.293717082,1.697513849,0.07858959,0.416710652,4.705015521,1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.005608716,0.083023587,1.098612289,0.250201355,10.64548414,5.833168466,53.04851082,13.8858961,1,7.606219802,0.001451654,0.008159725,0.033388034,0.046759498,0.154204335,1.832581464,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,1
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.004907626,0.054558357,1.098612289,0.205195127,8.84968164,4.118904553,53.04851082,12.48516171,1,6.663387234,0.002849881,0.021694532,0.099745836,0.046759057,0.266410903,4.317488114,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,1
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0.405465108,0.348237453,0.004530117,0.036721971,1.098612289,0.169522438,5.807304976,2.929178098,53.04851082,10.29877192,1,7.63560744,0.003208809,0.040166216,0.166858051,0.047888081,0.243802937,3.624340933,0.405465108,0.348237453,0.004362335,0.055376376,1.098612289,0.230036498,2.979896255,0,45.52440007,18.10104591,1,8.746105748,0.028952246,0.300261847,1.360755573,0.069425574,0.244485844,4.01186834,1
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0.405465108,0.348237453,0.006199107,0.028961793,0.405465108,0.108365108,6.83403007,3.237991444,32.64089172,14.42673415,0.993333333,6.121893974,0.020408026,0.199688633,0.285712359,0.048260952,0.427523163,5.010635294,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.398190916,0,45.52440007,21.10373934,1,11.11873117,0.026684257,0.129134489,0.400263852,0.088258418,0.204927558,2.453723722,1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0.405465108,0.348237453,0.004530117,0.068088459,1.098612289,0.216202032,7.375435256,2.676002168,53.04851082,12.22986148,1,6.075194925,0.003304523,0.023607438,0.112353786,0.046581531,0.238760213,5.010635294,0.405465108,0.348237453,0.004530117,0.08594728,1.098612289,0.270302614,3.837725269,0,74.81253043,24.33478264,1,8.92472576,0.049702627,0.300261847,1.739591961,0.069510387,0.16792934,4.01186834,1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0.405465108,0.348237453,0.004530117,0.068088459,1.098612289,0.216202032,7.375435256,2.676002168,53.04851082,12.22986148,1,6.075194925,0.003304523,0.023607438,0.112353786,0.046581531,0.238760213,5.010635294,0.405465108,0.348237453,0.003569183,0.057038432,1.098612289,0.228756813,1.469869848,0,74.81253043,20.12739005,1,10.29216393,0.037726655,0.364510704,2.71631916,0.080137135,0.245864323,4.299550413,1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0.405465108,0.348237453,0.004530117,0.068088459,1.098612289,0.216202032,7.375435256,2.676002168,53.04851082,12.22986148,1,6.075194925,0.003304523,0.023607438,0.112353786,0.046581531,0.238760213,5.010635294,0.405465108,0.348237453,0.003926101,0.038077909,1.098612289,0.183560148,2.096817026,0,74.81253043,17.9536513,1,8.821122389,0.025604448,0.462045667,2.022751431,0.067380547,0.206447355,4.299550413,1
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0.405465108,0.348237453,0.004907626,0.028961793,0.405465108,0.108365108,8.027913776,1.924657201,32.64089172,11.88063044,0.993333333,6.5006158,0.004090636,0.01317404,0.057268908,0.052589039,0.251452373,2.525728644,0.405465108,0.348237453,0.003569183,0.041511794,1.098612289,0.179906416,4.343423912,0,74.81253043,25.96626724,1,9.266595219,0.054740409,0.816973141,2.518058823,0.075244035,0.229415496,3.452252552,1
  The DPU compression software shall forward compressed data  to DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0.405465108,0.348237453,0.006543502,0,0,0,5.493304289,2.946846572,19.65342329,7.312092204,0.973333333,6.210467575,0.003943532,0.015699167,0.039435322,0.059433907,0.563851277,2.931193752,0.405465108,0.348237453,0.005121002,0.085741023,1.098612289,0.240325397,3.618239107,0,74.81253043,25.54617681,1,11.35799309,0.037733822,0.462045667,1.018813181,0.073881944,0.179685556,3.095577609,1
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.723222296,3.364667667,32.64089172,13.85808118,0.993333333,5.436817262,0.018789204,0.199688633,0.281838057,0.048837634,0.324618517,3.912023005,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,1
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.723222296,3.364667667,32.64089172,13.85808118,0.993333333,5.436817262,0.018789204,0.199688633,0.281838057,0.048837634,0.324618517,3.912023005,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.398190916,0,45.52440007,21.10373934,1,11.11873117,0.026684257,0.129134489,0.400263852,0.088258418,0.204927558,2.453723722,1
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005353774,0.028961793,0.405465108,0.108365108,6.21693301,2.389744067,32.64089172,10.55679523,0.993333333,7.151877515,0.007245788,0.066048956,0.10144103,0.05254975,0.215674046,2.813410717,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,6.388483652,3.787279017,32.64089172,10.83730654,0.993333333,6.865898633,0.007930324,0.066048956,0.103094218,0.052948512,0.291222714,2.813410717,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,6.388483652,3.787279017,32.64089172,10.83730654,0.993333333,6.865898633,0.007930324,0.066048956,0.103094218,0.052948512,0.291222714,2.813410717,0.405465108,0.348237453,0.004530117,0.043398693,1.098612289,0.183814949,3.882474446,0,74.81253043,19.77029556,1,11.33733728,0.02621879,0.234640863,1.153626767,0.061911,0.186801304,3.095577609,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,6.388483652,3.787279017,32.64089172,10.83730654,0.993333333,6.865898633,0.007930324,0.066048956,0.103094218,0.052948512,0.291222714,2.813410717,0.405465108,0.348237453,0.005121002,0.052613809,1.098612289,0.191587824,5.177540819,0,74.81253043,18.8483132,1,11.43524983,0.019427725,0.170245125,0.854819885,0.074269429,0.172369825,3.606403232,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,6.388483652,3.787279017,32.64089172,10.83730654,0.993333333,6.865898633,0.007930324,0.066048956,0.103094218,0.052948512,0.291222714,2.813410717,0.405465108,0.348237453,0.005353774,0.035257835,0.405465108,0.116816146,9.19019444,0,74.81253043,24.34122967,1,11.45890997,0.022681353,0.209620593,0.521671122,0.066783127,0.104956507,2.402430428,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,6.388483652,3.787279017,32.64089172,10.83730654,0.993333333,6.865898633,0.007930324,0.066048956,0.103094218,0.052948512,0.291222714,2.813410717,0.405465108,0.348237453,0.004061484,0.057857964,1.098612289,0.216141663,3.179910302,0,74.81253043,18.33969806,1,9.248566809,0.025137513,0.198913373,1.483113262,0.079834108,0.334387181,4.705015521,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004711321,0.065846293,1.098612289,0.224405291,3.473915099,0,74.81253043,22.65558539,1,10.08786576,0.036772406,0.264424359,1.066399784,0.088490814,0.352902074,4.705015521,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004061484,0.071622733,1.098612289,0.248274512,3.22062597,0,74.81253043,20.88816303,1,12.35921344,0.037720509,0.397826747,1.584261368,0.080552471,0.377590916,4.705015521,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004362335,0.050251119,1.098612289,0.197264826,6.681623511,0,74.81253043,22.18504732,1,9.953506394,0.031670194,0.154594115,1.203467374,0.076999139,0.46396066,4.705015521,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004530117,0.009010336,0.405465108,0.06044317,-0.253766483,0,45.52440007,15.49084866,0.986425339,11.31518114,0.03316631,0.234640863,1.492483962,0.084354351,0.29925197,5.398162702,1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0.405465108,0.348237453,0.004061484,0.086756323,1.098612289,0.284816946,7.564012747,3.352724326,32.64089172,9.559953956,1,6.560331459,0.003634724,0.023975071,0.109041707,0.04857871,0.171570852,2.931193752,0.405465108,0.348237453,0.004907626,0.056580211,1.098612289,0.232428682,2.130288096,0,45.52440007,16.83949819,1,10.59659691,0.025371412,0.234640863,1.167084967,0.065481306,0.230676035,3.606403232,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004362335,0.057849131,1.098612289,0.224424436,0.210747071,0,45.52440007,20.51572321,1,7.273340662,0.052100282,0.816973141,2.709214683,0.072434708,0.241448794,4.705015521,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004711321,0.065846293,1.098612289,0.224405291,3.473915099,0,74.81253043,22.65558539,1,10.08786576,0.036772406,0.264424359,1.066399784,0.088490814,0.352902074,4.705015521,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004061484,0.071622733,1.098612289,0.248274512,3.22062597,0,74.81253043,20.88816303,1,12.35921344,0.037720509,0.397826747,1.584261368,0.080552471,0.377590916,4.705015521,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0.405465108,0.348237453,0.005353774,0.100271826,1.098612289,0.295264328,7.83325236,2.440265067,32.64089172,10.67801413,1,4.758613152,0.00388008,0.014144275,0.058201206,0.04995298,0.260861409,3.218875825,0.405465108,0.348237453,0.004530117,0.009010336,0.405465108,0.06044317,-0.253766483,0,45.52440007,15.49084866,0.986425339,11.31518114,0.03316631,0.234640863,1.492483962,0.084354351,0.29925197,5.398162702,1
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.003926101,0.032365127,1.098612289,0.159414353,1.752771001,0,45.52440007,18.96132702,1,9.188516359,0.037950231,0.816973141,2.239063623,0.071763273,0.289804293,3.606403232,1
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,6.340418486,0,45.52440007,19.45212547,1,9.462791225,0.026341617,0.209620593,0.632198817,0.080118806,0.294212535,2.102325836,1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.197443344,3.183090076,32.64089172,9.418500417,1,6.876956945,0.003322563,0.029924013,0.053161004,0.049704887,0.35612585,1.875141078,0.405465108,0.348237453,0.004061484,0.043398693,1.098612289,0.183814949,6.932668966,0,74.81253043,20.90750267,1,6.587846751,0.027886211,0.343912995,1.226993265,0.064531886,0.135751634,4.299550413,1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0.405465108,0.348237453,0.005889152,0.025341569,0.405465108,0.101366277,7.197443344,3.183090076,32.64089172,9.418500417,1,6.876956945,0.003322563,0.029924013,0.053161004,0.049704887,0.35612585,1.875141078,0.405465108,0.348237453,0.004061484,0.04065074,1.098612289,0.189462763,1.916845439,0,74.81253043,17.54876003,1,7.709682308,0.030428168,0.213516211,2.251684437,0.080813472,0.270977682,4.01186834,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.004907626,0.103729476,1.098612289,0.294634611,7.925787187,0,74.81253043,22.43013874,1,9.652570239,0.027013974,0.161058499,0.783405249,0.065439516,0.178825952,2.402430428,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.004711321,0.041779928,1.098612289,0.193354646,4.45347939,0,45.52440007,17.95218555,1,9.679196457,0.026785058,0.260938843,0.9642621,0.081511769,0.125603675,2.220108871,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.004061484,0.04065074,1.098612289,0.189462763,1.916845439,0,74.81253043,17.54876003,1,7.709682308,0.030428168,0.213516211,2.251684437,0.080813472,0.270977682,4.01186834,1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.006199107,0.136395893,1.098612289,0.313209086,9.050093107,3.648051812,32.64089172,10.33532954,1,4.772430673,0.001592708,0.008159725,0.022297909,0.05238527,0.341445315,2.931193752,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,7.741056294,3.237991444,32.64089172,15.15450976,0.993333333,6.650745096,0.018702253,0.199688633,0.224427032,0.052204071,0.279594574,3.064725145,0.405465108,0.348237453,0.004362335,0.042911068,1.098612289,0.181772358,0.355598742,0,74.81253043,20.85588311,1,9.428059251,0.041876855,0.816973141,3.727040096,0.077431157,0.301385525,5.398162702,1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,7.741056294,3.237991444,32.64089172,15.15450976,0.993333333,6.650745096,0.018702253,0.199688633,0.224427032,0.052204071,0.279594574,3.064725145,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,7.741056294,3.237991444,32.64089172,15.15450976,0.993333333,6.650745096,0.018702253,0.199688633,0.224427032,0.052204071,0.279594574,3.064725145,0.405465108,0.348237453,0.004206537,0.072296936,1.098612289,0.25947582,2.262417259,0,74.81253043,16.82149894,1,9.557947041,0.023131024,0.300261847,1.665433734,0.06935988,0.592119918,5.398162702,1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,7.741056294,3.237991444,32.64089172,15.15450976,0.993333333,6.650745096,0.018702253,0.199688633,0.224427032,0.052204071,0.279594574,3.064725145,0.405465108,0.348237453,0.005889152,0.027031007,0.405465108,0.104690641,6.398190916,0,45.52440007,21.10373934,1,11.11873117,0.026684257,0.129134489,0.400263852,0.088258418,0.204927558,2.453723722,1
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.004206537,0.100400585,1.098612289,0.278762109,7.945322478,3.720897776,53.04851082,11.59315587,1,5.649760166,0.001932756,0.018053973,0.065713703,0.049940216,0.248593633,5.010635294,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,1
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0.405465108,0.348237453,0.004530117,0.062567773,1.098612289,0.207853444,7.347545406,3.151043214,53.04851082,10.91648875,1,5.612733762,0.001606154,0.008918459,0.059427689,0.050077324,0.27252759,5.010635294,0.405465108,0.348237453,0.004206537,0.031607592,1.098612289,0.16174306,0.331232659,0,74.81253043,18.50538726,1,8.451636223,0.037681894,0.816973141,4.069644592,0.073696017,0.240084548,5.398162702,1
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0.405465108,0.348237453,0.004530117,0.062567773,1.098612289,0.207853444,7.347545406,3.151043214,53.04851082,10.91648875,1,5.612733762,0.001606154,0.008918459,0.059427689,0.050077324,0.27252759,5.010635294,0.405465108,0.348237453,0.004061484,0.04065074,1.098612289,0.189462763,1.916845439,0,74.81253043,17.54876003,1,7.709682308,0.030428168,0.213516211,2.251684437,0.080813472,0.270977682,4.01186834,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004711321,0.041779928,1.098612289,0.193354646,4.45347939,0,45.52440007,17.95218555,1,9.679196457,0.026785058,0.260938843,0.9642621,0.081511769,0.125603675,2.220108871,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Sending Messages to the ICUIn order to send messages to the ICU, the DPU FSW tasks call icuiEnq().  The calling application passes the function code of the message to be sent, as well as a pointer to a data structure containing the message parameters associated with the given function code.  The icuiEnq() function formats the message according to the ICU/DPU ICD using icuiMsgFormat(), and then writes the message to SSI Driver transmitter buffer by calling the driver write() function. A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  A timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004206537,0.048890084,1.098612289,0.212525565,-1.090381351,0,74.81253043,22.87640671,1,8.810150015,0.049834438,0.816973141,4.18609283,0.068222615,0.191841344,4.705015521,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004061484,0.04065074,1.098612289,0.189462763,1.916845439,0,74.81253043,17.54876003,1,7.709682308,0.030428168,0.213516211,2.251684437,0.080813472,0.270977682,4.01186834,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware.  The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers.   The driver features a standard I/O interface which utilizes an extended ioctl() command set to support unique SSI hardware attributes.  This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the newer Tornado driver architecture. ,0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.003926101,0.065186779,1.098612289,0.243692822,3.896579785,0,74.81253043,17.2128965,1,11.17481093,0.018300965,0.213516211,1.152960819,0.073609882,0.200888916,3.000267429,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Standard I/O InterfaceSSI ioctl() commands.,0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.00736144,0,0,0,0,0,0,0,0,21.41641302,0,0,0,0,0,0,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,InitializationThe SSI Driver CSC is initialized by calling the function ssiDrv() from the startup task usrRoot().,0.405465108,0.348237453,0.006543502,0.036860464,0.405465108,0.12225233,7.490465358,2.699822337,32.64089172,10.68822107,1,8.572405564,0.005221203,0.029924013,0.057433235,0.050232681,0.069372164,0.916290732,0.405465108,0.348237453,0.004907626,0.100271826,1.098612289,0.295264328,3.292429599,0,45.52440007,16.76801112,0.950226244,8.251658844,0.029056441,0.213516211,0.435846621,0.082418579,0.126783439,1.636962586,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.004206537,0.057864924,1.098612289,0.211043341,6.41106607,0,74.81253043,19.9868006,1,8.160607962,0.028210945,0.160841236,0.930961191,0.074199725,0.18972594,2.913256052,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.003569183,0.057038432,1.098612289,0.228756813,1.469869848,0,74.81253043,20.12739005,1,10.29216393,0.037726655,0.364510704,2.71631916,0.080137135,0.245864323,4.299550413,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.004711321,0.041779928,1.098612289,0.193354646,4.45347939,0,45.52440007,17.95218555,1,9.679196457,0.026785058,0.260938843,0.9642621,0.081511769,0.125603675,2.220108871,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.004061484,0.04065074,1.098612289,0.189462763,1.916845439,0,74.81253043,17.54876003,1,7.709682308,0.030428168,0.213516211,2.251684437,0.080813472,0.270977682,4.01186834,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,8.282580906,3.774059921,32.64089172,9.718806248,1,4.987764528,0.004251477,0.029924013,0.102035453,0.046817011,0.261866181,2.931193752,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,1
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.005353774,0,0,0,3.949240017,1.104028809,19.65342329,7.126580591,0.973333333,10.72919394,0.003186718,0.008831569,0.031867178,0.05852869,0.336568834,1.504077397,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,1
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0.405465108,0.348237453,0.005121002,0.015017226,0.405465108,0.078031796,7.090387512,2.861667916,32.64089172,9.569988863,0.993333333,5.759328587,0.002865073,0.018408774,0.07735697,0.051326255,0.217932507,3.218875825,0.405465108,0.348237453,0.003799453,0.049314013,1.098612289,0.207940602,1.117956553,0,74.81253043,17.4962097,1,10.68245517,0.023625703,0.198913373,1.441167855,0.083778226,0.303243117,4.705015521,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.004530117,0.070806329,1.098612289,0.253358691,0.513876958,0,74.81253043,21.2396791,1,11.77877581,0.042802539,0.552021201,2.48254724,0.06169227,0.492633302,5.398162702,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.005121002,0.058983427,1.098612289,0.226506978,1.025878645,0,74.81253043,21.32810081,1,7.863092982,0.042608459,0.552021201,2.173031405,0.071169439,0.265538001,5.398162702,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.004362335,0.031303975,1.098612289,0.156842628,1.193718764,0,74.81253043,17.89805377,1,12.68033007,0.028885535,0.552021201,1.76201764,0.06408246,0.308007237,4.01186834,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.005608716,0.04297364,1.098612289,0.196042855,-2.953167718,0,74.81253043,27.82243336,1,10.67817227,0.085091478,0.552021201,2.978201732,0.063087937,0.913204749,5.398162702,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0.405465108,0.348237453,0.005353774,0.018430232,0.405465108,0.086445452,3.318048157,0.953167956,32.64089172,8.297899458,0.986666667,8.190505994,0.005641226,0.036025032,0.124106975,0.051018316,0.663736123,3.912023005,0.405465108,0.348237453,0.005353774,0.020273255,0.405465108,0.089494838,4.33877328,0,74.81253043,24.45518186,1,6.080971337,0.048648717,0.816973141,1.945948668,0.068437254,0.166913119,3.383259681,1
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005608716,0.028961793,0.405465108,0.108365108,6.299654122,0,32.64089172,10.50888511,0.986666667,10.76287541,0.00224399,0.010990005,0.03141586,0.054343684,0.150800242,0.544727175,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0.405465108,0.348237453,0.006543502,0.028961793,0.405465108,0.108365108,6.77055923,3.163247953,32.64089172,9.79556185,0.993333333,4.315687327,0.00520768,0.024639406,0.072907519,0.05315274,0.6511598,3.624340933,0.405465108,0.348237453,0.003926101,0.038077909,1.098612289,0.183560148,2.096817026,0,74.81253043,17.9536513,1,8.821122389,0.025604448,0.462045667,2.022751431,0.067380547,0.206447355,4.299550413,1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",0.405465108,0.348237453,0.006543502,0.028961793,0.405465108,0.108365108,6.77055923,3.163247953,32.64089172,9.79556185,0.993333333,4.315687327,0.00520768,0.024639406,0.072907519,0.05315274,0.6511598,3.624340933,0.405465108,0.348237453,0.004061484,0.069665712,1.098612289,0.235818235,2.749570331,0,74.81253043,20.40787745,1,9.044334866,0.030006878,0.462045667,1.470337017,0.068742269,0.315377236,3.606403232,1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.004530117,0.068197947,1.098612289,0.228158976,7.483922911,1.386517258,53.04851082,13.39327932,1,9.901293017,0.003467706,0.018806314,0.097095766,0.048803737,0.403642114,5.010635294,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,1
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0.405465108,0.348237453,0.005353774,0.083559855,1.098612289,0.266797989,5.899132028,0.912294101,53.04851082,11.38643187,1,10.99079431,0.002967573,0.01640009,0.106832615,0.049040183,0.303884057,5.010635294,0.405465108,0.348237453,0.004362335,0.031303975,1.098612289,0.156842628,1.193718764,0,74.81253043,17.89805377,1,12.68033007,0.028885535,0.552021201,1.76201764,0.06408246,0.308007237,4.01186834,1
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,3.713227752,0.269768129,53.04851082,18.1512269,1,8.919978903,0.016746367,0.058373381,0.184210037,0.066957962,1.48069045,5.010635294,0.405465108,0.348237453,0.004206537,0.051609257,1.098612289,0.199805656,1.978767432,0,74.81253043,21.70204521,1,14.71750575,0.034568151,0.816973141,1.279021599,0.068370923,0.099641927,3.606403232,1
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,3.713227752,0.269768129,53.04851082,18.1512269,1,8.919978903,0.016746367,0.058373381,0.184210037,0.066957962,1.48069045,5.010635294,0.405465108,0.348237453,0.005608716,0.04297364,1.098612289,0.196042855,-2.953167718,0,74.81253043,27.82243336,1,10.67817227,0.085091478,0.552021201,2.978201732,0.063087937,0.913204749,5.398162702,1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.004530117,0.040546511,0.405465108,0.124799527,6.412016691,0.413175374,53.04851082,13.67656972,1,8.788891679,0.002336666,0.013304178,0.046733312,0.054279038,0.239138658,4.317488114,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0.405465108,0.348237453,0.004530117,0.040546511,0.405465108,0.124799527,6.412016691,0.413175374,53.04851082,13.67656972,1,8.788891679,0.002336666,0.013304178,0.046733312,0.054279038,0.239138658,4.317488114,0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.094193877,6.098156404,0,74.81253043,25.56791673,1,8.744137809,0.047297705,0.816973141,1.702717364,0.070089916,0.19506015,4.299550413,1
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0.405465108,0.348237453,0.004907626,0.025341569,0.405465108,0.099717935,7.208482776,1.506183715,53.04851082,11.94260892,1,7.862984932,0.00339945,0.021824118,0.108782388,0.054433206,0.339840872,3.912023005,0.405465108,0.348237453,0.005121002,0.05570657,1.098612289,0.222534692,4.659799324,0,45.52440007,17.00671601,0.990950226,8.462848029,0.027514153,0.157557635,0.742882141,0.080451093,0.253587056,3.095577609,1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,7.636325526,7.021216958,32.64089172,9.365038987,0.993333333,5.932675122,0.00132221,0.003369103,0.014544308,0.044760435,0.173818322,1.832581464,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",0.405465108,0.348237453,0.005889152,0.036860464,0.405465108,0.12225233,7.636325526,7.021216958,32.64089172,9.365038987,0.993333333,5.932675122,0.00132221,0.003369103,0.014544308,0.044760435,0.173818322,1.832581464,0.405465108,0.348237453,0.004711321,0.013981555,0.405465108,0.074629593,2.731496099,0,74.81253043,20.39218697,1,7.087550983,0.038180099,0.816973141,2.214445735,0.07239116,0.203689842,4.705015521,1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.006543502,0.045051679,0.405465108,0.135155036,11.39770755,6.873768264,53.04851082,17.09662027,1,8.949188892,0.001743154,0.008159725,0.015688384,0.05717586,0.309484345,1.455287233,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.006543502,0.045051679,0.405465108,0.135155036,11.39770755,6.873768264,53.04851082,17.09662027,1,8.949188892,0.001743154,0.008159725,0.015688384,0.05717586,0.309484345,1.455287233,0.405465108,0.348237453,0.004206537,0.051609257,1.098612289,0.199805656,1.978767432,0,74.81253043,21.70204521,1,14.71750575,0.034568151,0.816973141,1.279021599,0.068370923,0.099641927,3.606403232,1
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.005353774,0,0,0,6.294699669,0.134884065,24.16548551,8.750036859,0.986666667,10.47595897,0.001229876,0.008159725,0.012298759,0.058045639,0.196085549,0.544727175,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,1
  The DPU-DPA shall be capable of providing DPA_HK on request.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0.405465108,0.348237453,0.005353774,0,0,0,6.294699669,0.134884065,24.16548551,8.750036859,0.986666667,10.47595897,0.001229876,0.008159725,0.012298759,0.058045639,0.196085549,0.544727175,0.405465108,0.348237453,0.005608716,0.061598145,1.098612289,0.217418842,7.759008988,0,74.81253043,19.03296184,1,9.410314941,0.018050622,0.108546523,0.559569294,0.071164212,0.138990138,3.606403232,1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0.405465108,0.348237453,0.004530117,0.018430232,0.405465108,0.086445452,7.550461121,4.69273186,32.64089172,9.616779532,1,6.791202241,0.002291178,0.012378786,0.05040592,0.043533753,0.273596406,3.624340933,0.405465108,0.348237453,0.005353774,0.020273255,0.405465108,0.089494838,4.33877328,0,74.81253043,24.45518186,1,6.080971337,0.048648717,0.816973141,1.945948668,0.068437254,0.166913119,3.383259681,1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",0.405465108,0.348237453,0.004530117,0.018430232,0.405465108,0.086445452,7.550461121,4.69273186,32.64089172,9.616779532,1,6.791202241,0.002291178,0.012378786,0.05040592,0.043533753,0.273596406,3.624340933,0.405465108,0.348237453,0.004711321,0.013981555,0.405465108,0.074629593,2.731496099,0,74.81253043,20.39218697,1,7.087550983,0.038180099,0.816973141,2.214445735,0.07239116,0.203689842,4.705015521,1
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0.405465108,0.348237453,0.005608716,0.025341569,0.405465108,0.101366277,7.500481059,2.827560373,32.64089172,11.14183361,1,7.263251047,0.003379986,0.010030348,0.054079772,0.051430102,0.335581127,2.931193752,0.405465108,0.348237453,0.005353774,0.022525839,0.405465108,0.094193877,6.098156404,0,74.81253043,25.56791673,1,8.744137809,0.047297705,0.816973141,1.702717364,0.070089916,0.19506015,4.299550413,1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.006199107,0.031189624,0.405465108,0.112455788,6.283412031,2.755432086,32.64089172,9.516574007,0.993333333,8.571554407,0.001593493,0.008159725,0.020715411,0.053937008,0.295917987,2.197224577,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0.405465108,0.348237453,0.006199107,0.031189624,0.405465108,0.112455788,6.283412031,2.755432086,32.64089172,9.516574007,0.993333333,8.571554407,0.001593493,0.008159725,0.020715411,0.053937008,0.295917987,2.197224577,0.405465108,0.348237453,0.005608716,0.04297364,1.098612289,0.196042855,-2.953167718,0,74.81253043,27.82243336,1,10.67817227,0.085091478,0.552021201,2.978201732,0.063087937,0.913204749,5.398162702,1
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.112155958,0.269768129,32.64089172,12.2844916,0.993333333,9.801282745,0.003798833,0.012378786,0.056982494,0.058062046,0.258581365,2.525728644,0.405465108,0.348237453,0.003569183,0.057116863,1.098612289,0.22235131,1.863362469,0,74.81253043,19.21792695,1,12.40663071,0.035614709,0.816973141,2.813562046,0.0818785,0.275542142,4.705015521,1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005608716,0.084508638,1.098612289,0.304700226,2.466664168,0.553650055,18.83336281,5.200942671,0.88,9.89426188,0.003386235,0.008263839,0.044021061,0.056806364,0.936338349,3.218875825,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0.405465108,0.348237453,0.005608716,0.084508638,1.098612289,0.304700226,2.466664168,0.553650055,18.83336281,5.200942671,0.88,9.89426188,0.003386235,0.008263839,0.044021061,0.056806364,0.936338349,3.218875825,0.405465108,0.348237453,0.004530117,0.070806329,1.098612289,0.253358691,0.513876958,0,74.81253043,21.2396791,1,11.77877581,0.042802539,0.552021201,2.48254724,0.06169227,0.492633302,5.398162702,1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",0.405465108,0.348237453,0.005608716,0.084508638,1.098612289,0.304700226,2.466664168,0.553650055,18.83336281,5.200942671,0.88,9.89426188,0.003386235,0.008263839,0.044021061,0.056806364,0.936338349,3.218875825,0.405465108,0.348237453,0.004206537,0.074668492,1.098612289,0.259736501,4.05068816,0,74.81253043,17.71149562,1,10.59465756,0.02092807,0.209620593,1.151043841,0.067160529,0.328312048,4.705015521,1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",0.405465108,0.348237453,0.005608716,0.084508638,1.098612289,0.304700226,2.466664168,0.553650055,18.83336281,5.200942671,0.88,9.89426188,0.003386235,0.008263839,0.044021061,0.056806364,0.936338349,3.218875825,0.405465108,0.348237453,0.004711321,0.148725125,1.098612289,0.359019459,4.897662135,0,74.81253043,25.74691509,1,8.921450603,0.047690611,0.816973141,1.669171387,0.063270975,0.277317167,4.705015521,1
"  In image mode, the DPU-DPA shall calculate the memory location to increment for each valid detector event received.  The memory location shall be incremented for each valid event.  Each memory location shall be able to count so many events.  An Image mode exposure shall produce a PROD_IMAGE.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0.405465108,0.348237453,0.004907626,0.056163015,1.098612289,0.208057918,5.732715812,1.534956891,53.04851082,11.03037251,1,6.679061421,0.003899031,0.024639406,0.132567064,0.050424911,0.32616661,4.317488114,0.405465108,0.348237453,0.005353774,0.051609257,1.098612289,0.199805656,2.736979954,0,74.81253043,22.23396521,1,8.95724596,0.040795888,0.552021201,1.509447859,0.063351097,0.421921091,4.01186834,1
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0.405465108,0.348237453,0.006199107,0.07520387,1.098612289,0.257338449,6.039108291,1.744518472,32.64089172,10.4458532,1,8.623947696,0.005435295,0.053974486,0.108705909,0.053399675,0.243909451,3.912023005,0.405465108,0.348237453,0.004061484,0.08594728,1.098612289,0.270302614,1.658103063,0,74.81253043,23.85007878,1,9.151660441,0.039381187,0.302315065,1.378341546,0.07339589,0.292401892,4.299550413,1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.091754437,6.010566674,1.327943502,53.04851082,11.62402303,1,8.774716225,0.003568394,0.021728902,0.135598989,0.049734736,0.332706703,4.317488114,0.405465108,0.348237453,0.004530117,0.017628918,0.405465108,0.083600649,-2.695118369,0,74.81253043,26.67790254,1,13.37839138,0.062858431,0.816973141,2.891487808,0.066531548,0.179462947,5.398162702,1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.091754437,6.010566674,1.327943502,53.04851082,11.62402303,1,8.774716225,0.003568394,0.021728902,0.135598989,0.049734736,0.332706703,4.317488114,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.",Event ProcessingThe Event Processor Task is also responsible for creating the Finding Chart.  The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y.  The parameterized finding chart will be created by listing the X & Y detector location of each star along with a CxC pixel matrix around the star location of the intensities. The Event Processor Task will create the necessary housekeeping for the DPA.,0.405465108,0.348237453,0.004362335,0.021340269,0.405465108,0.091754437,6.010566674,1.327943502,53.04851082,11.62402303,1,8.774716225,0.003568394,0.021728902,0.135598989,0.049734736,0.332706703,4.317488114,0.405465108,0.348237453,0.004711321,0.054693724,1.098612289,0.218503947,3.140489952,0,74.81253043,17.22501259,1,11.51401451,0.020558844,0.131954504,1.130736398,0.063710672,0.269437988,5.398162702,1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0.405465108,0.348237453,0.005121002,0.1074341,1.098612289,0.305055066,7.299217141,0.814963391,53.04851082,14.75013414,1,9.152493112,0.003762451,0.01640009,0.05267431,0.064033639,0.392502765,3.624340933,0.405465108,0.348237453,0.003569183,0.023287104,1.098612289,0.135686874,0.505209294,0,75.38678391,18.20018956,1,18.02304812,0.02861883,0.209620593,2.34674406,0.078850547,0.297779288,5.398162702,1
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0.405465108,0.348237453,0.004907626,0.038615725,0.405465108,0.121960906,8.635257665,3.346275026,53.04851082,13.30780137,1,9.029702647,0.001241671,0.008159725,0.02607509,0.050181147,0.203173893,1.683545885,0.405465108,0.348237453,0.004530117,0.016218604,0.405465108,0.080261276,4.953757909,0,74.81253043,18.01386147,1,8.313483747,0.02169393,0.154594115,1.084696517,0.068557009,0.36547854,4.01186834,1
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.114474904,7.222385649,0.98921027,53.04851082,13.36321037,1,8.240290008,0.004138516,0.028176413,0.099324378,0.052257754,0.453137836,4.317488114,0.405465108,0.348237453,0.004530117,0.065186779,1.098612289,0.243692822,1.121356651,0,74.81253043,21.27046714,1,8.780330982,0.035927944,0.302315065,2.263460455,0.066618295,0.362799068,5.398162702,1
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0.405465108,0.348237453,0.005889152,0.045051679,0.405465108,0.135155036,9.05872319,0.788669058,53.04851082,17.33841213,1,9.585735386,0.001864577,0.008159725,0.016781189,0.055452748,0.615731819,3.218875825,0.405465108,0.348237453,0.003271751,0.031303975,1.098612289,0.156842628,1.159439125,0,74.81253043,24.72925261,1,11.37073806,0.052632344,0.816973141,3.21057296,0.08047088,0.170626254,5.398162702,1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0.405465108,0.348237453,0.005121002,0.020273255,0.405465108,0.090664754,4.724982682,0.448247648,32.64089172,12.82748798,1,6.334894284,0.010652051,0.106287952,0.213041016,0.04781568,0.684460813,5.010635294,0.405465108,0.348237453,0.004061484,0,0,0,-1.452655887,0,40.28750799,14.01989159,0.977375566,13.80087164,0.036800617,0.160841236,0.846414199,0.090066534,1.092013461,5.398162702,1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",0.405465108,0.348237453,0.005121002,0.020273255,0.405465108,0.090664754,4.724982682,0.448247648,32.64089172,12.82748798,1,6.334894284,0.010652051,0.106287952,0.213041016,0.04781568,0.684460813,5.010635294,0.405465108,0.348237453,0.004907626,0.083559855,1.098612289,0.266797989,1.969450947,0,45.52440007,15.75158978,0.995475113,9.512970448,0.025306841,0.18202996,0.911046259,0.075641293,0.600999793,4.705015521,1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,0.405465108,0.348237453,0.005121002,0.020273255,0.405465108,0.090664754,4.724982682,0.448247648,32.64089172,12.82748798,1,6.334894284,0.010652051,0.106287952,0.213041016,0.04781568,0.684460813,5.010635294,0.405465108,0.348237453,0.004907626,0.088475141,1.098612289,0.273947291,4.396944154,0,74.81253043,24.43521801,1,9.370825345,0.044259094,0.816973141,1.504809193,0.07236855,0.190560008,3.606403232,1
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0.405465108,0.348237453,0.004362335,0.017628918,0.405465108,0.084545319,3.022091663,1.672904592,32.64089172,8.469809029,0.986666667,6.937866505,0.01058009,0.128566129,0.243342081,0.05246794,0.804536718,4.317488114,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,-7.334746354,0,45.52440007,33.86360525,0.954751131,8.971136526,0.050205998,0.336623225,0.953913957,0.077752949,0.71393411,5.398162702,1
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0.405465108,0.348237453,0.005889152,0.031189624,0.405465108,0.112455788,5.346427802,0.626727166,32.64089172,10.87649277,0.993333333,7.259805304,0.006659198,0.05067867,0.086569573,0.051929574,0.546023476,4.317488114,0.405465108,0.348237453,0.004206537,0.030310198,1.098612289,0.154391326,2.092895473,0,74.81253043,20.45365799,1,7.762319433,0.036173794,0.264424359,2.278949033,0.070525141,0.2034657,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.00368072,0.034576492,1.098612289,0.175164056,1.352666914,0,74.81253043,17.68710094,1,8.705409194,0.030601887,0.264424359,2.662364169,0.077160858,0.234936858,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.004061484,0.057857964,1.098612289,0.216141663,3.179910302,0,74.81253043,18.33969806,1,9.248566809,0.025137513,0.198913373,1.483113262,0.079834108,0.334387181,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,2.778690914,0,45.52440007,21.42252731,0.986425339,8.466996561,0.037473564,0.300103203,0.637050594,0.116530816,0.489146731,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine sets the value of the RTC Registers,0.405465108,0.348237453,0.005121002,0.095477125,1.098612289,0.266895923,9.026898337,3.165156777,53.04851082,15.52172175,1,5.136376291,0.00948724,0.121465147,0.189744809,0.048060042,0.147206202,2.931193752,0.405465108,0.348237453,0.006928414,0.040546511,0.405465108,0.128219325,-3.392728573,-1.336661821,45.52440007,24.84197551,0.900452489,6.749532204,0.073130398,0.300103203,0.731303983,0.144892053,0.46635345,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004711321,0.028961793,0.405465108,0.105689014,4.141805031,0,74.81253043,20.63351831,1,7.706804526,0.034479537,0.172437751,1.448140571,0.082155542,0.208816614,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004530117,0.043398693,1.098612289,0.183814949,3.882474446,0,74.81253043,19.77029556,1,11.33733728,0.02621879,0.234640863,1.153626767,0.061911,0.186801304,3.095577609,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.004362335,0.032437209,0.405465108,0.112268205,2.461566194,0,49.07864637,19.89947945,0.986425339,11.65655218,0.033703727,0.300103203,0.842593186,0.120574324,0.821579117,4.705015521,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0.405465108,0.348237453,0.005121002,0.090930595,1.098612289,0.260970978,9.057979194,3.787279017,53.04851082,15.10605141,1,5.260282292,0.009042065,0.121465147,0.189883375,0.047929968,0.162068579,2.931193752,0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,2.778690914,0,45.52440007,21.42252731,0.986425339,8.466996561,0.037473564,0.300103203,0.637050594,0.116530816,0.489146731,4.705015521,1
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0.405465108,0.348237453,0.004362335,0.025341569,0.405465108,0.099717935,5.591451783,1.581896175,32.64089172,9.255047123,1,5.864650375,0.003127222,0.018806314,0.100071101,0.047587391,0.358539197,5.010635294,0.405465108,0.348237453,0.004061484,0.034978544,1.098612289,0.176151037,-0.600318019,0,74.81253043,19.78196211,1,7.600189728,0.045494838,0.816973141,3.91255606,0.072128715,0.320624122,5.398162702,1
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.004362335,0.025341569,0.405465108,0.099717935,5.591451783,1.581896175,32.64089172,9.255047123,1,5.864650375,0.003127222,0.018806314,0.100071101,0.047587391,0.358539197,5.010635294,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.005121002,0.088475141,1.098612289,0.27819479,2.690952872,0,45.52440007,17.38645997,0.959276018,11.7891405,0.02645415,0.161058499,0.449720547,0.059110306,0.492330206,3.452252552,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.351085419,0,74.81253043,20.33669826,1,9.063689032,0.017694919,0.076816825,0.424678066,0.086273731,0.636747294,3.452252552,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers The RSC processor also generates an external interrupt for the Power Fail Interrupt.  The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt.  Some custom routines must be provided to access this interrupt. These functions are described below, and are contained in sysLibSup.c.",0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.004907626,0.042434278,1.098612289,0.181829266,1.188158871,0,45.52440007,20.20989926,1,10.66434209,0.035341764,0.428814433,1.590379371,0.075743898,0.263337926,3.452252552,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,6.204495033,0,74.81253043,23.37183332,1,11.6001882,0.025565798,0.161058499,0.485750164,0.069019195,0.353519484,3.452252552,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.005608716,0.079564271,1.098612289,0.245287898,6.596405952,0,74.81253043,20.18526111,1,10.35105533,0.014212382,0.076816825,0.341097167,0.084352938,0.595479511,3.452252552,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",0.405465108,0.348237453,0.005121002,0.104107587,1.098612289,0.310063174,7.589610253,3.360776028,32.64089172,11.91886988,1,5.269873285,0.009141876,0.142275879,0.228546903,0.050016494,0.233230018,2.445685937,0.405465108,0.348237453,0.003799453,0.044158786,1.098612289,0.202385258,1.399783811,0,74.81253043,16.26551849,1,11.1492483,0.024787789,0.364510704,2.305264383,0.076972805,0.236221014,4.705015521,1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.004061484,0.01126292,0.405465108,0.067577518,5.411878453,1.819811711,32.64089172,8.770240745,1,7.291843048,0.00240055,0.018592303,0.086419813,0.046588039,0.389473593,5.010635294,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.004061484,0.01126292,0.405465108,0.067577518,5.411878453,1.819811711,32.64089172,8.770240745,1,7.291843048,0.00240055,0.018592303,0.086419813,0.046588039,0.389473593,5.010635294,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005889152,0,0,0,2.45644206,0.639713501,14.22082103,5.747838196,0.82,5.814891907,0.007261147,0.018592303,0.050828032,0.05239389,1.130373476,3.624340933,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005121002,0.018430232,0.405465108,0.086445452,6.723522343,1.875653978,32.64089172,10.71367403,1,6.34060071,0.004010994,0.018592303,0.088241876,0.045771729,0.469610648,4.317488114,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0.405465108,0.348237453,0.005608716,0.01307952,0.405465108,0.072823683,6.400832801,3.102976979,32.64089172,9.129470727,0.993333333,4.529000841,0.003428778,0.018592303,0.106292133,0.046128999,0.378722745,5.010635294,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,-1.920700171,0,45.52440007,21.86826431,1,7.741435041,0.060685472,0.816973141,2.548789825,0.100670816,0.36845094,4.705015521,1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005608716,0.01307952,0.405465108,0.072823683,6.400832801,3.102976979,32.64089172,9.129470727,0.993333333,4.529000841,0.003428778,0.018592303,0.106292133,0.046128999,0.378722745,5.010635294,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.006543502,0.027031007,0.405465108,0.104690641,7.460725835,3.102976979,32.64089172,11.08455784,0.993333333,5.633150238,0.003442717,0.018592303,0.051640759,0.047983997,0.418037414,2.371577964,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-BIT shall use the 1553 Driver CSC to perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0.405465108,0.348237453,0.005353774,0.031189624,0.405465108,0.112455788,7.464995391,5.090068254,32.64089172,9.908262229,0.993333333,4.424968754,0.004581908,0.018592303,0.059564806,0.047090836,0.46175678,3.624340933,0.405465108,0.348237453,0.00368072,0.059518364,1.098612289,0.233427868,1.200425405,0,74.81253043,18.43201137,1,7.862846422,0.035150296,0.309075976,2.425370455,0.06771355,0.224372236,4.705015521,1
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005353774,0.027031007,0.405465108,0.104690641,7.435718082,2.216454848,53.04851082,13.92248703,1,10.07544464,0.001271386,0.008159725,0.01907079,0.049573042,0.304434202,2.371577964,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0.405465108,0.348237453,0.005889152,0.019307862,0.405465108,0.08847974,6.645823518,2.249497855,32.64089172,9.94142774,1,6.630809131,0.002175544,0.011670936,0.045686427,0.048821731,0.245386045,2.708050201,0.405465108,0.348237453,0.003926101,0.049653491,1.098612289,0.212182614,-0.454779695,0,74.81253043,16.52229634,1,8.668414358,0.033387989,0.397826747,3.772842806,0.074235659,0.2612069,4.705015521,1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0.405465108,0.348237453,0.005608716,0.090930595,1.098612289,0.260970978,6.740533038,0.953321715,53.04851082,13.18726495,1,10.06705588,0.002312746,0.009559668,0.048567666,0.053464407,0.511687126,4.317488114,0.405465108,0.348237453,0.00368072,0.071933904,1.098612289,0.252709776,1.194038736,0,74.81253043,17.62710207,1,11.126388,0.028504354,0.300261847,2.223339606,0.076047919,0.307216531,4.705015521,1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.005608716,0.090930595,1.098612289,0.260970978,6.740533038,0.953321715,53.04851082,13.18726495,1,10.06705588,0.002312746,0.009559668,0.048567666,0.053464407,0.511687126,4.317488114,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of the x analog inputs, and the current value (ADC_VALUE) of each analog input.  To update a single value in the list, an application must call the update function adcUpdateNext().  The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well as the normal A/D conversion time.  Therefore, it takes two calls to adcUpdateNext() to update a single value in the list.  To keep the driver simple and to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function appropriately.",0.405465108,0.348237453,0.005608716,0.090930595,1.098612289,0.260970978,6.740533038,0.953321715,53.04851082,13.18726495,1,10.06705588,0.002312746,0.009559668,0.048567666,0.053464407,0.511687126,4.317488114,0.405465108,0.348237453,0.003926101,0.037601935,1.098612289,0.182444352,-0.892525725,0,74.81253043,21.50486562,1,11.28112072,0.046499665,0.816973141,3.719973206,0.075215278,0.348636254,5.398162702,1
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.005608716,0.033788759,0.405465108,0.117047695,7.695410775,1.777044805,32.64089172,12.29901458,0.993333333,5.632809637,0.004379388,0.023975071,0.052552657,0.051231317,0.375790688,4.317488114,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,1
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.526563023,1.777044805,32.64089172,12.82325187,0.993333333,5.551073866,0.004381992,0.023975071,0.052583903,0.050499797,0.255500342,4.317488114,0.405465108,0.348237453,0.003271751,0.026306905,1.098612289,0.137266171,0.554966603,0,74.81253043,17.61412141,1,10.11015002,0.030263729,0.397826747,2.663208116,0.074037858,0.382757523,4.705015521,1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.004907626,0.07520387,1.098612289,0.257338449,7.056166028,2.22340364,32.64089172,10.10202036,1,4.603981428,0.002765885,0.010990005,0.055317691,0.049515728,0.393331736,5.010635294,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.25571329,3.787279017,53.04851082,14.65867309,1,6.276703919,0.006366043,0.057602602,0.120954824,0.049955134,0.21285459,3.064725145,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0.405465108,0.348237453,0.005353774,0.100502237,1.098612289,0.273235712,9.230519585,3.787279017,53.04851082,14.6692207,1,6.607105318,0.00638708,0.057602602,0.121354529,0.050274944,0.219816827,3.064725145,0.405465108,0.348237453,0.004061484,0.041978866,1.098612289,0.20036722,-1.848699484,0,74.81253043,18.42555164,1,9.345259179,0.044396942,0.816973141,5.505220773,0.076230674,0.320807283,5.398162702,1
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0.405465108,0.348237453,0.005353774,0.079161968,1.098612289,0.263763908,7.273462221,0.853319476,32.64089172,10.78154545,1,5.626958628,0.006138112,0.029924013,0.116624122,0.046228688,0.137979157,2.813410717,0.405465108,0.348237453,0.004206537,0.073335126,1.098612289,0.257557778,2.74345878,0,45.52440007,15.48691545,0.995475113,10.67373391,0.020330691,0.154594115,1.138518682,0.071863811,0.454960265,5.398162702,1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0.405465108,0.348237453,0.005608716,0.095477125,1.098612289,0.266895923,11.92302893,5.954731198,53.04851082,14.12196581,1,4.431832391,0.001779869,0.010990005,0.035597377,0.04897638,0.158969265,1.707418321,0.405465108,0.348237453,0.003799453,0.053085085,1.098612289,0.214767885,0.459522966,0,74.81253043,19.6760892,1,9.483023892,0.033638106,0.408486571,2.859239032,0.081562979,0.181065685,4.299550413,1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.005608716,0.095477125,1.098612289,0.266895923,11.92302893,5.954731198,53.04851082,14.12196581,1,4.431832391,0.001779869,0.010990005,0.035597377,0.04897638,0.158969265,1.707418321,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.005353774,0.033788759,0.405465108,0.117047695,7.461456284,2.868936123,32.64089172,12.6784839,1,5.907999873,0.009105994,0.053974486,0.109271931,0.050209434,0.257623006,4.317488114,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,1
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.292608531,2.868936123,32.64089172,13.20372074,1,5.826264102,0.009108598,0.053974486,0.109303177,0.049477914,0.224360172,4.317488114,0.405465108,0.348237453,0.005121002,0.021340269,0.405465108,0.093020075,2.822829417,0,45.52440007,17.59666427,0.950226244,8.737004859,0.029645013,0.213516211,0.563255251,0.09706176,0.281237722,3.067406732,1
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0.405465108,0.348237453,0.005353774,0.071622733,1.098612289,0.251358785,8.414429736,3.99446136,32.64089172,10.9424916,1,5.586559485,0.002550104,0.015194868,0.053552174,0.047901702,0.250796463,2.931193752,0.405465108,0.348237453,0.004711321,0.065394669,1.098612289,0.237860115,1.548716545,0,45.52440007,16.31466473,1,8.020118866,0.030491421,0.209620593,1.402605344,0.078000366,0.22090605,4.705015521,1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.",Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0.405465108,0.348237453,0.005121002,0.060921253,1.098612289,0.205276456,7.977037935,3.691457513,53.04851082,11.36865599,1,4.824616481,0.002728795,0.019568125,0.103694221,0.050921364,0.259333181,3.218875825,0.405465108,0.348237453,0.004362335,0.047748489,1.098612289,0.204744805,5.041914293,0,74.81253043,19.49084487,1,9.655504051,0.022154657,0.302315065,1.395743385,0.072792093,0.245198415,3.894085305,1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0.405465108,0.348237453,0.005121002,0.060921253,1.098612289,0.205276456,7.977037935,3.691457513,53.04851082,11.36865599,1,4.824616481,0.002728795,0.019568125,0.103694221,0.050921364,0.259333181,3.218875825,0.405465108,0.348237453,0.004362335,0.066455369,1.098612289,0.232663179,1.908291607,0,74.81253043,18.52190193,1,8.319902952,0.030596572,0.302315065,2.264146306,0.075183376,0.384762459,4.01186834,1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0.405465108,0.348237453,0.005121002,0.060921253,1.098612289,0.205276456,7.977037935,3.691457513,53.04851082,11.36865599,1,4.824616481,0.002728795,0.019568125,0.103694221,0.050921364,0.259333181,3.218875825,0.405465108,0.348237453,0.004711321,0.060163096,1.098612289,0.228648287,4.560971539,0,74.81253043,18.51250224,1,6.157980427,0.026375862,0.343912995,1.318793091,0.070991223,0.396304203,3.606403232,1
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0.405465108,0.348237453,0.004907626,0.08974792,1.098612289,0.289378268,6.973196984,4.488803422,32.64089172,9.278893337,1,5.487110806,0.003173258,0.010990005,0.092024469,0.051379392,0.136758369,2.302585093,0.405465108,0.348237453,0.005608716,0.027031007,0.405465108,0.104690641,4.113995673,0,45.52440007,15.75914625,0.945701357,11.01348011,0.024249927,0.18202996,0.363748899,0.070459362,0.108181649,1.750105242,1
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0.405465108,0.348237453,0.004907626,0.08974792,1.098612289,0.289378268,6.973196984,4.488803422,32.64089172,9.278893337,1,5.487110806,0.003173258,0.010990005,0.092024469,0.051379392,0.136758369,2.302585093,0.405465108,0.348237453,0.005353774,0.082678843,1.098612289,0.236388935,6.231469891,0,74.81253043,19.20754757,1,10.3328822,0.015661242,0.126377918,0.438514768,0.078964348,0.104430786,2.453723722,1
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0.405465108,0.348237453,0.005353774,0.07520387,1.098612289,0.257338449,7.049134979,3.566777021,32.64089172,9.921880211,1,6.090554639,0.00342198,0.015194868,0.068439608,0.049073675,0.270352059,3.624340933,0.405465108,0.348237453,0.005121002,0.065846293,1.098612289,0.224405291,3.553418553,0,74.81253043,23.09329772,1,9.909170576,0.037730805,0.264424359,1.094193346,0.071696469,0.231408348,2.453723722,1
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0.405465108,0.348237453,0.005608716,0.125339783,1.098612289,0.320709835,10.55001787,6.936331591,53.04851082,12.67362236,1,6.029942301,0.002307395,0.010990005,0.055377476,0.046732936,0.168928913,2.238046572,0.405465108,0.348237453,0.00368072,0.054474218,1.098612289,0.221743434,0.281547045,0,74.81253043,15.36236212,1,9.359030763,0.030285092,0.230166221,3.119364446,0.083741729,0.195636991,4.705015521,1
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0.405465108,0.348237453,0.005608716,0.125339783,1.098612289,0.320709835,10.55001787,6.936331591,53.04851082,12.67362236,1,6.029942301,0.002307395,0.010990005,0.055377476,0.046732936,0.168928913,2.238046572,0.405465108,0.348237453,0.003926101,0.04065074,1.098612289,0.190773939,4.517708467,0,45.52440007,17.72148871,1,11.29593337,0.024369885,0.343912995,0.901685751,0.067381148,0.438205231,3.31872116,1
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0.405465108,0.348237453,0.004711321,0.095477125,1.098612289,0.266895923,9.212923144,4.143941686,53.04851082,14.22636881,1,6.751080699,0.005826443,0.057602602,0.116528859,0.046944359,0.131450524,2.813410717,0.405465108,0.348237453,0.005353774,0.065394669,1.098612289,0.240547885,3.279385684,0,45.52440007,17.63774149,0.981900452,9.990543906,0.02228054,0.213516211,0.512452409,0.084500822,0.315961455,1.644744726,1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004206537,0.074209128,1.098612289,0.242843435,3.263731231,0,74.81253043,20.27609056,1,8.551340256,0.035277775,0.343912995,1.622777651,0.070248879,0.223882289,4.299550413,1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004061484,0.047753106,1.098612289,0.210141126,1.236131439,0,74.81253043,19.47892004,1,9.9295329,0.023968604,0.408486571,2.06129993,0.07330072,0.402067768,4.705015521,1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.005353774,0.062669892,1.098612289,0.235638868,6.340418486,0,45.52440007,19.45212547,1,9.462791225,0.026341617,0.209620593,0.632198817,0.080118806,0.294212535,2.102325836,1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,Standard I/O InterfaceThe ioctl() entry point controls all interface configuration.  Different commands may be available depending on whether the driver is in NORMAL or TEST mode.  Any other value of the command parameter causes errno to be set to S_dci_IOCTL_UNDEF and ERROR to be returned.,0.405465108,0.348237453,0.005608716,0.083559855,1.098612289,0.270693057,8.064333315,3.735856457,32.64089172,10.02405945,1,5.38563283,0.002546813,0.009301968,0.045842641,0.051223153,0.324441057,3.912023005,0.405465108,0.348237453,0.004711321,0.047738563,1.098612289,0.192460056,4.676421831,0,45.52440007,18.28465901,1,8.458573172,0.024337607,0.172437751,0.973504269,0.069581509,0.286641821,4.01186834,1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,6.292384479,2.533290019,32.64089172,10.50682596,0.993333333,8.083735047,0.001831371,0.008159725,0.031133302,0.048725792,0.335314831,2.708050201,0.405465108,0.348237453,0.004907626,0.028932462,1.098612289,0.150920514,3.14191398,0,74.81253043,18.50437507,1,8.550205279,0.028540751,0.300261847,1.883689578,0.073227756,0.204416649,4.705015521,1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,6.292384479,2.533290019,32.64089172,10.50682596,0.993333333,8.083735047,0.001831371,0.008159725,0.031133302,0.048725792,0.335314831,2.708050201,0.405465108,0.348237453,0.003799453,0.024799253,1.098612289,0.139943487,2.677258786,0,74.81253043,17.50578329,1,8.199513972,0.027056583,0.302315065,2.083356882,0.065760866,0.25469307,3.788724789,1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,6.292384479,2.533290019,32.64089172,10.50682596,0.993333333,8.083735047,0.001831371,0.008159725,0.031133302,0.048725792,0.335314831,2.708050201,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,3.466081963,0,45.52440007,16.4886598,1,8.914473774,0.019956643,0.14669148,0.838179023,0.078109515,0.229655986,3.200938124,1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0.405465108,0.348237453,0.005121002,0.023850889,0.405465108,0.098339733,6.292384479,2.533290019,32.64089172,10.50682596,0.993333333,8.083735047,0.001831371,0.008159725,0.031133302,0.048725792,0.335314831,2.708050201,0.405465108,0.348237453,0.004061484,0.098092004,1.098612289,0.285635309,5.403258337,0,74.81253043,18.52624464,1,11.55892392,0.018506196,0.127737207,0.851285013,0.079341269,0.175214743,4.705015521,1
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0.405465108,0.348237453,0.006543502,0.033788759,0.405465108,0.117047695,8.939615348,3.275789059,32.64089172,12.77609001,0.993333333,6.657233305,0.0064915,0.0592439,0.077898004,0.051128962,0.134897391,1.919592841,0.405465108,0.348237453,0.004206537,0.066847884,1.098612289,0.240341284,2.400373963,0,45.52440007,16.49367796,1,7.933306677,0.023335031,0.130484201,1.050076394,0.081980488,0.208630436,4.705015521,1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.108463101,3.985492462,32.64089172,12.28036993,0.993333333,6.738969076,0.006488897,0.0592439,0.077866758,0.05178733,0.214363223,1.919592841,0.405465108,0.348237453,0.005121002,0.068367154,1.098612289,0.245775878,4.499693367,0,45.52440007,19.30942052,0.977375566,8.173609093,0.031237352,0.264424359,0.687221754,0.058518993,0.243853019,2.453723722,1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.108463101,3.985492462,32.64089172,12.28036993,0.993333333,6.738969076,0.006488897,0.0592439,0.077866758,0.05178733,0.214363223,1.919592841,0.405465108,0.348237453,0.004362335,0.045465298,1.098612289,0.187989034,3.466081963,0,45.52440007,16.4886598,1,8.914473774,0.019956643,0.14669148,0.838179023,0.078109515,0.229655986,3.200938124,1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.108463101,3.985492462,32.64089172,12.28036993,0.993333333,6.738969076,0.006488897,0.0592439,0.077866758,0.05178733,0.214363223,1.919592841,0.405465108,0.348237453,0.004061484,0.098092004,1.098612289,0.285635309,5.403258337,0,74.81253043,18.52624464,1,11.55892392,0.018506196,0.127737207,0.851285013,0.079341269,0.175214743,4.705015521,1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,0.405465108,0.348237453,0.005889152,0.033788759,0.405465108,0.117047695,8.108463101,3.985492462,32.64089172,12.28036993,0.993333333,6.738969076,0.006488897,0.0592439,0.077866758,0.05178733,0.214363223,1.919592841,0.405465108,0.348237453,0.004206537,0.019307862,0.405465108,0.087394058,2.75410564,0,74.81253043,20.37817953,1,9.75653354,0.034457855,0.213516211,1.447229898,0.082302213,0.201130782,3.200938124,1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,9.249994413,3.03839723,32.64089172,12.42516987,0.993333333,5.671865421,0.002461656,0.008159725,0.029539877,0.049495618,0.206292313,4.317488114,0.405465108,0.348237453,0.004061484,0.04423757,1.098612289,0.197356726,1.574788999,0,74.81253043,16.71154072,1,11.09485685,0.023968899,0.300103203,1.629885123,0.078071497,0.248139055,4.299550413,1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,9.249994413,3.03839723,32.64089172,12.42516987,0.993333333,5.671865421,0.002461656,0.008159725,0.029539877,0.049495618,0.206292313,4.317488114,0.405465108,0.348237453,0.004530117,0.07520387,1.098612289,0.254017814,3.649611865,0,74.81253043,22.8226348,1,7.504243883,0.033962721,0.198913373,1.358508829,0.076142374,0.305210352,5.398162702,1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0.405465108,0.348237453,0.006199107,0.033788759,0.405465108,0.117047695,9.249994413,3.03839723,32.64089172,12.42516987,0.993333333,5.671865421,0.002461656,0.008159725,0.029539877,0.049495618,0.206292313,4.317488114,0.405465108,0.348237453,0.004206537,0.066847884,1.098612289,0.240341284,2.400373963,0,45.52440007,16.49367796,1,7.933306677,0.023335031,0.130484201,1.050076394,0.081980488,0.208630436,4.705015521,1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.715744386,3.787279017,32.64089172,10.09799196,1,5.507022829,0.003081444,0.012582414,0.052384547,0.046477716,0.090200573,1.347073648,0.405465108,0.348237453,0.004362335,0.038970255,1.098612289,0.174483614,3.252741226,0,74.81253043,19.10945485,1,9.952247635,0.02604577,0.234640863,1.276242729,0.066564423,0.276534994,4.705015521,1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Bootstrap CSCThe Bootstrap CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects. The Bootstrap for the Company X DPU will be nearly identical to that used on the INSTRUMENT Y CIDP and SCU, with the exception of minor hardware interface differences:* The interface to the hardware watchdog timer is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The interface to the mission elapsed time (MET) clock is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The INSTRUMENT Y bootstrap was able to discern a cold (power-on) boot from a warm (watchdog reset) boot by examining the value of the MET clock, which did not reset to zero on a warm boot.  The Company X DPU MET clock resets to zero on both a cold and warm boot, and so there is no distinction in the Company X bootstrap.",0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.715744386,3.787279017,32.64089172,10.09799196,1,5.507022829,0.003081444,0.012582414,0.052384547,0.046477716,0.090200573,1.347073648,0.405465108,0.348237453,0.003569183,0.048962628,1.098612289,0.19354899,3.20552507,0,74.81253043,17.42321279,1,7.991451063,0.024649542,0.343912995,1.922664292,0.069664178,0.152887232,4.705015521,1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0.405465108,0.348237453,0.005353774,0.088475141,1.098612289,0.27819479,7.715744386,3.787279017,32.64089172,10.09799196,1,5.507022829,0.003081444,0.012582414,0.052384547,0.046477716,0.090200573,1.347073648,0.405465108,0.348237453,0.005608716,0.073720929,0.405465108,0.164018712,8.512207281,0,74.81253043,30.39869421,1,10.47574483,0.035507546,0.161058499,0.390583008,0.066691547,0.09771673,0.36772478,1
