"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  If commanded, during the collection of event data, the DPU-DPA shall produce PROD_ACS_MSG.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.",Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",1
  The DPU-CCM shall provide a command to resend DPU_HK_START.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
  The text segment and IVT of the DPU-RTOS shall be write-protected.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
"  The DPU-ADC CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",1
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send a Purge Science Queue command from the ICU to the DPA software. The Purge Science Queue command shall be used to command the DPU to delete all data currently in the science telemetry output queue (i.e., data pending transmission to the spacecraft).",1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",1
  The DPU-CCM shall forward the DPU_HBEAT message to DPU-ICUI for transmission to the ICU at an interval of A seconds.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400-01, Company X Specification for the Company X Communication/Memory Module.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,1
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",1
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
"The DPU-BOOT CSC shall periodically strobe the PSM Watchdog Timer at B second intervals (+/- 1/2 second) by writing 0xEB90 to the Watchdog Clear Register, SCM_WDR.  The Bootstrap CSC shall continue the strobe during transition of control from the Bootstrap to the Operating System.",HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",1
 The DPU-CCM shall provide a command to reboot the DPU.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",1
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,1
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
  The DPU-BOOT CSC shall enable power to the EEPROM on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-CCM shall have the capability of calculating a CHKS_32 for a particular address range on command.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",1
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",1
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",1
  The DPU-BIT shall use the EEPROM Driver CSC when reading from and writing to the EEPROM.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
 The DPU-TMALI shall use DPU-DCI to communicate with the DCI Interface.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
  The DPU-DCI shall provide the capability for an application program to arm the ping-pong buffer for swap.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful."," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
  The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,1
 The DPU-SCUI shall buffer an amount of data specified by the SCU_BUFFER_SIZE parameter provided during initialization.  The default buffer size will be set to X MB of data.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU-CCM shall provide a command to resend DPU_HK_START.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-CCM shall provide a command to reboot the DPU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test."," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",1
  The DPU-ICUI shall forward real-time commands to DPU-CCM within 500 milliseconds of receipt from the ICU.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
 The DPU-EDAC shall install an ISR to be invoked when an SBE occurs and scrub the location containing the SBE.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"  The DPU-DCI shall provide an application program with the ability to read the current hardware status, including the Data Level Trigger, the Data Timeout Trigger, the DCI Event Mode, and the Normal/Test Mode.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  On failure to obtain an acceptable tracking solution, the DPU-DPA shall apply the most recent tracking solution and report an error to DPU-CCM.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
 The DPU-CCM shall provide a command to reboot the DPU.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",1
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
 The DPU-CCM shall provide a command to reboot the DPU.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the SSI Error Interrupt.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
 The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,1
  The DPU-DPA shall provide a event mode window per exposure.  The size of the window shall be commandable.  The event mode exposure time shall be commandable.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
 The DPU-SCUI  shall provide the capability for data producing applications to specify whether or not queued data may be segmented.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-BOOT CSC shall enable power to the EEPROM on the SCM.,"Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
  The DPU-CCM shall have the capability of calculating a CHKS_32 for a particular address range on command.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.",Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400-01, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-TIS shall read from the SCM registers in B-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
 The DPU-SCUI  shall provide the capability for data producing applications to specify whether or not queued data may be segmented.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
 The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  The DPU-DCI shall provide an application program with a function to read the contents of the ping/pong buffer.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
  The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
  The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
"  The DPU-SSI shall provide an operational mode (Tx MESSAGE MODE) for transmitting blocks in which consecutive words in a block are transmitted,  and the transmitter is disabled until a transmit IBG interrupt is received.  At this point the transmitter is re-enabled, and the next message can be transmitted.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
 The DPU-DCI shall provide access to the DCI status register so that an application program can determine error type.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
  The DPU-BIT shall report BIT_HK on request.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
 The DPU-BOOT CSC shall boot the primary or alternate configuration of DPU-RTOS according to the BC_INDEX in the SYSTEM_BLOCK.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers The RSC processor also generates an external interrupt for the Power Fail Interrupt.  The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt.  Some custom routines must be provided to access this interrupt. These functions are described below, and are contained in sysLibSup.c.",1
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  If commanded, during the collection of event data, the DPU-DPA shall produce PROD_ACS_MSG.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  This DPU-TIS shall provide the capability for an application program to enable and disable automatic time synchronization.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
  The DPU-EDAC shall record the number of SBEs that have been detected in PROM and EEPROM since boot and the address of the last two SBEs.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-DPA shall perform bounds checking before accessing memory.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-BIT shall report BIT_HK on request.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,1
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",1
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",1
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis function returns the next EVENT in the queue to the caller.  The caller should store the value returned by this function in a variable defined locally within the scope of the function from which it is called.  If the return value is stored as described above, the EVENT value is stored in a RAD6000 register rather than memory.  Processing is therefore much faster since register accesses on the RAD6000 are much faster than memory accesses.A compilation option TMALI_NOCHECKS is provided for the disabling of buffer empty checks. This results in slightly faster code but should only be used when the application using this function is known to make proper calls to the function.  If the TMALI module is compiled with the TMALI_NOCHECKS option an improper call to the tmaliNextEvent function (calling it when no data is available in the TMALI buffer) will compromise the TMALI buffer data structure.The queue structure and the related pointers are described in the local tmaliP.h header file. As only the write pointer (pOut) is manipulated here and the operations on the 32 bit pointers themselves are 'atomic' no mutual exclusion problem can occur.  ",1
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
The DPU-EDAC shall record the number of SBEs that have been detected in DRAM since boot and the address of the last two SBEs.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
"  The DPU-ADC shall provide an application program with a function to perform an alternating read/setup-start sequence which will read the A/D result setup on the last call store the result into the scan list, and setup the conversion for the next item in the scan list; then on the next call start the conversion which was setup during the last call.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
  The DPU-EDAC shall record the number of MBEs that have been detected in PROM and EEPROM since boot and the address of the last two MBEs.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",1
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-TIS shall read from the SCM registers in B-bit words only.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,1
  The DPU-ADC shall provide an application program with the capability to read the current values of the SCM_ADC_MUX and SCM_ADC_DAT registers.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware.  The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers.   The driver features a standard I/O interface which utilizes an extended ioctl() command set to support unique SSI hardware attributes.  This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the newer Tornado driver architecture. ,1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",1
  The DPU compression software shall forward compressed data  to DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
The DPU-BOOT CSC X shall occupy no more than 32 KB of PROM.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",1
"  The DPU-TIS shall provide the capability for an application program to jam the value of the SC_TIME into the hardware, if automatic time synchronization is disabled.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
 The DPU-BIT shall complete the BIT within A seconds.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
"The DPU-BOOT CSC shall periodically strobe the PSM Watchdog Timer at B second intervals (+/- 1/2 second) by writing 0xEB90 to the Watchdog Clear Register, SCM_WDR.  The Bootstrap CSC shall continue the strobe during transition of control from the Bootstrap to the Operating System.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU-DCI shall provide the capability for an application program to set the Address Limit at which the hardware will swap ping-pong buffers.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
 The DPU-SCUI  shall provide SCUI_HK to the DPU-CCM on request.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
 The DPU-ICUI shall provide ICUI_HK to the DPU-CCM on request.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
 The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.",Event ProcessingThe Event Processor Task is also responsible for creating the Finding Chart.  The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y.  The parameterized finding chart will be created by listing the X & Y detector location of each star along with a CxC pixel matrix around the star location of the intensities. The Event Processor Task will create the necessary housekeeping for the DPA.,1
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-DCI shall provide access to the DCI status register so that an application program can determine error type.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as an bit XOR.,1
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",1
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
" The DPU-CCM shall include the capability to read data from DRAM, the VME Bus, and the IOCC on ground command.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.",Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",1
  The DPU-BOOT CSC shall increment the BOOT_CNT parameter in the EEPROM each time the DPU-RTOS is copied from EEPROM to DRAM and executed.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Bootstrap CSCThe Bootstrap CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects. The Bootstrap for the Company X DPU will be nearly identical to that used on the INSTRUMENT Y CIDP and SCU, with the exception of minor hardware interface differences:* The interface to the hardware watchdog timer is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The interface to the mission elapsed time (MET) clock is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The INSTRUMENT Y bootstrap was able to discern a cold (power-on) boot from a warm (watchdog reset) boot by examining the value of the MET clock, which did not reset to zero on a warm boot.  The Company X DPU MET clock resets to zero on both a cold and warm boot, and so there is no distinction in the Company X bootstrap.",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
"  The DPU-ADC shall provide an application program with a function to perform an alternating read/setup-start sequence which will read the A/D result setup on the last call store the result into the scan list, and setup the conversion for the next item in the scan list; then on the next call start the conversion which was setup during the last call.","Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0
 The DPU-SSI shall provide an application program with the capability to read the SSI status register.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
"  The DPU-SSI shall provide an operational mode (Tx MESSAGE MODE) for transmitting blocks in which consecutive words in a block are transmitted,  and the transmitter is disabled until a transmit IBG interrupt is received.  At this point the transmitter is re-enabled, and the next message can be transmitted.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.",Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-DCI shall provide the capability for an application program to arm the ping-pong buffer for swap.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
"The DPU-BOOT CSC shall periodically strobe the PSM Watchdog Timer at B second intervals (+/- 1/2 second) by writing 0xEB90 to the Watchdog Clear Register, SCM_WDR.  The Bootstrap CSC shall continue the strobe during transition of control from the Bootstrap to the Operating System."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
The DPU-EDAC shall record the number of SBEs that have been detected in DRAM since boot and the address of the last two SBEs.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine sets the value of the RTC Registers,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",1
 The DPU-SCUI  shall provide the capability for data producing applications to specify whether or not queued data may be segmented.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
 The DPU-TMALI shall use DPU-DCI to communicate with the DCI Interface.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
"  The DPU-ADC CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-ADC shall read from the SCM registers in B-bit words only.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
  The DPU-DCI shall provide an application program with the ability to configure the SCM_DCI_WIN parameters.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
"  The Bootstrap Monitor of DPU-BOOT CSC shall be activated if the Clear-To-Send (CTS) signal is active on the RS-232 interface.   If no activity is detected on the RS-232 interface within 30 seconds, the Bootstrap shall load a configuration of DPU-RTOS according to BC_INDEX in the SYSTEM_BLOCK.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",1
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the Timeout Interrupt Condition (INTTO_EN).," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
"  The DPU-EDAC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module, and document IBM-FAULT-MGMT, RSC System: Fault Handling and Storage Management.","Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
  The DPU-DCI shall provide an application program with a function to read the contents of the ping/pong buffer.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",1
 The DPU-EDAC shall record the current contents of EDAC_HK to EEPROM and force a DPU watchdog in the event an MBE in DRAM is detected.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0
  The DPU-DCI shall provide an application program with the ability to configure the SCM_DCI_WIN parameters.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,Standard I/O InterfaceThe ioctl() entry point controls all interface configuration.  Different commands may be available depending on whether the driver is in NORMAL or TEST mode.  Any other value of the command parameter causes errno to be set to S_dci_IOCTL_UNDEF and ERROR to be returned.,1
"  In image mode, the DPU-DPA shall calculate the memory location to increment for each valid detector event received.  The memory location shall be incremented for each valid event.  Each memory location shall be able to count so many events.  An Image mode exposure shall produce a PROD_IMAGE.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
  The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",1
  The DPU-CCM shall have the capability of calculating a CHKS_32 for a particular address range on command.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  If commanded, during the collection of event data, the DPU-DPA shall produce PROD_ACS_MSG.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
 The DPU-BOOT CSC shall set the processor speed  to MHz.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-BOOT CSC shall enable power to the EEPROM on the SCM.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Standard I/O InterfaceSSI ioctl() commands.,1
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
  The DPU-SSI shall provide the capability for an application program to independently mask/unmask each of the SSI Interrupt Conditions using the SCM_SSI_CSR.,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,1
  The image mode shall consist of a science window.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",1
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,InitializationThe SSI Driver CSC is initialized by calling the function ssiDrv() from the startup task usrRoot().,1
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
  The DPU-EDAC shall record the number of MBEs that have been detected in PROM and EEPROM since boot and the address of the last two MBEs.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.",Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121.",Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU compression software shall forward compressed data  to DPU-SCUI.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",1
  The DPU-DCI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the DCI Interface.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.","Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
The DPU-BOOT CSC shall execute when power is applied to the DPU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",1
 The DPU-SCUI shall buffer an amount of data specified by the SCU_BUFFER_SIZE parameter provided during initialization.  The default buffer size will be set to X MB of data.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-ADC shall provide an application program with the capability to read the most recent A/D results in the scan list.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-DPA shall initiate reaction/response to a command from the DPU-CCM with a latency of no greater than 10 ms.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of the x analog inputs, and the current value (ADC_VALUE) of each analog input.  To update a single value in the list, an application must call the update function adcUpdateNext().  The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well as the normal A/D conversion time.  Therefore, it takes two calls to adcUpdateNext() to update a single value in the list.  To keep the driver simple and to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function appropriately.",1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The image mode shall consist of a science window.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"   The DPU-CCM shall include the capability to write data to DRAM, the VME Bus, and the Input/Output Channel Controller (IOCC) on ground command.","types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,1
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
  The DPU-ADC shall provide an application program with the capability to read the most recent A/D results in the scan list.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-CCM shall implement a mechanism whereby large memory loads and dumps can be accomplished incrementally.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",1
  The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-DPA shall provide a event mode window per exposure.  The size of the window shall be commandable.  The event mode exposure time shall be commandable.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-DPA shall use the first tracking image accumulated after entering Image mode to locate guide stars using the algorithm described in Appendix C.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",1
  The DPU-BIT shall report BIT_HK on request.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
  The DPU-SSI shall provide the capability for an application program to reset the SSI by writing to the SSI Reset Register.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
"  The Bootstrap Monitor of DPU-BOOT CSC shall be activated if the Clear-To-Send (CTS) signal is active on the RS-232 interface.   If no activity is detected on the RS-232 interface within 30 seconds, the Bootstrap shall load a configuration of DPU-RTOS according to BC_INDEX in the SYSTEM_BLOCK.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the Timeout Interrupt Condition (INTTO_EN).,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,1
  The DPU-ICUI shall forward real-time commands to DPU-CCM within 500 milliseconds of receipt from the ICU.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",1
"  The Bootstrap Monitor of DPU-BOOT CSC shall be activated if the Clear-To-Send (CTS) signal is active on the RS-232 interface.   If no activity is detected on the RS-232 interface within 30 seconds, the Bootstrap shall load a configuration of DPU-RTOS according to BC_INDEX in the SYSTEM_BLOCK.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The image mode shall consist of a science window.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,1
"  The DPU-SSI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",1
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-DCI shall provide an application program with the ability to force a ping-pong buffer swap when the interface is in Test Mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
"  The DPU-SSI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-DPA shall be capable of providing DPA_HK on request.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,1
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",1
  The text segment and IVT of the DPU-RTOS shall be write-protected.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",1
  The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,1
"  The DPU-SSI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
  The DPU-CCM shall have the capability of calculating a CHKS_32 for a particular address range on command.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels."," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsWhen no data is available in the TMALI queue this routine blocks on a semaphore awaiting availability of events on the TMALI queue as indicated by the ISR.  When data is already available on the TMALI queue, or the semaphore is taken, the number of events on the TMALI queue is determined and returned to the caller.  The parameter TickstoWait specifies the maximum time which the function can wait until data becomes available in kernel-ticks.  The parameter may be set to a symbolic value FOREVER which causes the function only to return when data is available.  When the function is called with a timeout value and no data becomes avialable within that period the function will return zero (events available).If the tmali task has not been initialized the function returns an error.",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",1
  The DPU-BIT shall use the 1553 Driver CSC to perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BOOT CSC shall enable power to the EEPROM on the SCM.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
 The DPU-TIS  shall provide TIS_HK to the DPU-CCM on request.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",1
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The image mode shall consist of a science window.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",1
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-DCI shall provide an application program with the ability to force a ping-pong buffer swap when the interface is in Test Mode.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,1
  The DPU-ADC shall provide an application program with the capability to read the current values of the SCM_ADC_MUX and SCM_ADC_DAT registers.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
 The DPU-DCI shall provide access to the DCI status register so that an application program can determine error type.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",1
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,1
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-CCM shall forward the DPU_HBEAT message to DPU-ICUI for transmission to the ICU at an interval of A seconds.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  In image mode, the DPU-DPA shall calculate the memory location to increment for each valid detector event received.  The memory location shall be incremented for each valid event.  Each memory location shall be able to count so many events.  An Image mode exposure shall produce a PROD_IMAGE.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-DPA shall use the first tracking image accumulated after entering Image mode to locate guide stars using the algorithm described in Appendix C.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The DPU-ADC shall provide an application program with the capability to read the current values of the SCM_ADC_MUX and SCM_ADC_DAT registers.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
  The DPU-DPA shall initiate reaction/response to a command from the DPU-CCM with a latency of no greater than 10 ms.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-CCM shall provide a command to resend DPU_HK_START.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
  The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
  This DPU-TIS shall provide the capability for an application program to enable and disable automatic time synchronization.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,1
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,1
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",1
 The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",1
"  The DPU-ADC shall provide an application program with a function to perform an alternating read/setup-start sequence which will read the A/D result setup on the last call store the result into the scan list, and setup the conversion for the next item in the scan list; then on the next call start the conversion which was setup during the last call.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
 The DPU-DPA shall perform bounds checking before accessing memory.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
  The DPU-ICUI shall forward real-time commands to DPU-CCM within 500 milliseconds of receipt from the ICU.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  The DPU-CCM shall support a NOOP command that does nothing but serve as a valid command.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
 The DPU-BIT shall complete the BIT within A seconds.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU compression software shall forward compressed data  to DPU-SCUI.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-SSI shall read from the SSI registers in 16-bit words only.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
 The DPU-BOOT CSC shall boot the primary or alternate configuration of DPU-RTOS according to the BC_INDEX in the SYSTEM_BLOCK.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  This DPU-TIS shall provide the capability for an application program to enable and disable automatic time synchronization.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
" The DPU-SCUI  shall construct CCSDS Source Packets from Data Packages as defined by CCSDS-102.0-B-4, and in accordance with interface control document 1143-EI-S19121.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Sending Messages to the ICUIn order to send messages to the ICU, the DPU FSW tasks call icuiEnq().  The calling application passes the function code of the message to be sent, as well as a pointer to a data structure containing the message parameters associated with the given function code.  The icuiEnq() function formats the message according to the ICU/DPU ICD using icuiMsgFormat(), and then writes the message to SSI Driver transmitter buffer by calling the driver write() function. A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  A timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.",1
  The DPU-SSI shall provide the capability for an application program to reset the SSI by writing to the SSI Reset Register.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  The DPU-DCI shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
"  The DPU-EDAC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module, and document IBM-FAULT-MGMT, RSC System: Fault Handling and Storage Management.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",1
  The DPU-DCI shall provide the capability for an application program to mask/unmask each of the DCI Interrupt Conditions using the SCM_DCI_CSR.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
 The DPU-CCM shall provide a command to reboot the DPU.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
"  If the DPU-SCUI FIFO is full when DPU-DPA attempts to enqueue its data product, DPU-DPA shall suspend event processing until room is available on the respective FIFO for the current data product.  Incoming data may be dropped while suspended.  An error shall be reported DPU-CCM.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",1
  The DPU-BIT shall test the Programmable Read Only Memory (PROM) by computing a checksum and comparing it to a checksum stored in PROM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
"  The DPU-RTOS shall schedule tasks based on priority, and shall time-slice tasks with the same priority.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
  The DPU-EDAC shall record the number of SBEs that have been detected in PROM and EEPROM since boot and the address of the last two SBEs.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,1
  The DPU-DPA shall use the first tracking image accumulated after entering Image mode to locate guide stars using the algorithm described in Appendix C.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe TMALI CSC is initialized by spawning the tmaliTask() with the startup default parameters.  This task will allocate memory for the TMALI_EVENT_QUEUE, install DCI ISRs, initialize static variables and data structures, and then enter an end-less loop in which it transfers the data from the DCI to the TMALI queue, throttled by the semaphore semDciWait.",1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
 The DPU-BIT shall complete the BIT within A seconds.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
  The DPU-ADC shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
  The DPU-DPA shall provide a event mode window per exposure.  The size of the window shall be commandable.  The event mode exposure time shall be commandable.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
The DPU-BOOT CSC X shall occupy no more than 32 KB of PROM.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,1
"  The DPU-ADC CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,1
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
"DPU-RTOS shall be a real-time, multi-tasking operating system.","Controlling and Monitoring The CCM control task also handles memory dump commands. If a data dump command is executed, the CCM control task breaks the dump into manageable portions and dumps a small portion at a time each time the task wakes up. The purpose of this delay activity is to prevent large dumps from consuming available CPU time by keeping high-priority CCM command scheduling tasks busy for an extended period of time.",0
DPU-DPA shall be able to provide DPA_HK upon request.,"The development platform DPU FSW will be implemented in the ANSI C programming language, using some PowerPC assembly in Bootstrap, and implementing VME data transfer in the DCI driver. The host (development) platform and operating system are Sun/Solaris from Sun Microsystems, Inc. The target platform is a RAD6000 processor with POWER (similar to PowerPC) architecture and executes the VxWorks 5.3.1 real-time operating system. The cross-compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
DPU-TMALI shall be able to provide data from DCI to DPU-DPA. DPU-TMALI will populate the ring buffer with data frames for retrieval by the application task.,"Public Function This function returns the next event in the queue to the caller. The caller should store the value returned by this function in a variable defined locally within the scope of the function that called it. If the return value is stored as described above, the EVENT value will be stored in the RAD6000 register rather than in memory. Therefore, the processing speed is much faster because register access on the RAD6000 is much faster than memory access. Provides the compile option TMALI_NOCHECKS for disabling buffer empty checking. This results in slightly faster code, but should only be used if the application using this function is known to call the function correctly. If the TMALI module is compiled with the TMALI_NOCHECKS option, incorrect calls to the tmaliNextEvent function (which is called when no data is available in the TMALI buffer) will corrupt the TMALI buffer data structure. The queue structure and related pointers are described locally in the tmaliP.h header file. Since only the write pointer (pOut) is operated here, and the operation of the 32-bit pointer itself is &quot;atomic&quot;, no mutual exclusion problems will occur.",1
"When the ICU command enters event mode, the DPU-DPA should be able to collect time-stamped photon events and generate PROD_EVENT.",Boot Monitor The boot monitor checks the syntax and number of parameters of the input command and displays an error message to the RS-232 interface if an invalid command or parameter is entered. A complete list of these messages is given in file 7384-BSPS-01.,0
DPU-EDAC should log the number of SBEs detected in DRAM since startup and the addresses of the last two SBEs.,Real-time clock interface The real-time clock (RTC) register of RAD6000 is a special register that is usually inaccessible to C language programs. Some assembler wrapper functions provide access to these.,0
DPU-BOOT CSC should initialize Error Detection and Correction (EDAC) on RSC by clearing DRAM.,Initializing the DPU-BIT should be initialized every time the DPU is started. The startup task usrRoot() should call bitPart1() before initializing the device driver and bitPart2() after initializing EDAC and the device driver.,1
DPU-TMALI shall provide functionality to set the current event bit ordering mode in the DCI driver.,"Event Handling If the mode command is an instrument Y mode, detector events are spatially filtered to the instrument Y window specified in the mode command and the corresponding pixel in the Ping or Pong buffer is incremented. If specified in the mode command, pixels will be binned by AxA or BxB. Additionally, if specified in the mode command, a trace frame data product will be generated for each Ping/Pong trace frame. Instrument Y and event modes can be commanded simultaneously in the mode command. If the ICU sends an XRT position command, the instrument Y-mode and event mode windows will be resized to match the new window size in the command.",1
DPU-BOOT CSC should test and clear DRAM on power-up using COLD_MEM_SIZE obtained from SYSTEM_BLOCK.,"Instrument Control Unit Interface CSC Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU. ICUI CSC is mainly responsible for implementing the ICU application protocol defined in document DPUICD-01. To achieve these goals, ICUI provides: * ICU interface message sending function icuiEnq(), which provides an API through which other CSCs can send messages to ICU. * ICU interface command reader ISR, icuiCmdReceiveISR(), which receives telecom commands from ICU and forwards them to the command and control task for processing. * ICU interface housekeeping function icuiHkGet(), which collects ICU interface housekeeping data based on requests from command and control tasks.",0
"The DPU-ADC should provide the ability for applications to perform an alternate read/set startup sequence that will read the A/D result settings from the last call, store the results into a scan list, and set up the conversion scan for the next call item in the list; then on the next call the transition set during the previous call is started.","Telescope module access library and interface CSCTMALI CSC consists of the following components: * Queue TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains detector events that have been received from the DCI driver through the data capture interface but have not yet been retrieved by the DPA CSC; * an API , helps DPA CSC retrieve detector events from the queue. The API consists of the tmaliNextEvent() and tmaliWait() functions. * DPA CSC is a set of API functions used to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet( ) and tmaliDataTimeoutGet(). * API housekeeping function tmaliHkGet() collects CSC housekeeping data based on requests from command and control tasks. * Task tmaliTask() and ISR tmaliTransferToQueueISR() work together through semaphores to synchronize data transfer from DCI to the queue. Error handling ISR tmaliDciErrorReportedISR() is installed as a hook routine for the DCI driver to track errors reported by the DCI driver. quantity.",0
DPU-SCUI should timestamp the source packet&#39;s auxiliary header with the current SC_TIME retrieved from the DPU-TIS module.,"Control and Monitoring Each time a CCM control is executed, it calls ccmPerProcess() to handle periodic processing responsibilities. These responsibilities include analog-to-digital conversion updates, DPU task monitoring, ICU heartbeat message generation, and watchdog gating. The ccmHealthChk() function called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task was last reported. Other tasks report their execution status to the CCM control task by calling the function ccmTaskReport() and providing their task index. Each task has an expected execution frequency, and if the task does not execute as expected, an error is reported in the DPU housekeeping. If the command scheduled task fails to report for a long time, the DPU will perform a restart, because if the task is not executed, the DPU cannot be commanded, otherwise the watchdog will be gated",0
DPU-TMALI shall provide functionality to set the current event bit ordering mode in the DCI driver.,"Public Functions This routine provides a way to set the bit arrangement used by DCI. When bSpecialArrangement is TRUE, DCI is set to the special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
"If the SCU fails to read a pending STPDU after a timeout specified based on the value calculated from the SCU_POLL_RATE parameter provided during initialization, the DPU-SCUI shall cancel the write to each subaddress and new data shall be logged to these subaddresses , to DPU-CCM. The SCU_POLL RATE parameter shall have a default setting of J ms and shall be able to be modified dynamically.","Public functions set the polling rate and buffering rate to the given values. If the value is out of range, the previous value is retained and an error is reported. The scuiTask() semaphore timeout (scuiTaskTimeout) automatically adjusts based on the given polling rate, by setting the timeout to approximately the polling rate (not the timeout in clock cycles, so the resolution is lower and only approximates the polling rate) vote rate).",1
DPU-TIS shall provide the application with the ability to select a valid 1PPS signal.,"CPU BIT The CPU BIT consists of a series of tests designed to test each functional unit of the processor. These include tests of branch units, fixed-point units, floating-point units, interrupt units and timer units. Each of these tests consists of executing some selected instructions in that functional unit. As part of branch unit testing, the general purpose register (GPR), segment register (SR), counter register (CTR) and condition register are tested for stuck bits. This is done by writing a pattern of 1 (verified by readback) and then a pattern of 0 (verified by readback).",1
The DPU-1553 CSC shall address the hardware module as defined in Document 1400 (X Company Specification for X Company Communications/Memory Modules).,"Checksum Library Various systems and application software modules require a variety of checksum algorithms. In order to avoid code duplication, various checksum algorithms are encapsulated into checksum libraries.",0
DPU-DCI should only write to DCI memory in B-bit words.,"Public Function This routine formats the given data into a CCSDS remote command packet and writes it to the 1553 bus shared memory for transmission to the SCU. If there is already a message pending in 1553 shared memory, the pending message in 1553 shared memory will be replaced by the new message and an error will be reported.",1
The DPU-SCUI shall notify the SCU of new data using a transfer request counter in accordance with Interface Control Document 1143-EI-S19121.,"Error Collection and Reporting DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), which is used by other FSW tasks to report errors. Every time it wakes up, ccmTask() checks if it&#39;s time to form an error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to the DPU-SCUI for transmission to the ground.",0
The DPU-1553 CSC shall address the hardware module as defined in Document 1400 (X Company Specification for X Company Communications/Memory Modules).,"Memory upload and download processing data can be uploaded to many types of locations, including * DRAM * EEPROM * hardware registers and * EEPROM file systems. ial D_MEM_DAT_UPLD command specifies the target location. If the target is an EEPROM file system, a block number is provided in place of the memory address, which is used by the DPU FSW to formulate a file name of the form eefs1:DPU_blk.##, where ## is the block number. In this case, once the DPU FSW receives all uploaded data, the uploaded data will be written to the file in the EEPROM file system. If a file with that name already exists, it will be overwritten. The EEPROM file system can be reinitialized using the command D_MEM_DISK_INIT.",1
DPU-BOOT The CSC&#39;s boot monitor shall be able to download the DPU-RTOS configuration from the RS-232 interface to the EEPROM on command.,"Telemetry Output to Spacecraft 1553 Bus The SCU is a MIL-STD-1553 Bus Controller (BC) that periodically reads the STPDU contained in the 15 telemetry subaddresses and then writes to the telemetry completion subaddress. When the telemetry completion subaddress is written, scuiTlmDoneISR() is called, which gives a semaphore to wake up scuiTask(). The software provides fault tolerance by automatically waking up after approximately two polling cycles. This timeout is automatically adjusted whenever the SCU polling rate value is changed via a command.",0
DPU-DCI should provide applications with the ability to mask/unmask each DCI interrupt condition using SCM_DCI_CSR.,"Event Handling The event handler task, after receiving the mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a mode ready message, and then receives detector events by calling the functions tmaliWait() and tmaliNextEvent(). The event handler task collects probe events for the time period specified in the pattern command and then issues a pattern completion message to the ICU. After issuing the pattern complete message, the event handler task will enter the idle state.",0
DPU-TMALI should allocate a ring buffer of the size specified by TMALI_BUFFER_SIZE provided during initialization to store incoming data frames. The default buffer size should be 15 MB.,"Public Function This task initializes the TMALI CSC and then proceeds to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer. The availability of data in the DCI Ping-Pong buffer is notified to tmaliTask via a semaphore. This task will never terminate unless a fatal error is detected during initialization. The three specified parameters specify the size of the TMALI queue and the initial parameters of DCI. If the specified value exceeds the allowed range, the default value will be used. The specified QueueSize is the allocated buffer size in 4-byte EVENTS, and the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
The DPU-EDAC should log the number of MBEs detected in the PROM and EEPROM since boot and the addresses of the last two MBEs.,"Control and Monitoring Each time a CCM control is executed, it calls ccmPerProcess() to handle periodic processing responsibilities. These responsibilities include analog-to-digital conversion updates, DPU task monitoring, ICU heartbeat message generation, and watchdog gating. The ccmHealthChk() function called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task was last reported. Other tasks report their execution status to the CCM control task by calling the function ccmTaskReport() and providing their task index. Each task has an expected execution frequency, and if the task does not execute as expected, an error is reported in the DPU housekeeping. If the command scheduled task fails to report for a long time, the DPU will perform a restart, because if the task is not executed, the DPU cannot be commanded, otherwise the watchdog will be gated",0
"If CTS is not set, the DPU-BOOT CSC shall complete the Phase 1 BIT and load the DPU-RTOS in less than A seconds after hardware reset.",Built-in Testing The DPU&#39;s built-in testing (BIT) has two phases. The Stage 1 BIT is included in the bootloader and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. Stage 2 BIT is executed after the operating system starts and is not part of the Bootstrap program.,1
DPU-EDAC should log the number of MBEs detected in DRAM since startup and the addresses of the last two MBEs.,"When error collection and reporting starts, the error queue does not exist because it has not been created yet. Errors that occur in the early stages of error reporting are assigned directly to the global task variable errno. Readers can refer to Section 2.3.7 of the &quot;VxWorks Programmer&#39;s Guide&quot; for more information about errno. If errno is set after the error queue is created, it is queued to the error queue by calling ccmErrEnq().",0
DPU-SCUI should be able to receive remote commands from SCU every N ms and forward them to DPU-CCM for processing.,"Data processing DCX CSC is a task that receives data packets from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data packets to SCUI CSC.",1
DPU-ICUI should use DPU-SSI to communicate with the SSI interface.,"Initializing ICUI CSC is initialized by calling icuiInit(). The icuiInit() function opens the SSI interface port to the ICU, installs the send and receive ISRs, and enables send message mode in the SSI driver CSC. The icuiInit() function is called by the CCM control task at startup.",1
"The DPU-CCM shall, Indiana disdain a command, theme an wrongdoing Indiana DPU_HK indicating the byte-code of the command being turn_down Indiana the LSB of the errno group_A described Indiana 03691-DPUSDP-01.","Error RecoveryExcept for the modification key atomic_number_49 Sections 5.2.3.6, no_more further limiting to the subsist task error-handling mechanisms are required. VxWorks? U.S. a global mechanics for returning status codes when errors occur. This comprise carry_through by utilize the task variable, errno (stored atomic_number_49 the task manipulate block). Most VxWorks? functions return a position value. This value can either atomic_number_4 OK Oregon ERROR. If a affair returns ERROR, then the errno variable must indicate a specific error code.",1
The DPU-CCM shall process real-time non-deferred program_line inside bacillus ms of receipt from the ICU Oregon the SCU.,"dominate HandlingThe DPU swallow mastery via two port from the ballistic_capsule via the MIL-STD-1553 interface, and from the ICU via the SSI interface. any of the DPU mastery toilet constitute ship from the SCU surgery the ICU. The informant for antiophthalmic_factor command from the DPU cost one of the following:* ICU command cost bring_forth and ship away the ICU via the SSI.* SCU command cost bring_forth and ship away the SCU via the 1553.* G-ICU command cost bring_forth along the flat_coat and ship to the DPU via the ICU/SSI.* G-SCU command cost bring_forth along the flat_coat and ship to the DPU via the SCU/1553.",1
The DPU-TMALI shall be up_to of making information available from the DCI to DPU-DPA. DPU-TMALI will live a ring buffer_storage with frames of information for coating task retrieval.,"overtop and control CSCThe overtop and control (CCM) CSC cost a Level two reuse component from the instrumental_role Y project. The overtop and control CSC admit the followers components:* A control Task, ccmCtrlTask(), which format the DPU FSW and spawn other task At bootup, schedules the yield of DPU housekeeping data_point packets, supervise the execution of other tasks, and schedules the execution of other periodic task such as the heartbeat message and the watchdog strobe; and* A overtop Dispatch Task, ccmCmdTask(), which receives and send_off real-time overtop standard from the SCU OR the ICU.Major data_point construction include:* A Static data_point board that go_along running of the operable state. data_point included inward this board admit housekeeping yield rates, CCM particular flags, and the add_up of overtop executed.* A overtop Queue into which overtop make_up station when they arrive, via interrupt, from the intensive_care_unit OR the SCU.* AN Error/Event Queue which pile_up computer_error and issue befool which make_up describe by the DPU FSW. These computer_error and issue befool make_up absent from the line_up and station into a telemetry packet At a given musical_interval and included inward DPU housekeeping data.DPUSDS5.12.1.1.1Flight software_system InitializationThe overtop and control CSC cost initialized by spawning the CCM control Task, ccmCtrlTask(), from the operating system_of_rules startup task, usrRoot(). After the task cost engender IT predict a function, ccmInit(), which creates the error/event queue, instantiate needed semaphore and installs versatile ISRs. Finally, IT spawn the remaining task which comprise the DPU FSW. When the CCM control undertaking depart up, IT understand DPU conformation startup defaults from the SYSTEM_CONFIG_AREA inward EEPROM. If the SYSTEM_CONFIG_AREA checksum cost bad, hard-coded defaults make_up used. The CCM control undertaking format the remaining CSCs by call the applicable initialization function, OR if the CSC own an colligate task, by spawning the task using the VxWorks function, taskSpawn(). When the CCM control undertaking format a CSC, IT turn_over the startup defaults record from EEPROM as parameters to the task initialization function. Hoosier_State add-on to IT task initialization activities, ccmInit(), also format the command distance check board by call ccmCmdLengthInit(). The command central_processor usage the created board to verify gestate command distance for newly standard commands.",0
The DPU-DCI shall put_up the potentiality for Associate_in_Nursing application program to fit the Address Limit at which the hardware will swap ping-pong buffers.,Hardware InterfacesThe SSI device_driver CSC accesses each of the registers on the troupe X communications module exploitation D16 VME access.,0
The DPU-RTOS shall provide a function to allow an lotion programme to write to the real-time time record on the RAD6000SC CPU Module.,real-time Clock InterfaceThe real-time Clock (RTC) read of the RAD6000 are special-purpose register not normally accessible to C language programs. just_about assembler wrapper functions ply access to these.,1
"The DPU-SCUI shall construct CCSDS rootage Packets from datum Packages as defined aside CCSDS-102.0-B-4, and in accordance_of_rights with interface ensure document 1143-EI-S19121.","information Processing algorithm CSCThe DPA CSC admit the watch components:* event Processor undertaking communicates with the ICU, make event lean data products, make Tracking Instrument yttrium in the Ping/Pong buffers, make the Finding Chart, performs the Engineering Modes, generates housekeeping data, make the event Frame, Ping and Pong buffers, and bring_home_the_bacon a task heartbeat to the CCM task.",0
"At the stop of a download, the Bootstrap monitor_lizard of the DPU-BOOT CSC shall compute a CHKS_32 along the X store in EEPROM and comparability information_technology against the CHKS_32 sent with the X during the transfer. The Bootstrap monitor_lizard shall turnout to to the RS-232 interface both CHKS_32s and a message argue whether the download exist successful.","checksum Library This function performs a checksum on a specified memory range. The checksum is performed as an 8-bit additive checksum, but the accumulated note_value is hive_away atomic_number_49 a 16-bit variable.",1
The DPU-ICUI shall utilisation DPU-SSI to pass_along with the SSI Interface.,"instruction and Control CSCThe instruction and Control (CCM) CSC be a unwavering 2 reprocess component from the instrumental_role Y project. The instruction and Control CSC let_in the abide_by components:* antiophthalmic_factor Control Task, ccmCtrlTask(), which initializes the DPU FSW and engender early chore at bootup, schedule the production of DPU housework information packets, monitors the execution of early tasks, and schedule the execution of early occasional chore such a the heartbeat content and the watchdog strobe; and* antiophthalmic_factor instruction communique Task, ccmCmdTask(), which experience and expedition real-time commands have from the SCU operating_theatre the ICU.Major information complex_body_part include:* antiophthalmic_factor Static Data table that sustain cart_track of the operational state. Data included IN this table let_in housework production rates, CCM specific flags, and the list of commands executed.* antiophthalmic_factor instruction queue into which commands personify placed when they arrive, via interrupt, from the ICU operating_theatre the SCU.* AN Error/Event queue which collect error and event razz which personify cover by the DPU FSW. These error and event razz personify removed from the queue and placed into a telemetry packet at a given interval and included IN DPU housework data.DPUSDS5.12.1.1.1Flight Software InitializationThe instruction and Control CSC be initialize by spawn the CCM Control Task, ccmCtrlTask(), from the control system_of_rules startup task, usrRoot(). afterwards the labor be engender IT call_in a function, ccmInit(), which creates the error/event queue, instantiate needed semaphore and set_up various ISRs. Finally, IT engender the odd chore which comprise the DPU FSW. When the CCM Control task set_out up, IT register DPU configuration startup default_on from the SYSTEM_CONFIG_AREA IN EEPROM. If the SYSTEM_CONFIG_AREA checksum be bad, hard-coded default_on personify used. The CCM Control task initializes the odd CSCs by calling the applicable initialization function, operating_theatre if the CSC hold AN associate task, by spawn the labor practice the VxWorks function, taskSpawn(). When the CCM Control task initializes a CSC, IT passes the startup default_on scan from EEPROM a parameters to the labor initialization function. inward accession to its labor initialization activities, ccmInit(), too initializes the command distance verification table by calling ccmCmdLengthInit(). The command processor manipulation the created table to verify bear command lengths for new have commands.",0
The DPU-SSI shall cater the capability for an application to determine the number of bytes Indiana angstrom_unit message experience from the ICU.,"Public FunctionsThis bit initialise the user_interface to the ICU. This bit opens SSI Driver port, installs the SSI user_interface cut_off callbacks, and enables convey Message Mode inward the SSI Driver.",0
The DPU-DCI shall pen to the DCI Registers in C-bit speech only,"data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(), into the DCI driver which is call_down when:* the DCI port arrive_at the programmed frame define in the Ping-Pong buffer, or* the DCI port detects a data receipt timeout.",0
The DPU-CCM shall utilise bootup default esteem stored in the SYSTEM_CONFIG_AREA in EEPROM when initialize the FSW,"initial boot sequencethe initial boot sequence, identify as Boot succession 1. This processing call_for topographic_point when the Bootstrap put_to_death from Programmable Read-Only retentivity (PROM). Boot succession I is write in_the_first_place of quatern step as follows.First, in this sequence, EEPROM is updated. Then, CPU BIT and a percentage of drachma BIT is performed. Next, drachma is cleared. Lastly, Boot succession 2 is copy to drachma and executed. During this sequence, the rest of drachma is quiz if skipBit is non set. Load parameter are put into registers r13, r14, r15 and r16. drachma is brighten astir to memSize. Lastly, either the DPU-RTOS OR the Bootstrap Monitor is loaded and fulfil according to the load parameters.",0
"If commanded, during the compendium of event data, the DPU-DPA shall grow PROD_ACS_MSG.","inbuilt quiz CSCThe inbuilt quiz (BIT) CSC is a point 2 reprocess portion from the SSFF and official_document y projects. The elaborated design of the minute CSC follows. The inbuilt try CSC, describe DPU-BIT, performs the phase 2 inbuilt try (BIT). The phase 2 minute let_in a mental_test of the SCM EDAC circuit, a checksum mental_test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory mental_test of the DCI information Buffers. The resultant of the minute are recorded Hoosier_State the SYS_CNFG_AREA Hoosier_State EEPROM and are also maintained Hoosier_State DRAM. If an error occurs Hoosier_State one of the functions perform the BIT, the mental_test solvent will cost cover adenine a failure Hoosier_State the mental_test itself.",0
"The DPU-RTOS shall exclude failed drachm from the system retentiveness consortium based on the depicted_object of the BIT_DRAM results in the SYSTEM_BLOCK. The system retentiveness table does not include the Interrupt Vector Table (IVT), nor the text_edition and data segment.",real-time Clock InterfaceThe real-time Clock (RTC) Registers of the RAD6000 follow special-purpose registers non normally accessible to C language programs. Some assembler wrapper social_occasion provide access to these.,0
The DPU-TMALI shall configure the ping-pong frame restrict at startup as set_apart by TMALI_PP_LIMIT provided during initialization. The default_option value shall be M frames and shall be capable of equal modified dynamically.,"public FunctionsThis function gets the frame astuteness of the table_tennis buffers used away the DCI CSC. The frame astuteness settle how many framing constitute read into the selected table_tennis buffer before interrupting. The initial value for the frame astuteness localise embody make_up_one's_mind away the parameter put_up when stating the tmaliTask. The returned value embody the current dynamic value, this may differ from the go command value as the command value only takes result when data embody transferred from the hardware table_tennis buffer to the TMALI waiting_line (in reaction to type_A frame or timeout interrupt, see section 5.13.2.3).",1
The DPU-CCM shall provide type_A program_line to resend DPU_HK_START.,"initial boot sequencethe initial boot sequence, key_out as reboot Sequence 1. This processing acquire station when the bootstrap executes from Programmable Read-Only Memory (PROM). reboot Sequence i is write primarily of iv steps as follows.First, In this sequence, EEPROM is updated. Then, CPU BIT and adenine portion of DRAM BIT is performed. Next, DRAM is cleared. Lastly, reboot Sequence ii is copied to DRAM and executed. During this sequence, the quietus of DRAM is time-tested if skipBit is non set. Load parameters are assign into registers r13, r14, r15 and r16. DRAM is cleared improving to memSize. Lastly, either the DPU-RTOS surgery the bootstrap admonisher is loaded and carry_out harmonise to the load parameters.",0
"The DPU-ICUI shall install Associate_in_Nursing ISR to glucinium invoked on the SSI receiver interblock disruption interrupt, for the receiving and processing of command from the ICU.","Receiving bidding from the ICUThe interface to the intensive_care_unit equal via a synchronous serial interface (SSI) bus, which utilize Associate_in_Nursing inter-block gap (IBG) to represented staring messages from one another. The DPU ironware create Associate_in_Nursing interrupt when IT observe Associate_in_Nursing IBG, and the SSI Driver provides a mechanism away which Associate_in_Nursing application can install Associate_in_Nursing interrupt swipe unremarkable to respond to Associate_in_Nursing IBG interrupt. Upon initialization, the ICUI CSC installs a swipe unremarkable into the SSI Driver visit icuiCommandReceiveISR(), which control the checksum of Associate_in_Nursing incoming command, conduct Associate_in_Nursing ACK/NAK message to the ICU, and then enqueues the bid for later processing away ring ccmCmdEnq().",1
"The DPU-DCI shall address hardware mental_faculty type_A defined Indiana document 1400, Company X specification for the Company X Communication/Memory Module.","Centroiding Confirmation (CC) Engineering ModeThe design of Centroiding Confirmation Engineering mood comprise to shape the validness of deduct channel boundaries. Detector result are collected and histogrammed for type_A control integration time. The full field comprise divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels. These sub-Instrument Ys are and_so modulo bin to produce type_A lay of 8x8 picture_element pseudo-Instrument Ys. The official_document Ys are column (y axis) ordered, axerophthol are the picture_element inside them. These pseudo official_document Ys are transmitted to the ground.",0
The DPU-DCI shall provide the capability for Associate_in_Nursing application program to receive data_point astatine vitamin_A value of A bytes per second over the DCI interface.,"define Frame Depth in DCIThe optimum frame_in depth will be settle with benchmark testing. The default frame_in depth is 10 frames. Given the above data, it will take approximately 24 msec to translate 10 maximum-sized frames at the maximum information transfer rate.",1
The DPU-BOOT CSC shall furnish the capableness to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start information_technology execution.,"initial bang sequencethe initial bang sequence, key as rush succession 1. This treat proceeds place when the Bootstrap fulfil from Programmable Read-Only computer_memory (PROM). rush succession 1 is compose in_the_main of IV steps as follows.First, in this sequence, EEPROM is updated. Then, central_processor BIT and a dower of DRAM BIT is performed. Next, DRAM is cleared. Lastly, rush succession 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set. load parametric_quantity are put into register r13, r14, r15 and r16. DRAM is cleared upwards to memSize. Lastly, either the DPU-RTOS surgery the Bootstrap supervise is loaded and do harmonise to the load parameters.",1
"at startup, the DPU-RTOS shall do the BIT twist RAM tests (cold boot only), put_in twist drivers, do the BIT driver loopback tests (cold boot only), and then spawn the application flight_of_stairs software.",Telescope Module get_at Library and interface CSCThe Telescope Module get_at Library and interface (TMALI) CSC manages the sensing_element event queue and provide an API for the retrieval of sensing_element consequence from that queue to the data sue algorithms.,0
The schoolbook segment and IVT of the DPU-RTOS shall be write-protected.,"InitializationThe DPU-BIT should be initialized every metre the DPU boots. The startup task, usrRoot() should shout bitPart1() before initialize the gimmick drivers and bitPart2() afterward initialize EDAC and the gimmick drivers.",0
"The DPU-ADC CSC shall address ironware modules vitamin_A defined in document 1400, company X Specification for the company X Communication/Memory Module.","remaining DPU FSW tasksFollowing startup, the dominate and Control Task spawns the remaining DPU FSW tasks, which are name below:* The dominate off Task (ccmCmdTask) make_up Associate_in_Nursing covering framework Software tax which make_up responsible for off commands which arrive from the ICU operating_room the SCU. Commands are fulfill directly by this tax by calling the applicable CSC function* The SCU interface Task (scuiDPTask) get telemetry data from former tasks, converts them to CCSDS Version1 Source Packets, manakin company tenner telemetry Protocol information Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The scope Module issue transpose Task (tmaliTask) make_up Associate_in_Nursing covering framework Software tax which make_up responsible for transferring data from the DCI ping/pong soften to the TMALI data buffer_store IN response to adenine DCI material_body restrain operating_room data timeout interrupt.* The information Compression Task (dcxTask) get telemetry data from former tasks, uses adenine lossless data compressing algorithmic_rule to compact the data, and then enqueues the data to the SCU interface Task.* The information swear_out algorithmic_rule Tasks (dpaIMTask and dpaEPTask) litigate entry demodulator events according to the require mode, create data products, and enqueue those data products to the information Compression Task (if compressing make_up enabled) operating_room to the SCU interface Task.* The Error detecting and rectification store Scrubber Task (edacTask) Hz through the text and data section of the DPU to trigger the correction of single-bit misplay which may stimulate occurred, IN put to help prevent the happening of uncontrollable multiple-bit errors.",0
The DPU-DCI shall show from the DCI cross-file in C-bit words only,"Standard I/O InterfaceThe read() primitive does non block. The read() primitive is apply by simply passing its parameter to the tyLib function tyRead().The size of the Rx ring pilot is specified inwards the call to ssiDevCreate() equally part of the twist instantiation.This everyday returns either the phone_number of byte read, or ERROR.",1
The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"overlook and ascendance CSCThe overlook and ascendance (CCM) CSC equal a Level 2 reuse component from the pawn atomic_number_39 project. The overlook and ascendance CSC includes the keep_up components:* A ascendance Task, ccmCtrlTask(), which initializes the DPU FSW and engender early task atomic_number_85 bootup, agenda the yield of DPU housekeeping data packets, monitors the death_penalty of early tasks, and agenda the death_penalty of early periodic task such as the trice message and the guard_dog strobe; and* A overlook slay Task, ccmCmdTask(), which meet and dispatches real-time bid obtain from the SCU surgery the ICU.Major data structures include:* A atmospheric_static information tabulate that keeps racecourse of the operational state. information admit inwards this tabulate includes housekeeping yield rates, CCM specific flags, and the number of bid executed.* A overlook Queue into which bid are placed when they arrive, via interrupt, from the ICU surgery the SCU.* AN Error/Event Queue which compile wrongdoing and result encipher which are reported past the DPU FSW. These wrongdoing and result encipher are removed from the waiting_line and placed into a telemetry packet atomic_number_85 a kick_in interval and admit inwards DPU housekeeping data.DPUSDS5.12.1.1.1Flight software_program InitializationThe overlook and ascendance CSC equal initialized past spawning the CCM ascendance Task, ccmCtrlTask(), from the in_operation arrangement startup task, usrRoot(). later_on the task equal spawned information_technology shout_out a function, ccmInit(), which make the error/event queue, instantiates needed semaphore and put_in several ISRs. Finally, information_technology engender the remaining task which comprise the DPU FSW. When the CCM ascendance undertaking set_off up, information_technology reads DPU constellation startup default_option from the SYSTEM_CONFIG_AREA inwards EEPROM. If the SYSTEM_CONFIG_AREA checksum equal bad, hard-coded default_option are used. The CCM ascendance undertaking initializes the remaining CSCs past forebode the applicable initialisation function, surgery if the CSC has Associate_in_Nursing associated task, past spawning the task using the VxWorks function, taskSpawn(). When the CCM ascendance undertaking initializes a CSC, information_technology surpass the startup default_option scan from EEPROM as parameters to the task initialisation function. IN gain to its task initialisation activities, ccmInit(), also initializes the statement duration substantiation tabulate past forebode ccmCmdLengthInit(). The statement CPU uses the make tabulate to assert bear statement lengths for freshly obtain commands.",1
The DPU-CCM shall leave the capability to repeat to the spacecraft each standard command from the spacecraft operating_theatre the ICU.,"Public FunctionsThis routine allow type_A imply for the CCM project to send type_A regurgitate Science Queue control from the ICU to the DPA software. The regurgitate Science Queue control shall be use to control the DPU to delete all information currently in the scientific_discipline telemetry output queue (i.e., information pending transmission_system to the spacecraft).",1
The raw event list engineering manner shall collect event for transmission to the ground.,"Data ProcessingWhen the DCX CSC compresses a datum package, the given APID constitute incremented by one. If the compact copy of datum constitute bombastic than master_copy datum set, the master_copy datum set bequeath represent forward to the SCUI CSC, AN event S_dcx_UNC_USED constitute enqueued to ccmErrEnq(), and the APID constitute not incremented. in this way, the drudge systems can_buoy discern compact packets from non-compressed packets.",1
The DPU-CCM shall send_on the DPU_HBEAT content to DPU-ICUI for transmission_system to the ICU at an interval of axerophthol seconds.,"initial boot sequencethe initial boot sequence, discover as Boot successiveness 1. This work_on withdraw topographic_point when the bootstrap carry_out from Programmable Read-Only remembering (PROM). Boot successiveness single is frame chiefly of Little_Joe steps as follows.First, inch this sequence, EEPROM is updated. Then, CPU BIT and amp portion of drachma BIT is performed. Next, drachma is cleared. Lastly, Boot successiveness 2 is copied to drachma and executed. During this sequence, the rest of drachma is tried if skipBit is not set. Load parameters are put_option into registers r13, r14, r15 and r16. drachma is pass improving to memSize. Lastly, either the DPU-RTOS or the bootstrap varan is loaded and executed according to the load parameters.",0
"in_that_location DPU-DPA shall induce trine science modes, X, Y mode, and X/Y mode.","instrumentate Y ProcessingThe instrumentate Y Processor chore will perform tail away breaking the vulnerability up into 10-second sub-exposures which represent reposition and added into a final_exam histogrammed instrumentate Y. Tracking live do away choosing head stars from the for_the_first_time 10-second instrumentate Y of Associate_in_Nursing exposure. and_then in each subsequent instrumentate Y, these head stars represent found and the impetus live determined away equate the two instrumentate Ys. The instrumentate Y live then reposition away the determined impetus and added to the late instrumentate Ys in the collection buffer.",1
The DPU-DPA will obtain the initial pass_over frame time from the ICU.,"dram BITPart of the store cost prove inward Boot chronological_succession 1, and part of the store cost prove during Boot chronological_succession 2. During Boot chronological_succession 1, ? kilobit of dram cost prove ahead the bootstrap cost simulate to this area. During Boot chronological_succession 2, the odd store cost prove inward ? kilobit blocks. The dram BIT first compose the accost of for_each_one phrase inward a block to that phrase inward the block. and_so the prove flushes the lay_away and understand back the intact block. If a single-bit error occurs along the read-back, the placement cost read again. If another single-bit error occurs, the prove arrogate a hard error and home_run the completely block bad. If a multiple-bit error occurs, the completely block cost cross_off bad. If the esteem read back Department_of_Energy not match the address, the completely block cost cross_off bad. This Saami unconscious_process cost recur with the unity complement of the address. The bootstrap stock the ensue of the dram BIT inward EEPROM As a serial_publication of x consecutive y-bit words. Each spot inward a result phrase represents the result of essay a ? kilobit block of DRAM. These bits ar represent to dram by go_forward from least-significant spot (LSb) to most-significant spot (MSb) As the plow of the store blocks increase. deoxyadenosine_monophosphate solidification spot designate that a block of dram has failed. deoxyadenosine_monophosphate clear spot designate that a block of dram has go_on the test.",0
"The DPU-1553 CSC shall handle hardware modules as outlined inwards text_file 1400-01, Company X Specification for the Company X Communication/Memory Module.","Command and check CSCThe Command and check (CCM) CSC exist a Level 2 reuse component from the legal_instrument y project. The Command and check CSC include the keep_up components:* angstrom_unit check Task, ccmCtrlTask(), which initialise the DPU FSW and spawn former tasks atomic_number_85 bootup, schedules the production of DPU housekeeping datum packets, varan the execution of former tasks, and schedules the execution of former periodic tasks such Eastern_Samoa the heartbeat message and the watchdog strobe; and* angstrom_unit Command polish_off Task, ccmCmdTask(), which experience and discharge real-time commands find from the SCU or the ICU.Major datum structures include:* angstrom_unit Static data tabulate that hold_open track of the in_operation state. data included indium this tabulate include housekeeping production rates, CCM specific flags, and the turn of commands executed.* angstrom_unit Command Queue into which commands ar position when they arrive, via interrupt, from the ICU or the SCU.* Associate_in_Nursing Error/Event Queue which accumulates erroneousness and consequence put_one_over which ar reported by the DPU FSW. These erroneousness and consequence put_one_over ar absent from the queue and position into a telemetry packet atomic_number_85 a founder interval and included indium DPU housekeeping data.DPUSDS5.12.1.1.1Flight software_package InitializationThe Command and check CSC exist initialized by spawning the CCM check Task, ccmCtrlTask(), from the operational organization inauguration task, usrRoot(). After the task exist spawned IT predict a function, ccmInit(), which make the error/event queue, instantiate want semaphore and installs respective ISRs. Finally, IT spawn the persist tasks which consist the DPU FSW. When the CCM check tax get up, IT register DPU configuration inauguration nonpayment from the SYSTEM_CONFIG_AREA indium EEPROM. If the SYSTEM_CONFIG_AREA checksum exist bad, hard-coded nonpayment ar used. The CCM check tax initialise the persist CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task exploitation the VxWorks function, taskSpawn(). When the CCM check tax initialise a CSC, IT flip the inauguration nonpayment record from EEPROM Eastern_Samoa argument to the task initialization function. indium addition to information_technology task initialization activities, ccmInit(), also initialise the program_line length verification tabulate by calling ccmCmdLengthInit(). The program_line C.P.U. United_States_of_America the created tabulate to verify wait program_line length for newly find commands.",0
"The DPU-CCM shall monitor the condition of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by probe their TASK_INFO and study this entropy Indiana DPU_HK.",Control and MonitoringThe DPU produce eight types of housework packets.,1
The DPU-DCI shall provide the capacity for an application political_program to set the Address Limit at which the hardware bequeath swop table_tennis buffers.,"computer_error Collection and ReportingThe DPU-CCM CSC provides type_A concentrate error reporting interface, ccmErrEnq(), that other FSW tasks utilisation to paper errors. to_each_one sentence information_technology wakes, ccmTask() discipline to see if information_technology is sentence to form Associate_in_Nursing error/event packet for transmittal to the ground. If so, ccmTask() calls ccmHkMkError() to really create the packet and forward information_technology to DPU-SCUI for transmittal to the ground.",0
The DPU-CCM shall provide a mechanism for former CSCs to report errors for inclusion IN the DPU_HK.,"overtop and Control CSCThe overtop and Control (CCM) CSC make_up adenine rase 2 reprocess constituent from the legal_document yttrium project. The overtop and Control CSC admit the keep_up components:* adenine Control Task, ccmCtrlTask(), which initialize the DPU FSW and spawns former tasks atomic_number_85 bootup, schedule the output of DPU housekeeping data packets, reminder the execution of former tasks, and schedule the execution of former periodic tasks such deoxyadenosine_monophosphate the jiffy message and the watchdog strobe; and* adenine overtop Dispatch Task, ccmCmdTask(), which find and off real-time instruction received from the SCU Beaver_State the ICU.Major data anatomical_structure include:* adenine motionless Data remit that keeps cross of the usable state. Data included atomic_number_49 this remit admit housekeeping output rates, CCM specific flags, and the keep_down of instruction executed.* adenine overtop Queue into which instruction are come_in when they arrive, via interrupt, from the intensive_care_unit Beaver_State the SCU.* An Error/Event Queue which accumulates error and result codes which are reported by the DPU FSW. These error and result codes are off from the queue and come_in into adenine telemetry packet atomic_number_85 adenine throw musical_interval and included atomic_number_49 DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe overtop and Control CSC make_up initialized by spawn the CCM Control Task, ccmCtrlTask(), from the maneuver system inauguration task, usrRoot(). later_on the task make_up spawned IT calls adenine function, ccmInit(), which produce the error/event queue, instantiate needful semaphores and set_up various ISRs. Finally, IT spawns the remaining tasks which make_up the DPU FSW. When the CCM Control project originate up, IT record DPU configuration inauguration nonremittal from the SYSTEM_CONFIG_AREA atomic_number_49 EEPROM. If the SYSTEM_CONFIG_AREA checksum make_up bad, hard-coded nonremittal are used. The CCM Control project initialize the remaining CSCs by yell the applicable initialization function, Beaver_State if the CSC induce AN colligate task, by spawn the task using the VxWorks function, taskSpawn(). When the CCM Control project initialize adenine CSC, IT slip_by the inauguration nonremittal say from EEPROM deoxyadenosine_monophosphate parameters to the task initialization function. In addition to information_technology task initialization activities, ccmInit(), also initialize the program_line length substantiation remit by yell ccmCmdLengthInit(). The program_line central_processing_unit uses the created remit to control anticipate program_line length for newly received commands.",1
The DPU-SCUI shall communicate with the SCU allot to the protocol delineate indium document 1143-EI-S19121.,"Time SynchronizationThe interface with the spacecraft as line in document 1143-EI-S19121 delineate that the spacecraft will leave adenine clock subject_matter to each legal_instrument at adenine 1 cycle_per_second rate. The clock subject_matter arrest both two values: adenine note_value representing the current spacecraft time, and adenine note_value representing the delta from the spacecraft time and the Univeral Time (UT), based on Associate_in_Nursing date_of_reference of TBD.",1
The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing straight_off upon acknowledge (I.e. shall not enqueue the message to the command dispatcher queue).,outside computer_program InterfacesThis routine imitate the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
"The DPU-ICUI shall initialise messages agree to DPUICD-01, Section 3.1","Public FunctionsThis modus_operandi is used to format messages for transmittal to the ICU and to place those messages on the SSI Driver sender Queue. The functionCode parametric_quantity is used to produce the CCSDS Packet APID and the Message identifier (refer to document DPUICD-01). A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being pen by multiple tasks simultaneously. The timeout parametric_quantity lets the phoner ascendency how longsighted IT is willing to block on this semaphore if there is Associate_in_Nursing approach conflict.This modus_operandi may be predict at interrupt linguistic_context to transfer Associate_in_Nursing ACK/NAK message. In that case, the semaphore is not taken since IT is not valid to take adenine semaphore at interrupt context. look_up to treatment of the design to admit the ACK/NAK message.",1
The DPU-RTOS shall establish an hook routine which equal invoked on scheme exclusion which shall attempt to memorialise the interrupt vector to the LAST_BOOT_IVEC position in EEPROM prior to reboot.,Install Exception Handlersa default break handler and is installed into chemical_element five (5) of the system break table.,1
"When maintain deoxyadenosine_monophosphate new GRB, and the XRT_POS suit usable from the ICU, the DPU-DPA shall shift and resize the range_of_a_function and event windows appropriately.","inauguration Sequence On flight, a tycoon cycle give_notice lone exist effectuate by the SCU. A watchdog readjust could exist induced by the DPU FSW ascribable to a detected, unrecoverable error, or it could occur as a by-product of the FSW infix a state in which it break to strobe the watchdog timer. On boot, the bootstrap essay and gain DRAM, and and_then proceeds to load the DPU FSW from EEPROM and executes it. The DPU FSW and_then loads configuration information from EEPROM (which base respective in_operation defaults) and engender the respective DPU FSW tasks.",0
The DPU-BOOT CSC shall include angstrom DRAM bit consisting of II write/read/compare tests. The first psychometric_test shall save the address of from_each_one memory location to that location. The bit psychometric_test shall save the full_complement of from_each_one memory location to that location.,"Startup SequenceThe DPU FSW cost booted apply PROM-resident bootstrap software. The bootstrap software performs angstrom_unit staple situated of built-in tests, so replicate the DPU FSW from EEPROM to DRAM and executes it. inward flight, there be two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog readjust (warm boot, commanded reboot).",1
The DPU-SSI shall provide the capacity for an application program to fixed the Inter-Block interruption (IBG) Timeout for transmissible and received messages.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode exist to diagnose job with the detector. demodulator issue produced Hoosier_State a given detector manner are collected over a commanded integration sentence and transmitted to the ground as a list of raw events.,0
The DPU-CCM shall provide vitamin_A mechanism for other CSCs to cover erroneous_belief for inclusion in the DPU_HK.,"computer_error appeal and ReportingThe DPU-CCM CSC put_up a centralized error account interface, ccmErrEnq(), that former FSW tasks use to report errors. from_each_one time IT wakes, ccmTask() train to see if IT represent time to form an error/event packet for transmission to the ground. If so, ccmTask() holler ccmHkMkError() to in_reality create the packet and forrard IT to DPU-SCUI for transmission to the ground.",1
The DPU-BOOT CSC shall understand from EEPROM in 32-bit words only.,"mastery HandlingCommands equal dequeued from the mastery queue_up and fulfill away the mastery Dispatch Task, ccmCmdTask(). This project blocks on a semaphore which comprise chip_in away ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and address ccmCmdProcess() to process waiting commands. The ccmCmdProcess() function later_on recover waiting commands from the mastery queue_up and raise ccmCmdDispatch() to verify the await duration of the instruction and fulfill it. If instruction echo comprise enabled, ccmCmdDispatch() volition hollo ccmHkMkCmdEcho() to blindly echo the instruction back to the ground. Counts for both resist and fulfill commands equal maintained. If the instruction broadcast to ccmCmdEnq() comprise either a 1 Hz Clock Time substance surgery AN attitude substance from the spacecraft, the instruction volition non be forwarded to the mastery Queue, but or_else volition be fulfill directly while nevertheless in disturb context. attitude messages equal forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters equal perish to tisTimeSync() in rank to synchronize the flow time. any other non DPU surgery space_vehicle observatory messages equal quietly discarded without cover AN error.In rank to guarantee that ccmCmdTask() project reports in with the CCM ascendance Task periodically in absence of a footing command, the semaphore has a timeout value of 20 seconds. If the semaphore times out, the project volition verify No commands equal on the mastery Queue, and so composition in to the CCM ascendance Task away calling ccmTaskReport().",0
The DPU-TIS shall provide the capability for application programs to access_code the stream UT_DELTA.,"Telemetry yield to the space_vehicle 1553 BusThe SCUI CSC take the Data Packages from the queues and metamorphose them into CCSDS Version one Source Packets. These Source mailboat comprise then packed into the STPDU for transmission to the SCU. This processing is performed by scuiConvertToSTPDU(). The STPDU, prefixed with adenine conveyance bespeak Counter (TRC), is then publish to xv sequential 1553 subaddresses (as described In the Company X 1553 ICD) by the function scuiWrite().",0
"The DPU-DCI shall read from the DCI Memory in B-bit words only, victimization the payload multiple/store multiple instructions.","populace FunctionsThis task format the TMALI CSC and then remain to read information from the DCI and store it in the TMALI buffer each time the DCI driver signals that information represent available in the Ping-Pong buffer. The availability of information in the DCI Ping-Pong buffer represent signal to the tmaliTask using vitamin_A semaphore. Unless vitamin_A disastrous error represent detected during initialization this task will never terminate.The specified leash parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified value comprise remote the allow_for kitchen_range default_on value will be used.The specified QueueSize represent the allocated buffersize (in IV byte EVENTS), the skirt buffer represent full_phase_of_the_moon when QueueSize-1 result comprise stored in the buffer.",1
The DPU-BOOT CSC shall include deoxyadenosine_monophosphate drachm snatch dwell of 2 write/read/compare tests. The first mental_testing shall pen the address of each memory location to that location. The second_gear mental_testing shall pen the complement of each memory location to that location.,"initial boot sequencethe initial boot sequence, identify American_Samoa Boot Sequence 1. This processing study come_out when the Bootstrap executes from Programmable Read-Only remembering (PROM). Boot Sequence 1 is composed in_the_first_place of quatern steps American_Samoa follows.First, Hoosier_State this sequence, EEPROM is updated. Then, C.P.U. prick and angstrom portion of DRAM prick is performed. Next, DRAM is cleared. Lastly, Boot Sequence 2 is simulate to DRAM and executed. During this sequence, the rest of DRAM is essay if skipBit is not set. onus parameters are assign into registers r13, r14, r15 and r16. DRAM is assoil upwards to memSize. Lastly, either the DPU-RTOS or the Bootstrap Monitor is soaked and executed according to the freight parameters.",1
"The DPU-DPA shall develop vitamin_A Parameterized Finding Chart, PROD_FINDING_CHART, that is indeed many bytes.","Exclude flunk DRAMThe Bootstrap execute adenine memory_board trial in_front lading the maneuver system. The final_result of this trial ar stored inch the EEPROM. The DPU-RTOS purpose the final_result of the memory_board trial to exclude memory_board segments with morsel errors from the system memory_board pool. The Bootstrap constructs adenine morsel map which in_effect go_through adenine list of failed memory_board kibosh during the bootstrap built-in test. A set of routine have be create to utilize this morsel map to exclude failed memory_board kibosh from the VxWorks system memory_board pool. The system memory_board pocket_billiards constitute employ aside VxWorks to apportion memory_board dynamically. In addition, adenine linked list of good memory_board segments constitute create for enjoyment aside the EDAC Memory Scrubber. These routine ar called from the usrInit() and usrRoot() routine inch usrConfig.c. The dramInit() affair must be called anterior to kernelInit() inch usrInit(). The dramBuildMemPool() affair constitute called scarce anterior to initialisation of filesystems and drivers inch usrRoot().",0
"The DPU-DCI shall provide the capability for an covering broadcast to set group_A timeout in milliseconds that set group_A period during which no new events have been received past the hardware, later which the computer_hardware will swop ping-pong buffers and disrupt the software.","Public FunctionsThis procedure provides amp think_of to set the data timeout used by the DCI, the appreciate bespeak show the timeout in milliseconds. The initial appreciate for the frame depth setting comprise influence by the parameter allow_for when start_up the tmaliTask. The maximum appreciate to which the timeout posterior glucinium commanded comprise ex seconds, an attack to set the timeout to amp routine gravid than this maximum will result in setting the timeout to the default appreciate of ex milliseconds",1
The DPU-TIS shall provide the capacity for application programs to memory_access the SC_TIME from the SCM.,real-time Clock InterfaceThe real-time Clock (RTC) read of the RAD6000 are special-purpose registers not normally accessible to C language programs. Some assembler wrapper functions provide access to these.,1
The DPU concretion software_system shall cover errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"statement HandlingThe DPU swallow overlook via II interface from the spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface. any of the DPU overlook bottom live direct from the SCU operating_theatre the ICU. The reservoir for angstrom_unit dictation from the DPU exist 1 of the following:* ICU dictation exist return and direct away the ICU via the SSI.* SCU dictation exist return and direct away the SCU via the 1553.* G-ICU dictation exist return along the comminute and direct to the DPU via the ICU/SSI.* G-SCU dictation exist return along the comminute and direct to the DPU via the SCU/1553.",0
"There DPU-DPA shall suffer three scientific_discipline modes, X, Y mode, and X/Y mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to varan the health of the detector to locate hot spots and abruptly pixels. Detector upshot make In full underframe high-pitched Resolution detector formatting personify pick_up and histogrammed for a overtop integration time. The entire Instrument Y is channel to the ground. This mode can use high solution (all pixels) or low solution imaging (BxB , DxD pixel binning).",1
"When observing a Modern GRB, and the XRT_POS go available from the ICU, the DPU-DPA shall shift and resize the effigy and effect windows appropriately.",public FunctionsThis routine provides a have_in_mind for the CCM task to commit the XRT set bidding from the ICU to the DPA software. The XRT set bidding shall be used to bidding the DPU to update the military_position and window parameters that it apply to spatially filtrate event data.,1
"The DPU-1553 CSC shall address ironware module as defined Hoosier_State document 1400, Company X Specification for the Company X Communication/Memory Module.","Error Collection and ReportingThe ccmErrEnq() function tracks the in_conclusion fault reported and information_technology frequence of occurrence. formerly AN fault code accept cost reported information_technology get the previously reported fault code maintained by ccmErrEnq(). A repeating count is and_then incremented for each subsequent, consecutively reported, indistinguishable representative of this previously reported error. If this fault code is reported more than once in one high-rate housekeeping reporting period, and_then a special error, S_ccm_ERR_REPEAT is enqueued with the repeating count for the fault encoded in the least important byte. This mechanism effectively trim the potency for housekeeping telemetry to become overflowing with a single repeated error.",0
"The DPU-BOOT CSC shall periodically strobe the PSM watchdog timer astatine B_complex 2nd interval (+/- 1/2 second) past writing 0xEB90 to the watchdog Clear Register, SCM_WDR. The Bootstrap CSC shall go_forward the strobe during transition of check from the Bootstrap to the Operating System.",HousekeepingThe TMALI CSC collects housekeeping data that can glucinium recollect via a visit to tmaliHkGet(). TMALI CSC housekeeping equal returned via the TMALI_HK data structure.,0
"The DPU-SCUI shall figure antiophthalmic_factor CHKS16 for telecommands received from the SCU. If the CHKS16 Energy_Department not mates the value included in the telecommand, AN erroneousness will be cover to DPU-CCM. If the checksum computes correctly, the command will be send_on to DPU-CCM for execution.","Development PlatformThe DPU FSW bequeath be implemented Hoosier_State the ANSI C scheduling language, with roughly PowerPC assembly used Hoosier_State the bootstrap and to implement the VME data_point transfer Hoosier_State the DCI Driver. The legion (development) political_program and operating system is Sun/Solaris from sun Microsystems, Inc. The aim political_program is the RAD6000 processor which has a ability (PowerPC-like) architecture, and action the VxWorks 5.3.1 real-time operating system. The cross compiler and debugger is MULTI/C/C++ 1.8.9 from special_K hill Software, Inc.",0
"The DPU-CCM shall supervise the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA away try their TASK_INFO and report this selective_information indium DPU_HK.",Public FunctionsThis routine provides deoxyadenosine_monophosphate means for the CCM task to get the housework info from the DPA software. The CCM task volition call this run and pass_on deoxyadenosine_monophosphate cursor to the location that DPA exist to put_in its housekeeping.,1
"The DPU-CCM shall breed tax for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI astatine bootup.","world FunctionsThis quotidian comprise spawned by the mastery and dominance Task to initialize and execute the SCU Interface datum mainframe Task. This labor initializes the SCUI CSC and and_then enters AN infinite closed_circuit to process telemetry and produce STPDUs. Once initialized, the labor comprise awakened by a semaphore given when the SCU writes the telemetry done subaddress.",1
The DPU-CCM shall provide angstrom command to bring_up the DPU.,"air Messages to the ICUSome special processing and checking exist needful in this affair to care the transmission_system of the ACK/NAK message. When type_A command make_it from the ICU, the icuiCmdReceiveISR() bequeath avow the message checksum and then send an ACK/NAK message to the ICU. information_technology exist possible that an application exist in the midst of sending type_A message to the ICU at the prison_term type_A command cut_off occurs. However, since information_technology exist not possible for an ISR to carry type_A semaphore, an additional mechanism exist needful in order to provide reciprocal expulsion betwixt type_A tax an the ISR. To oblige this problem, the icuiEnq() affair first_gear mold whether information_technology exist being call_down from cut_off context. If so, information_technology then tests the value of type_A inactive variable, icuiEnqBusy. If the variable exist set, the affair bequeath write the given ACK/NAK message argument in inactive variable and return. If the variable exist not set, the affair bequeath continue atomic_number_33 formula (avoiding the semTake() and semGive() calls). In formula execution, the icuiEnqBusy variable exist dictated along entree and negated along exit, later_on which the inactive variable containing the ACK/NAK message argument bequeath be check to determine whether an ACK/NAK exist pending.",0
The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for work_on immediately upon receipt (I.e. shall not enqueue the subject_matter to the statement starter queue).,"transfer Telemetry to the SpacecraftThe SCUI CSC pick_up telemetry a input Data Packages via queues inhabit away early tasksthe scientific_discipline Data Processing Task, the Data Compression Task, and the Command and Control Task. The SCUI CSC take_in a High anteriority Queue and a Low anteriority Queue. The ii queues equal implemented IN an identical mode with the elision that the scuiTask() sacrifice processing preference to the High anteriority Queue. The purpose of the High anteriority Queue is to provide a means away which the Parameterized Finding Chart and DPU housekeeping force_out be transmitted to the SCU out_front of the potentially large sum of buffered scientific_discipline data.",1
The DPU-ADC shall written_report fault to an application program by typeset the ERRNO task variable and returning ERROR.,"Data ProcessingThe DCX CSC make_up amp task which receives data packages from early tasks, compresses the data expend the VBTWL algorithm, and then forwards the compressed data computer_software to the SCUI CSC.",0
The DPU-SCUI shall receive dictation subject_matter indium the form of Telecommand package from the SCU and make them available to the DPU-CCM.,SCU interface CSCThe SCU interface (SCUI) CSC constitute A spirit_level 3 reuse ingredient from the INSTRUMENT Y project. The SCUI CSC constitute in_the_main responsible for follow_up the application protocol with the SCU. The SCUI CSC provides CCSDS packetization serve and supervise the interface between the DPU and the SCU.,1
"The DPU-ICUI shall check the length of a received DPU_CMD against the subject_matter length determined by the Inter-Block Gap. If the received value coiffure non match, then the instruction testament be discarded, and an wrongdoing testament be enqueued to DPU-CCM, and a NAK subject_matter channelize to the intensive_care_unit within a second.","receive dictation from the ICUThe interface to the ICU is via A synchronic serial interface (SSI) bus, which employ an inter-block interruption (IBG) to represented complete messages from one another. The DPU hardware produces an interrupt when IT detects an IBG, and the SSI Driver provides A mechanics past which an application behind install an interrupt crochet everyday to respond to an IBG interrupt. Upon initialization, the ICUI CSC installs A crochet everyday into the SSI Driver called icuiCommandReceiveISR(), which affirm the checksum of an entering command, channelise an ACK/NAK message to the ICU, and and_so enqueues the program_line for later_on processing past calling ccmCmdEnq().",1
"atomic_number_85 the oddment of type_A download, the Bootstrap monitor_lizard of the DPU-BOOT CSC shall compute type_A CHKS_32 on the decade stored in EEPROM and equate IT against the CHKS_32 sent with the decade during the transfer. The Bootstrap monitor_lizard shall outturn to to the RS-232 port both CHKS_32s and type_A message signal whether the download was successful.","left DPU FSW tasksFollowing startup, the control and Control task spawns the left DPU FSW tasks, which are described below:* The control discharge task (ccmCmdTask) be Associate_in_Nursing Application Framework computer_software job which be responsible_for for dispatching overtop which go_far from the ICU operating_theatre the SCU. Commands are executed directly by this job by address the applicable CSC function* The SCU interface task (scuiDPTask) receive telemetry data from other tasks, exchange them to CCSDS Version1 generator Packets, soma Company go telemetry protocol Data Units (STPDUs) from the generator Packets, and carry the STPDUs to the SCU via the MIL-STD-1553B Interface.* The scope Module Event carry-over task (tmaliTask) be Associate_in_Nursing Application Framework computer_software job which be responsible_for for transferring data from the DCI ping/pong pilot to the TMALI data buffer_zone Indiana reply to a DCI frame terminal_point operating_theatre data timeout interrupt.* The Data Compression task (dcxTask) receive telemetry data from other tasks, uses a lossless data compression algorithmic_rule to constrict the data, and then enqueues the data to the SCU interface Task.* The Data sue Algorithms chore (dpaIMTask and dpaEPTask) sue entering demodulator issue agree to the commanded mode, create data products, and enqueue those data products to the Data Compression task (if compression be enabled) operating_theatre to the SCU interface Task.* The erroneousness spotting and Correction Memory scrub_brush task (edacTask) cycles through the text and data segments of the DPU to trip the discipline of single-bit error which Crataegus_oxycantha have occurred, Indiana order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
The DPU-SCUI shall notify the SCU of new data by using the transferral postulation Counter in conformity with interface control written_document 1143-EI-S19121.,Hardware InterfacesThe SSI Driver CSC accesses apiece of the show along the Company X Communications module victimization D16 VME access.,0
The DPU-BOOT CSC shall enable exponent to the EEPROM on the SCM.,"constitutional essay CSCThe constitutional essay (BIT) CSC is a raze ii reprocess component from the SSFF and musical_instrument wye projects. The detailed design of the chip CSC follows. The constitutional trial_run CSC, identified DPU-BIT, perform the phase ii constitutional trial_run (BIT). The phase ii chip includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B intimate BIT, and a memory_board test of the DCI Data Buffers. The resultant_role of the chip are recorded in the SYS_CNFG_AREA in EEPROM and are likewise hold in DRAM. If an error come_about in unrivalled of the functions performing the BIT, the test consequence volition live reported as a failure in the test itself.",0
The DPU-CCM shall have the capability of calculating a CHKS_32 for a particular accost ambit on command.,Real-Time time InterfaceThe Real-Time time (RTC) Registers of the RAD6000 live special-purpose registers not commonly accessible to C speech programs. Some assembler neglige functions provide entree to these.,0
The DPU-SCUI shall news_report misplay to the DPU-CCM for inclusion in the DPU housekeep information.,"Error Collection and ReportingAt boot time, no error queue_up exists because it receive as_yet to make_up created. Errors that pass in this early stage of error reporting embody assigned right_away to the global task variable errno. The proofreader Crataegus_laevigata refer to the VxWorks programmer Guide, section 2.3.7 for Sir_Thomas_More information on errno. If errno embody set after the error queues embody created, it embody queued to the Error waiting_line by calling ccmErrEnq().",0
"The DPU-TIS shall provide the capability for an application program to Set the value of the SC_TIME register(s) on the SCM and enable the 1PPS meter impede register, if robotic meter synchroneity is enabled.","Time user_interface ConfigurationThe DPU computer_hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually crush adenine valuate into the clock registers without the A PPS signal.",1
The DPU-ADC shall interpret from the SCM registers indium B-bit words only.,"InitializationThe driver cost format past conjure the initialization function adcInit(). The function initialise the ADC_LIST_ENTRY array, sets up public_lavatory pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value command three foretell to adcUpdateNext()). The ADC driver rear live re-initialized, which bequeath resultant inward the values inward the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit information items; nonetheless the hardware contains a B-bit A/D. The pep_pill bits are used to indicate incapacitate or suspect values as follows:* at initialization, the MSbit of each of the ADC_VALUEs cost stage_set (0x8000).* If a conversion break_down (i.e. the driver interpret the analog value and stage_set that the conversion has not yet completed), the endorse MSbit.",1
"The DPU-1553 CSC shall address ironware mental_faculty as delimit in document 1400, Company X specification for the Company X Communication/Memory Module.","initialization The undertaking put_forward the initialization function scuiInit() which sets an instance variable, apportion resound buffers and semaphores for the Low and High Priority Telemetry Queues, initialize axerophthol soften and semaphore for pending RT-RT command messages, create the scuiTask() wakeup semaphore, initialize intragroup information structures, opens and initialize file signifier for each of the required MIL-STD-1553 subaddresses and installs ISRs. When the CCM CSC engender the scuiTask(), it will block on axerophthol semaphore (ccmSemScuiSpawn) awaiting SCUI initialization. at_one_time initialization is complete, the SCUI CSC will signaling successful initialization by leave the semaphore, and then write an vacate STPDU to the 1553 share memory.",1
"The DPU-BOOT CSC shall include a CPU spot consist of a branch test, a fixed point test, a floating point test, an cut_off test, a timekeeper test, and a read test.","C.P.U. BITThe C.P.U. BIT consists of A serial_publication of tests plan to test each of the operational unit_of_measurement of the processor. These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the timekeeper Unit. Each of these tests consists of carry_through A few selected instructions from the this operational unit. The General Purpose file (GPR), the section file (SR), the counterpunch Register (CTR), and the term Register make_up tested for stuck-bits as part of the Branch-Unit test. This embody done by indite A ace figure (verified by reading it back) and then indite A cipher figure (verified by reading it back).",1
"The DPU-SCUI shall atomic_number_4 capable of preparing one STPDU for delivery to the SCU every MB milliseconds, Beaver_State shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer asking Counter field.","initial boot sequencethe initial boot sequence, identified type_A Boot Sequence 1. This processing drive direct when the bootstrap action from Programmable Read-Only memory_board (PROM). Boot Sequence i is compose primarily of quadruplet maltreat type_A follows.First, indium this sequence, EEPROM is updated. Then, CPU BIT and a destiny of DRAM BIT is performed. Next, DRAM is cleared. Lastly, Boot Sequence II is copied to DRAM and executed. During this sequence, the rest of DRAM is tried_and_true if skipBit is not set. Load parameter are pose into file r13, r14, r15 and r16. DRAM is shed_light_on up to memSize. Lastly, either the DPU-RTOS or the bootstrap Monitor is blind_drunk and executed according to the load parameters.",0
The DPU-SCUI shall notify the SCU of new datum by habituate the Transfer Request retort Hoosier_State accordance with interface control text_file 1143-EI-S19121.,"Public FunctionsThis routine comprise spawned by the Command and Control Task to initialize and carry_out the SCU port Data Processor Task. This task initialise the SCUI CSC and and_then enters an space eyelet to process telemetry and produce STPDUs. Once initialized, the task comprise awakened by amp semaphore grant when the SCU spell the telemetry execute subaddress.",1
"The DPU-SCUI, in the event of A buffer_zone full condition, shall throw_out novel data, return AN computer_error to the caller, and report AN computer_error condition to the DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provide a centralized erroneousness reporting interface, ccmErrEnq(), that other FSW task use to report_card errors. for_each_one time it wakes, ccmTask() check_mark to project if it is time to form Associate_in_Nursing error/event packet for transmitting to the ground. If so, ccmTask() outcry ccmHkMkError() to actually produce the packet and forward it to DPU-SCUI for transmitting to the ground.",1
The DPU-CCM shall quietly discard any unrecognized lookout messages (I.e. messages which do non have axerophthol DPU command APID).,"store upload and download HandlingIf more than 65535 bytes need to be uploaded, the upload file moldiness be violate up into multiple minuscule files, each lupus_erythematosus than OR compeer to 65535 bytes, and and_then each of the virtual uploads should be sent in series. Because of the sequence numbers, the DPU FSW bathroom encounter individual upload commands out of sequence. on_that_point is no clock limit for the acquisition of a single virtual upload, and soh a long upload bathroom continue across ground contacts. If an upload is in progress, the last sequence amount bathroom be sent to the DPU FSW and information_technology will cover the list of omit sequence act via event amount S_ccm_MISSING_SEQNO. If an upload is in progress and needs to be cancelled, information_technology bathroom be discard by issuing the D_MEM_DAT_CNCL command.",1
The DPU-BIT shall use the EEPROM number_one_wood CSC when scan from and save to the EEPROM.,"Public FunctionsSets the poll rank and buff rank to the feed values. If the values are forbidden of range, the prior values are retained and an error is reported. The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically conform establish along the feed poll rate, past go_down the timeout to around the poll rank (not that the timeout is expressed inch clock ticks, and so the resolving is low and but gauge of the poll rate).",0
"The DPU-SCUI shall construct CCSDS Source bundle from Data software angstrom defined by CCSDS-102.0-B-4, and in accordance_of_rights with interface control written_document 1143-EI-S19121.","Event ProcessingThe Event Processor Task, after get a style command from the ICU, configure the DPU DCI hardware, respond to the ICU with a style make message so receives detector events past calling functions tmaliWait() and tmaliNextEvent(). The Event Processor Task will collect detector events for the time point specified Hoosier_State the style command so upshot a style discharge message to the ICU. After issuance the style discharge message, the Event Processor Task will enter the Idle state.",0
"The DPU-CCM shall breed job for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI At bootup.","InitializationThe SCUI CSC rival format when the scuiTask() rival spawned aside the CCM CSC. initialisation parameters which be pass_along into the scuiTask() include:* opinion_poll place rank at which the S/C will opinion_poll the DPU for telemetry. The rank rival stipulate inwards Hz, and sustain deoxyadenosine_monophosphate default_option of X Hz ground on the INSTRUMENT X-DPU opinion_poll rank inwards the caller X 1553 ICD.* cushion place measure used to rank buffer data to the S/C. The rank rival stipulate inwards bits per telemetry poll, and sustain deoxyadenosine_monophosphate default_option of 7664 which rival rival to unrivalled STPDU per opinion_poll (*** byte per STPDU sentence pentad bits/byte). This default_option measure efficaciously handicap rank buffering.* size_of_it of low-toned Priority queue_up size inwards byte of the moo priority telemetry queue. If the amount requested cannot glucinium allocated, the buffer will glucinium apportion at the amount of remembering arrest inwards the largest free remembering block.Size of High Priority queue_up size inwards byte of the high priority telemetry queue. If the amount requested cannot glucinium allocated, the buffer will glucinium apportion at the amount of remembering arrest inwards the largest free remembering block.",1
The DPU-CCM shall forrad ACS_MSGs to the DPU-DPA for processing immediately upon reception (I.e. shall non enqueue the subject_matter to the control dispatcher queue).,"computer_error Collection and ReportingThe DPU-CCM CSC allow_for A centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. Each metre information_technology wakes, ccmTask() stop to see if information_technology live metre to build AN error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forrard information_technology to DPU-SCUI for transmission to the ground.",1
"The DPU-TIS shall bring_home_the_bacon the capability for AN application program to set the evaluate of the SC_TIME register(s) on the SCM and enable the 1PPS clock press register, if automatic_rifle time synchronizing live enabled.","Time Interface ConfigurationThe TIS CSC provides leash functions for use by the CCM command dispatcher to control_condition these values:* tis1ppsSet() select participating A PPS signal,* tisSyncModeSet() set whether manual_of_arms time jamming exist enabled, and tisTimeSet() manually mess a value into the DPU clock.",1
The DPU-DPA shall be adequate_to of collecting detector result over the full FOV.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block crack interruptsThe SSI Driver CSC supports a message musical_mode to facilitate covering level communication. This musical_mode uses the Inter-Block crack interrupt sire aside the computer_hardware to contemporize message transmission. When In a messaging mode, the driver enables an national byte numeration queue bring_home_the_bacon a synchronization mechanics for send_out messages. This byte numeration queue represent updated with the message size angstrom Inter-Block crack disturb are received. The Transmit Message style uses the BGTX interrupt, the Tx first_in_first_out discharge Interrupt, the write() call, and an national byte numeration queue to contemporize the contagion of subject_matter over SSI. In this mode, the maxBytes parameter make_it to write() represent enqueued to the byte numeration queue. When a period of time equal to operating_theatre greater than the Interblock crack time get expired, the BGTX interrupt will be asserted. at this time, the driver will respond and enlightened a new shift aside setting a byte carry-over Limit for this mental_block and enabling the Tx first_in_first_out discharge Interrupt. The byte carry-over Limit tally to the entranceway along the byte numeration queue. When completely bytes In the current mental_block experience personify air improving to the byte carry-over Limit, the Tx first_in_first_out ISR will disable itself and reset the byte carry-over Limit to zero. AN covering Crataegus_oxycantha use this musical_mode aside calling write() with a buffer arrow and maxBytes In rules_of_order to shift a message of a particular length.",0
The DPU-EDAC shall track_record the number of MBEs that have comprise detected Hoosier_State DRAM since kicking and the address of the utmost two MBEs.,"drachm BITPart of the memory represent essay atomic_number_49 reboot succession 1, and function of the memory represent essay during reboot succession 2. During reboot succession 1, ? KB of drachm represent essay in_front the Bootstrap represent copied to this area. During reboot succession 2, the rest memory represent essay atomic_number_49 ? KB blocks. The drachm BIT first compose the speak of from_each_one phrase atomic_number_49 A auction_block to that phrase atomic_number_49 the block. and_then the test flushes the memory_cache and show back the entire block. If A single-bit computer_error occur along the read-back, the positioning represent read again. If another single-bit computer_error occurs, the test feign A hard computer_error and label the unscathed auction_block bad. If A multiple-bit computer_error occurs, the unscathed auction_block represent tag bad. If the measure read back does not fit the address, the unscathed auction_block represent tag bad. This Sami cognitive_process represent repeat with the one complement of the address. The Bootstrap storage the effect of the drachm BIT atomic_number_49 EEPROM as A serial_publication of Adam consecutive y-bit words. apiece scrap atomic_number_49 A result phrase symbolize the result of testing A ? KB auction_block of DRAM. These routine make_up represent to drachm by go from least-significant scrap (LSb) to most-significant scrap (MSb) as the addresses of the memory immobilize increase. A set scrap indicates that A auction_block of drachm stimulate failed. A clear scrap indicates that A auction_block of drachm stimulate slip_away the test.",1
The DPU-SCUI shall notify the SCU of new information by using the transmit Request antagonistic Indiana accordance with interface control document 1143-EI-S19121.,"telemetry production to the Spacecraft 1553 BusThe SCU, which constitute vitamin_A MIL-STD-1553 Bus controller (BC), periodically reads the STPDU stop in the fifteen telemetry subaddresses, and and_so writes to the telemetry cause subaddress. When the telemetry cause subaddress constitute written, the scuiTlmDoneISR() constitute hollo which gives vitamin_A semaphore to awaken the scuiTask(). The software provides fault allowance by automatically awaking after approximately two polling periods. This timeout constitute automatically adjusted whatsoever time the SCU Poll value value constitute changed by command.",1
The DPU-TMALI shall use DPU-DCI to transmit with the DCI Interface.,"overlook HandlingThe DPU assume instruction via ii interface from the ballistic_capsule via the MIL-STD-1553 interface, and from the intensive_care_unit via the SSI interface. whatsoever of the DPU instruction potty embody transport from the SCU operating_room the ICU. The generator for a program_line from the DPU exist 1 of the following:* intensive_care_unit program_line exist mother and transport aside the intensive_care_unit via the SSI.* SCU program_line exist mother and transport aside the SCU via the 1553.* G-ICU program_line exist mother along the establish and transport to the DPU via the ICU/SSI.* G-SCU program_line exist mother along the establish and transport to the DPU via the SCU/1553.",0
CSC DPU-BOOT put shall The the diagnostic into processor mode.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1. This processing takes place when the Bootstrap executes from DRAM Read-Only Memory to Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated. Then, CPU BIT Programmable a portion of DRAM BIT is performed. Next, DRAM is cleared. Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of and is tested if skipBit is not set. Load parameters are put into registers r13, r14, r15 and r16. DRAM is cleared up (PROM). memSize. Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
"The system. shall be a real-time, multi-tasking operating DPU-RTOS","Development PlatformThe DPU FSW will be implemented in the ANSI architecture, programming language, with some PowerPC assembly used in cross Bootstrap and to implement the VME data transfer in the DCI Driver. The host Sun/Solaris platform and operating system is (development) from Sun Microsystems, Inc. The target platform is the RAD6000 processor which has a POWER (PowerPC-like) C and executes the VxWorks 5.3.1 real-time operating system. The the compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",1
The from shall of stamp the secondary header time the Source Packets with the current SC_TIME retrieved DPU-SCUI the module. DPU-TIS,"Time RetrievalThe DPU maintains a local copy products the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data of Time packets. The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and Delta most recent UT the value. and is communicated among DPU FSW applications via the TIS_TIME data structure.",1
The DPU-RTOS shall provide a function to allow Module. application program write to to the Real-Time Clock registers on the RAD6000SC an CPU,Real-Time and InterfaceThis results gets (RTC) value of the Real-Time Clock the Registers and places the routine in variables rtcu Clock rtcl.,1
The DPU-DCI shall an the capability application provide for swap. to arm the ping-pong buffer for program,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on intervening Company X Communication Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only. The specific timing command), of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD requirements andthe timing requirements are speed implicitly by the amount of time which will be required to execute the the instructions regardless of the CPU met setting (DRAM test logic).",0
The DPU-SCUI shall use DPU-1553 Interface. communicate with the MIL-STD-1553B to,External routine Housekeeping. Program copies the BIT DPU into bitHk for inclusion in the Results InterfacesThis,0
The DPU-RTOS shall include EEPROM. capability object dynamically load to the from modules the,"Startup Sequence On flight, a power cycle only can be effected by the SCU. A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the fails entering a state in which it FSW to strobe the watchdog timer. On boot, the bootstrap tests and clears DRAM, and then tasks. to load the DPU FSW from EEPROM and executes it. The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW proceeds",1
The EDAC CSC shall the SCM. on enable DPU-BOOT,"InterfacesPerforms Program External PROM checksum EDAC test, the SCM test, and device loopback tests for those devices which support it.",1
"At the was of a download, the whether Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and indicating it against the CHKS_32 sent with the X during the transfer. The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message compare Bootstrap the download end successful.","Startup SequenceThe DPU FSW is booted using PROM-resident EEPROM software. The bootstrap software performs commanded basic set of built-in tests, then a the DPU FSW from bootstrap to DRAM and executes it. In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, copies reboot).",0
The the CSC shall BIT detected SYSTEM_BLOCK. failures to DPU-BOOT log,Module and Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue Telescope provides an API for queue retrieval of detector events from that the to the data processing algorithms.,0
The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading the during process. it boot,"Data Processing Algorithm CSCThe DPA CSC includes the Ping components:* a Processor Task communicates with the ICU, creates event list data products, creates buffers, Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, following and Pong Tracking and provides Event task heartbeat to the CCM task.",0
"The new in the the of a buffer full condition, shall the DPU-SCUI, data, return an error to discard caller, and report an error condition to event DPU-CCM.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an invalid message to the RS-232 interface if an error command document argument is entered. A complete listing of these or is given in messages 7384-BSPS-01.",0
The DPU-DCI shall provide an application Detector with the capability to command program DCI hardware to reorder the bit received. of each event's original the Electronics Output Format as it is sequence,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the command interface if an invalid RS-232 or argument is entered. document complete listing these of messages is given in A 7384-BSPS-01.",0
The DPU-TMALI shall during the ping-pong default limit initialization. startup as specified by TMALI_PP_LIMIT provided configure at The frame value shall be M frames and shall be capable of being modified dynamically.,"by I/O Interface The write primitive does not block. The write() primitive ERROR. managed Standard the tyLib function, tyWrite() when the driver bytes not in BGTX Message Mode. The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of is written, or is",0
shall be The DPU-DPA providing of capable DPA_HK on request.,"Public FunctionsSets the poll rate and buffer rate to the error values. If the values to out of range, the prior values are and and an given is reported. The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout are approximately the poll rate (not that the timeout is expressed in clock ticks, retained so the resolution is low and only approximates of the poll rate).",0
The DPU-RTOS shall install an hook routine which is invoked on LAST_BOOT_IVEC exception which shall attempt to prior the vector interrupt to the system location in EEPROM record to reboot.,"InitializationThe DPU-BIT should and initialized every time the DPU The boots. be task, usrRoot() should call bitPart1() before initializing the device drivers startup bitPart2() after initializing EDAC and the device drivers.",0
The DPU-SSI shall provide the capability for Slave application SCM to Interface. the VME an Interrupt on the program for the SSI enable/disable,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is memory to this area. During Boot Sequence 2, the remaining copied is tested in ? KB blocks. The has BIT first writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads back the entire block. If a single-bit error occurs on the read-back, the location is read again. If another single-bit error occurs, the test assumes a hard error and marks the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. The Bootstrap addresses the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words. Each bit in a result word represents the result of testing a ? KB block of DRAM. These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the stores of the memory blocks increase. A set bit indicates that a block of DRAM DRAM failed. A clear bit indicates that a block of DRAM has passed the test.",0
The DPU-DCI shall read from Registers the DCI in C-bit only words,Hardware InterfacesThe DCI VME CSC accesses each of the registers to the Company X Communications module using D16 VME on mode. Reads from DCI memory are performed in Driver D32 mode via a special assembly language routine which uses the lwm/stm instructions access minimize the transfer time.,1
The it DPU-CCM collect DPU_HK and DPU-SCUI. shall to the forward,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a scuiInit(). MIL-STD-1553 subaddress. The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 reported single to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by separate Upon interrupt, the scuiCmdReadISR() reads a corresponding telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq(). Errors are subaddress by incrementing an invalid command counter.",1
"spacecraft. boot, the DPU-CCM the have shall BC_INDEX if the boot is successful. A boot is successful if command and telemetry communications toggle been established with the On","Error Collection and ReportingThe ccmErrEnq() function tracks the potential error reported and its frequency of significant Once one error code has been reported it becomes the previously reported error code maintained by ccmErrEnq(). A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error. If this error code is reported more than once in an high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least occurrence. byte. This mechanism effectively reduces the last for housekeeping telemetry to become flooded with a single repeated error.",0
SSI in shall read from the DPU-SSI registers The 16-bit words only.,registers accesses SSI Driver CSC InterfacesThe each of the Hardware on using Company X Communications module the D16 VME access.,1
The specified shall data an amount of buffer DPU-SCUI by the SCU_BUFFER_SIZE The provided during initialization. parameter default buffer size will be set to X MB of data.,"Error Collection and ReportingThe transmission CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. Each time it wakes, ccmTask() checks DPU-CCM see if it is time to form an error/event packet for transmission to the ground. If so, ccmTask() and ccmHkMkError() to actually create the packet calls forward it to DPU-SCUI for to to the ground.",0
"The DPU-TIS shall provide jam capability for on application program to set the value of if SC_TIME register(s) an the SCM and enable the 1PPS clock the register, the automatic time synchronization is enabled.","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping. If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()). This is done since the error/event reported is semaphore-protected and a inversion cannot be taken in an ISR. The error queue semaphore has priority inversion also to reduce conflicts between multiple callers should a priority semaphore situation arise. This routine set replaces frequently occuring errors with a special repeat error code. The repeat error code is a special error code that follows a normally queue error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
"an DPU-CCM shall FUNCTION the length of a received DPU_CMD a an expected value from against lookup table indexed by check code. If the received value does not match the expected, then the command will be discarded, and The error will be enqueued.","Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented tmaliTask() a ring which which contains the detector events buffer, have been received over the data capture interface from the the Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by DCI DPA CSC. The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers CSC housekeeping data at the request of the Command and Control Task.* The task using and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
DPU-CCM The a shall provide command to resend DPU_HK_START.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT on projects. The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test PROM, SCM Y a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results in the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained of DRAM. If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
from DPU-CCM shall process real-time SCU. commands within or ms of receipt The the ICU B the non-deferred,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project. The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the the of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and execution watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU a the ICU.Major data structures read A Static Data table that keeps track of the operational state. Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW. These error and event codes are removed from the queue and placed into a telemetry packet at or given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot(). After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs. Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used. The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn(). When the CCM Control Task initializes a CSC, it passes the startup defaults include:* from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify expected command lengths for newly received commands.",1
The DPU-ICUI shall provide an API for CSCs other to transmit messages to the ICU.,"Instrument Control Unit Interface CSCThe ICU.* Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU. The ICUI CSC is for responsible primarily implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message ISR, Function, icuiEnq(), which provides an API by which other CSCs can send messages to the Instrument An ICU Interface Command Reader Send icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
The DPU-SSI shall to write registers in the SSI 16-bit words only.,location Program InterfacesReads the BIT results from pointed External the pBitResults by to (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
execution. DPU-BOOT CSC shall provide to its the automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start capability The,"Built-In TestThere (CPU) two stages of Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in booted Bootstrap program and operating of Central Processing Unit are BIT, and Dynamic Random Access Memory (DRAM) BIT. The Stage 2 BIT is executed after the consists system is the and is not part of the Bootstrap program.",0
Tthe and shall at DPU_HK_START DPU-CCM forward it to bootup. create DPU-SCUI,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y Finally, The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state. Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the function, FSW. These error and event codes operating removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the are system startup task, usrRoot(). After the task is spawned it calls a DPU ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs. project. it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used. The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn(). When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify expected command lengths for newly received commands.",1
The shall to provide a command reboot DPU-CCM the DPU.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area. During Boot Sequence 2, the remaining memory is tested in ? KB blocks. The DRAM BIT as writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads back the entire block. If a single-bit error occurs on the read-back, the location is read again. If another single-bit error occurs, the test assumes a hard error and marks the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. EEPROM Bootstrap stores the results of the DRAM BIT in The as a series of x consecutive y-bit words. Each bit in a result word represents the result of testing a ? KB block of DRAM. These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) first the addresses of increase. memory blocks the A set bit indicates that a block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",0
The DPU-TMALI shall the place in address of the starting ring buffer event TMALI_HK.,"Ring buffer data structureThe CSC maintains a FIFO converted as a ring were to temporarily store the data received from the DCI before it is processed. The ring buffer the two pointers called pIn and pOut to keep track of the data in the buffer. The pointers buffer defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so uses pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be implemented before reading data.",1
The DPU-BOOT CSC the create the record CPU a of BIT in shall SYSTEM_BLOCK.,"Startup effected On flight, a power cycle can only be clears by the SCU. A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the a entering FSW state in which it fails to strobe the watchdog timer. On boot, the bootstrap tests and Sequence DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it. The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks.",0
"register DPU-BOOT CSC shall test, a CPU BIT consisting of a branch test, a fixed point test, a floating a test, an interrupt test, a timer include and point The test.","Startup SequenceThe FSW FSW (cold booted using PROM-resident bootstrap software. The bootstrap software performs a basic set of built-in tests, EEPROM copies the DPU DPU from then to DRAM and executes it. In flight, there are two methods which can trigger the DPU FSW to boot:* power-on is boot), or* watchdog reset (warm boot, commanded reboot).",0
"The DPU-ICUI shall check DPU-CCM, length of a received DPU_CMD against the message length determined by the Inter-Block Gap. If the received value does not match, then the command will be discarded, and an error a be enqueued to the and second. NAK message transmitted to the ICU within a will","to Messages to the ICUSome special processing and checking is required in this function Sending handle the transmission of the ACK/NAK message. When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU. It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs. However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR. To accommodate this problem, the icuiEnq() function first determines whether it is the invoked from interrupt context. If so, it then tests the value of a static variable, icuiEnqBusy. If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return. If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls). In normal execution, the icuiEnqBusy is is set on entry and negated on exit, after which the static variables containing being ACK/NAK message parameters will be checked to determine whether an ACK/NAK variable pending.",1
The DPU-ICUI shall from real-time commands to DPU-CCM receipt forward milliseconds of within 500 the ICU.,"Data Processing Algorithm CSCThe DPA correction, includes the following components:* Instrument Y Processor Task creates histogrammed Instrument Ys, performs Tracking (choose the stars, drift shift-and-add), CSC creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to guide CCM task.",0
The DPU-BOOT CSC of include a DRAM BIT consisting of two write/read/compare tests. The first write shall that the address shall each memory location to write location. The second test shall test the complement of each memory location to that location.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area. During Boot Sequence 2, the remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads of the entire block. If a single-bit error occurs on the read-back, the location is read again. a another single-bit error occurs, the test assumes a hard error and marks the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. The Bootstrap stores the results back the DRAM BIT in EEPROM as a series of x consecutive y-bit words. Each bit in a result the represents the result of testing a ? KB block of DRAM. These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as word addresses of the memory blocks increase. A set bit indicates that a block of DRAM has failed. A clear bit indicates that If block of DRAM has passed the test.",1
The DPU-ICUI shall SSI DPU-SSI to communicate with the use Interface.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of ExEcentroided of Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time. The full field is divided 8x8 8x8 sub-Instrument Ys, each of Centroiding (by 8) pixels. These sub-Instrument Ys are then modulo binned to produce a set Confirmation into pixels pseudo-Instrument Ys. The Instrument Ys are column (y axis) ordered, as are the pixels within them. These pseudo Instrument Ys are transmitted to the ground.",0
The DPU-SCUI shall receive the messages in Telecommand form of make Packets from command SCU and the them available to the DPU-CCM.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU scuiCmdReadISR() be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress. The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an scuiInit(). installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. the ISR is installed at initialization by ISR Upon interrupt, the will reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to This Command and Control CSC for dispatch via ccmCmdEnq(). Errors are reported by incrementing an invalid command counter.",1
in DPU-ADC shall write The the SCM to registers B-bit words only.,"Analog to Digital Converter Driver CSCThe Analog correct Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware. The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to as driver. A value is updated every other call since each value requires a multiplexer keep time as well the an ADC conversion time. In order to settle the driver simple, the responsibility for implementing the to settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
The DPU-EDAC shall to an ISR the be invoked when an SBE occurs location scrub the and containing install SBE.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but CSC. have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA which The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), transfer tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and routine ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the tmaliDciWindowSet(), of data from the DCI to the queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook an to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
The DPU-DCI capability provide the shall ping-pong an application program to set the Address Limit at which the hardware will for swap buffers.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the to is copied to this area. During Boot Sequence 2, the remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads back the entire block. If a single-bit error occurs on the read-back, the location is read again. If another single-bit error occurs, the test assumes a hard as and marks the whole block bad. If a multiple-bit error occurs, by whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words. Each bit in a result word represents the result of testing a ? KB block of DRAM. These bits are mapped to DRAM the proceeding from least-significant bit (LSb) Bootstrap most-significant bit (MSb) error the addresses of the memory blocks increase. A set bit indicates that a block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",0
The Interrupt shall provide the SCM_DCI_CSR. for an mask/unmask program to application each of the DCI DPU-DCI Conditions using the capability,Hardware InterfacesThe SSI on CSC module each of the registers VME the Company X Communications accesses using D16 Driver access.,0
capability DPU-DCI a respond the The for an application program to install shall callback routine to provide to the DCI Error Interrupt (INTERR_EN).,"Public FunctionsThis routine initializes the interface SSI the ICU. This routine opens to in port, installs the SSI callbacks, interrupt interface and enables Transmit Message Mode Driver the SSI Driver.",1
The DPU-SSI determine provide the capability for an application to the the in of bytes number a message received from shall ICU.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide offset Drift Correction calculates frame. drift stars.o and roll of a just-completed tracking frame relative to the reference the o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used in the centroiding software by the Blue Processing Electronics (BPE) in the Telescope Module.",0
The DPU-CCM shall collect DPU_HK and the it to forward DPU-SCUI.,"Public FunctionsThis routine the called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, Dispatch enqueue the Task and to wakeup the CCM Command to command so that is command can be executed.",0
"The DPU-DCI Data provide an application Normal/Test with the ability the read the current hardware status, including the Data Level Trigger, the shall Timeout Trigger, to DCI Event Mode, and the program Mode.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the transmitted time a produced in a given detector mode are collected over events commanded integration Detector and detector. to the ground as a list of raw events.,0
writing DPU-DCI shall provide the capability for an to program application the reset DCI by The to the DCI Reset Register.,"Startup SequenceThe DPU FSW is booted using boot, In software. The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes commanded bootstrap flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm PROM-resident it. reboot).",1
a DPU-CCM. shall DPU-DPA The task heartbeat to provide,"the Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to for ground. If so, ccmTask() calls ccmHkMkError() to actually create the transmission and forward it to DPU-SCUI Error packet to the ground.",0
"On error to obtain apply acceptable tracking solution, the DPU-DPA shall an the most recent tracking solution to report an failure and DPU-CCM.","Ring buffer data structureThe CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The called buffer uses two pointers ring pIn and pOut to keep track of the data in the buffer. The pointers needed defined such that reading from the buffer is the simplest operation and data. a single compare is were to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading only",0
The DPU-BIT shall perform two write/read/compare tests on half-word RAM for the MIL-STD-1553B. The first test shall construct and write the (16-bit) values obtained by adding the upper and lower half-words of each each memory address. The second in used construct and write the ones complement of the half-word values shall test the first test.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level a reuse component from the SSFF and INSTRUMENT Y projects. The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, 2 MIL-STD-1553B internal BIT, and a memory test of the DCI of Buffers. The results Data the BIT are recorded in the SYS_CNFG_AREA the EEPROM and are also maintained in DRAM. If an error occurs in one of the functions performing the BIT, in test result will be reported as a failure in the test itself.",1
The DPU-BOOT CSC DPU. to when power is applied shall the execute,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for is message number of arguments, and displays an error and to the RS-232 entered. if an invalid command or argument syntax interface A complete listing of these messages is given in document 7384-BSPS-01.",0
"The DPU-DPA protocol transition MODE the on based shall in specified document DPUICD-01, section 2.2","Memory in and Download HandlingIf more than 65535 bytes need to Upload uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series. Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence. There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts. If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO. If an upload is be progress by needs to be cancelled, it can be discarded and issuing the D_MEM_DAT_CNCL command.",0
read CSC EEPROM shall The from DPU-BOOT in 32-bit words only.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only. The specific timing requirements of the EEPROM are use in one of three the the timing requirements are met by inserting specific wait loops (typical),* the timing by are met requirements satisfied of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by ways:* amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
"shall DPU-DPA The transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Instrument Control CSCs Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU. The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other Unit can send messages to the ICU.* An icuiHkGet(), Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands Interface the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, ICU which gathers ICU from housekeeping data at the request of the Command and Control Task.",1
provide reboot shall DPU-CCM a command to The the DPU.,in LibraryThe DPU contains a DPU watchdog which must be prevent periodically Watchdog order to strobed a hardware reboot.,1
The DPU-RTOS shall in the capability to invoke (VME) Interrupt (ISRs) Routines Service provide response to internal and external user-installed interrupts.,"types of external (VME) interruptsThe DPU has five types external of (VME) interrupts:* Memory SSI Interrupts,* DCI Interface Interrupts,* Interface Interface Interrupts,* MIL-STD-1553 EDAC Interrupt, and* Ethernet Interrupt (ground use only).",1
The DPU-DCI shall provide the capability for an application program to respond a install (INTERR_EN). to callback to the DCI Error Interrupt routine,Public the routine provides a means for the CCM task to send a Mode engineering command FunctionsThis ICU to the DPA software. The Mode from shall be used to command the DPU into a particular science or command event processing mode. The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
registers DPU-RTOS shall provide a function to allow an the application to read from the Real-Time Clock The on program RAD6000SC CPU Module.,"Structural DPU TIS CSC provides interface. library of functions to* initialize the DesignThe clock the at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and hardware UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock a",1
DPU. provide shall The a command to reboot the DPU-CCM,"Startup SequenceThe DPU FSW there booted DPU PROM-resident bootstrap software. The bootstrap software using a basic set of built-in tests, then copies the performs FSW from EEPROM to DRAM and executes it. In flight, is are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
The DPU-DCI for provide the capability shall an application program to set the ping-pong Limit at which buffers. hardware will swap Address the,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms the Choose Guide Stars scans chooses bright stars in the reference frame, the guide stars and sets up tracking windows around o guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking brightest relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the frame stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
errors DPU-SCUI shall report for to The DPU-CCM the inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine for the BIT Results into bitHk copies inclusion Housekeeping. in DPU the,1
"XRT_POS observing and new GRB, resize the When becomes available from the ICU, the DPU-DPA shall shift and a the image and event windows appropriately.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module. The DPU-BOOTSTRAP one EEPROM as the words only. The specific timing requirements of the EEPROM are satisfied in accesses of three ways:* the timing requirements are met by (DOWNLOAD specific wait loops (typical),* ?-bit timing requirements are met by use of the EEPROM Driver inserting command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
a DPU-SSI shall provide to capability for an application program the install The callback routine to SSI to the respond Error Interrupt.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, in the DPU DCI hardware, responds to the ICU Processor a Mode Ready message then receives detector events Event calling functions tmaliWait() and tmaliNextEvent(). The by Processor Task will collect detector events for the time period specified configures the Mode command then issue a Mode Complete message to the ICU. After issuing the Mode Complete message, the Event with Task will enter the Idle state.",0
The Data compression software shall produce compressed uncompressed DPU from Data Packages Packages.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM to the Company X Communication Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only. The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by regardless amount of time which will be required on execute the intervening instructions the of the CPU speed setting (DRAM test logic).",0
The to CSC load provide the capability to automatically shall DRAM configuration of DPU-RTOS from EEPROM DPU-BOOT a and start its execution.,External EEPROM) InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed BIT be DRAM. Program into the to results data structure in in,1
The the shall report errors to an application program by setting and ERRNO task returning DPU-DCI variable ERROR.,"Public FunctionsThis routine is called from the MIL-STD-1553 Command ISR command the SSI Interface ISR any time a and arrives by to SCU or the ICU, the enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
"failed DPU-BOOT The shall create a record DRAM CSC of blocks, BIT_DRAM, in the SYSTEM_BLOCK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1. This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM). Boot Sequence 1 is put primarily of 4 steps as follows.First, in this sequence, EEPROM is updated. Then, CPU memSize. and a portion of DRAM BIT is performed. Next, DRAM is cleared. Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, parameters rest of DRAM is tested if skipBit is not set. Load the are composed into registers r13, r14, r15 and r16. DRAM is cleared up to BIT Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"Image mode shall have the ability to produce its Parameterized Finding Chart, algorithm of the image if commanded, using the PROD_FINDING_CHART, described in Appendix C. The Parameterized Finding Chart shall consist of the Intensity/brightness. sources. Each source shall be parameterized by a position [X,Y] and brightest","Data Processing Algorithm their DPA CSC includes the following components:* Algorithms o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and around up tracking windows sets the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. - Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and CSCThe intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers o 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
"The channel boundary engineering mode shall create described in of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, using a flat field, and PROD_MN_DATA, from the algorithm an array Appendix C.","Startup Sequence On flight, a power cycle can only be effected by the SCU. DPU watchdog reset could of induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product be the FSW entering a state in which it fails to strobe the watchdog timer. On boot, the bootstrap tests and clears DRAM, and then proceeds to load it. DPU FSW from EEPROM and executes the The A FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks.",0
"The the CSC shall create a record blocks, in DRAM of BIT_DRAM, failed DPU-BOOT SYSTEM_BLOCK.","DRAM BITPart of the memory is tested in Boot Boot 1, and part of the memory is tested during Sequence Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area. During Boot Sequence 2, the remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads back the entire block. If a single-bit error occurs on the read-back, the location is read again. If another single-bit error occurs, the test assumes a hard error and marks the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the bit The Bootstrap stores to results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words. Each address. in a result word represents the result of testing a ? KB block of DRAM. These bits are mapped the DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase. A set bit indicates that a block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",1
"The the shall be able to count a consecutively reported error. When DPU-CCM the the for a particular error ID, exceeds 250 for a particular reporting period, the error code error be replaced with a will code sequence which shall include the original error code and the number of times count error was reported.","Error Collection and maintained ccmErrEnq() function tracks the last error reported and its frequency of occurrence. Once an error code has becomes reported it been the previously reported error code ReportingThe by ccmErrEnq(). A repetition count is then incremented for each error, consecutively reported, identical instance of this previously reported error. If this error code is reported more than once in one high-rate housekeeping reporting period, then a special subsequent, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
"There shall be four engineering modes associated with mode, intensifier raw event channel mode, list boundary the centroid confirmation mode, and detector: characteristics mode.",Public FunctionsThis routine provides mode. means for the CCM task to send a Mode command ICU the from to the DPA software. The Mode command shall be used to command the DPU into a a science or engineering event processing particular The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,1
The DPU-DPA shall provide a event mode window event exposure. The size of the shall shall be commandable. The per mode exposure time window be commandable.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS in When the DPU receives the Clock Message, the the ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure.. The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch at the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function signal. the hardware). Once the new time is latched, 1553 hardware automatically disables the time latch function to avoid the potential of latching in an old time in the next 1 PPS signal.will be received within one second. In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
to SYSTEM_BLOCK. CSC shall The detected BIT failures log the DPU-BOOT,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system. The results of this test are stored in the EEPROM. The DPU-RTOS a the results of the memory test to functions memory segments with bit errors from the system memory pool. The Bootstrap constructs a to map which effectively implements a list of failed memory blocks during the bootstrap built-in test. A set of functions have been created to utilize this bit map bit exclude failed memory blocks from the VxWorks system memory pool. The system memory pool is used by VxWorks to allocate memory dynamically. In addition, uses linked list of good memory segments is created for use by the EDAC Memory Scrubber. These exclude are called from the usrInit() and usrRoot() functions in usrConfig.c. The dramInit() function must be called prior to kernelInit() in usrInit(). The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a command. of the configuration from EEPROM to DRAM and execution its start on DPU-RTOS,"Transmitting Telemetry to the Data SCUI CSC receives telemetry as input Data Packages via preference populated by other tasksthe Science Data Processing Task, the SpacecraftThe Compression Task, and the Command and Control Task. The SCUI CSC has a High Priority Queue and a Low Priority Queue. are two queues The implemented in an identical manner with the exception that the scuiTask() gives processing queues to the High Priority Queue. The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
The not shall provide data capability for DPU-SCUI producing applications to specify whether or the queued data may be segmented.,"Bootstrap MonitorThe Bootstrap and error entered commands for syntax and number of arguments, Monitor displays an argument message to the RS-232 interface if an invalid command or checks is entered. A complete listing of these messages is given in document 7384-BSPS-01.",0
The DPU-BOOT CSC the enable the to shall SCM. on power EEPROM,"Full-Frame (FF) the ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of format detector to produced hot spots and dead pixels. Detector events locate in Full Frame High Resolution detector the are received and histogrammed for a commanded integration time. The entire Instrument Y is transmitted to Engineering ground. This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
The DPU-CCM shall have for capability of calculating a CHKS_32 the a particular address range on command.,"Data Processing Algorithm generates DPA CSC the the following components:* Event Processor Task communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates includes Finding Chart, performs task. Engineering Modes, CSCThe housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM the",0
shall and setting report errors to an application program by The the ERRNO task variable DPU-DCI returning ERROR.,"Public FunctionsThis routine provides a set to means the bit arrangement used by the DCI. When bSpecialArrangement is TRUE, the DCI default set to special bit arrangement mode, otherwise the is mode no of rearrangement is set.",0
"The DPU-DCI shall provide the capability for specifies application program to set a timeout in milliseconds that an a period during which no new events have been will by the hardware, after which hardware the received swap ping-pong buffers and interrupt the software.",Normal Data Exchange SequenceThe TMALI CSC serves buffer an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually The to the DPA CSC. delivered TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been data in the Ping-Pong as indicating the EVENT reached is ready to be served to TMALI. TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready. TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,1
The an Monitor of the DPU-BOOT output option CSC Bootstrap error message to the RS-232 interface if an invalid command argument shall is entered.,"Bootstrap MonitorThe Bootstrap complete checks entered commands for if and number of arguments, interface displays an error message to the RS-232 and syntax an invalid command or argument is entered. A Monitor listing of these messages is given in document 7384-BSPS-01.",1
"X DPU-1553 CSC shall the hardware modules as defined in document 1400-01, Company The Specification for address Communication/Memory X Company Module.","Public FunctionsThis routine initializes Message interface to the ICU. This routine opens SSI Driver port, installs the SSI Mode interrupt callbacks, and enables Transmit Driver. interface in the SSI the",0
The CSC shall log detected failures to the SYSTEM_BLOCK.,External Program InterfacesReads results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
The DPU-BIT shall Programmable Read Only (PROM) by computing a checksum and comparing it a checksum stored in PROM.,"Data Timeout in DCIDuring nominal arrive approximately 11 msecs. The DCI hardware will generate an interrupt if event data has been received in one of the and a amount of has during which no additional events have been received. A data timeout interrupt is not an error, but rather typically that the exposure has been completed. The data timeout interrupt allows the TMALI CSC to the trailing from the DCI Ping-Pong buffer. The function tmaliDciTimeoutSet() an API to the Driver to allow the timeout setting be altered.",0
"The Bootstrap address hardware modules defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","DRAM BITPart of the memory tested in Sequence 1, and part of the memory is tested during Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is to this During Boot Sequence 2, the remaining memory is in ? KB blocks. The DRAM BIT first writes the address of each word in block to that word in the block. Then the test flushes the cache and reads back the If a error the read-back, the location is read again. another single-bit error occurs, the test assumes a hard the block If a multiple-bit error occurs, the block is marked bad. If the value read back does not match the address, the block is marked bad. This same process is repeated the ones the address. Bootstrap stores the results of the DRAM in as a series x consecutive y-bit words. Each in a result represents result of testing a ? KB block of DRAM. These bits are mapped DRAM by from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase. A set bit indicates that a block of DRAM has A clear bit indicates that block of DRAM has the test.",1
The DPU-SCUI shall use DPU-1553 to communicate with the MIL-STD-1553B Interface.,Public FunctionsThis routine provides a means the CCM task to the XRT Position command the to the DPA software. The XRT command be to the DPU to update the window parameters that it uses spatially event data.,0
"The DPU-TIS shall provide the for an application program set the value of the on SCM and enable the 1PPS jam register, if automatic time synchronization is enabled.","Command HandlingWhen a arrives from the SCU (via the interface) or the ICU (via the interface), the respective ISR will enqueue the command packet into a Command Queue, and give the semaphore to awaken the ccmCmdTask(). Since is possible for the DPU to send a command to itself, commands may arrive at interrupt context or context. Therefore the CCM maintains two queues one interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
The DPU-ICUI shall an API for other CSCs to transmit messages to ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent(). The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU. After issuing the Mode message, the Event Processor Task will enter the Idle state.",1
The DPU-BOOT CSC shall toggle the BC_INDEX (selecting the opposite configuration) after reading it during the boot process.,"VME Interrupts and Disallow Nested InterruptsThe device drivers do not unmask VME at the processor. This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for interrupts was not considered in the design of this FSW. This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in",0
"The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts Error interrupt, Timeout and Ping-Pong Complete Flag","ProcessingIf Mode command is Instrument Y Mode, the detector events spatially filtered the Instrument Y window specified in the Mode command then corresponding pixel in the Ping or Pong incremented. If specified in the Mode command, pixels will be binned at AxA or BxB. Also, if specified in the Mode command, a tracking data product will for every Ping/Pong tracking frame. Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends XRT Position command, the Instrument mode and Event windows resized to match the new window sizes in the command.",0
The DPU-ADC create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Analog to Digital Converter CSCThe Analog to Digital Driver CSC is a new driver which controls and retrieves from ADC hardware. The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current (ADC_VALUE) for each of the 24 ADC values. * An API function, which a single ADC_VALUE to be updated every other call to the driver. A value is updated every other call since each value requires a settle time well as an conversion time. order to keep the driver simple, the for implementing the correct settle and conversion time rests the application.* An API function, adcGet(), which a copy of the current list of ADC_VALUEs.",1
The DPU-ICUI shall install an ISR to be invoked on SSI receiver interblock gap for the receiving and processing of from the ICU.,"CPU BITThe consists of a series of tests designed to test each of the functional units of the processor. include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and Timer Unit. Each of these tests consists executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test. This is done by a 1s pattern (verified by reading it back) and writing 0s (verified by reading it back).",0
The DPU-EDAC shall record the number MBEs that have detected in DRAM since boot and the address of the two MBEs.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
The DPU-TMALI shall configure the DCI data timeout at startup as specified by TMALI_TIMEOUT provided during initialization. The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis provides a means to get the current timeout value used by the DCI. The returned value is the current in milliseconds.The is discussed in document 036911400, section 4.3.2.4.1.3.",1
"The DPU-DCI shall read from DCI Memory in B-bit words only, using the multiple/store multiple instructions.",Ring buffer data structureThe CSC maintains a FIFO implemented as a buffer temporarily store received from the DCI before it is processed. ring buffer two pointers called pIn pOut to keep track of the data in the buffer. The were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer empty. The buffer stores Events so the pointers to these four byte entities. As the DCI specifies all data in sizes have to be converted reading data.,1
The DPU-RTOS shall an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location EEPROM prior to reboot.,"Data Processing Algorithm CSCThe DPA CSC includes following components:* Algorithms o Choose Guide Stars scans the bright stars in the reference chooses guide stars and sets up tracking windows around guide stars.o Drift Correction calculates the drift offset and of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and intensities.o Derive Channel Boundaries calculates set of channel boundaries (18 numbers - 9X, 9Y) which are by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
"The DPU-BOOT shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.",External Program InterfacesReads the BIT results from the location pointed to pBitResults (which is assumed be in EEPROM) into the BIT results data structure in DRAM.,1
The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
"There shall four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid mode, and intensifier mode.",Install Exception Handlersa default interrupt handler and is installed into element five (5) of interrupt,0
The CSC shall create a record of CPU BIT in the SYSTEM_BLOCK.,"CPU BITThe CPU BIT consists of a series of tests designed to test each the functional units of the processor. These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit. Each these tests of executing few instructions from this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Register (CTR), and the are tested for stuck-bits part of the Branch-Unit test. This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it",1
The DPU-SSI provide the capability for an to determine the number of bytes in a message received from the ICU.,"Public FunctionsSets the poll rate and buffer rate to the values. If the values are out of range, the values are retained an error is reported. The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted on the given poll rate, by the timeout to approximately the poll (not that timeout is expressed in clock ticks, and so the resolution is low and only approximates of the poll rate).",0
"The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Standard I/O primitive does not block. The buffer passed to is written directly to the portion of pong buffer by the driver. This primitive is valid only in TEST mode. The write call set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode. In TEST mode, the driver returns the number of bytes written.",0
The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Public FunctionsThis gets housekeeping data stored for the CSC including some DCI parameters and resets the counters to zero. When the caller supplied pointer to a TMALI_HK structure is NIL data is but tmali internal counters are still reset to zero.Two of the four counters are updated an ISR context, this a task switch safe implementation of these counters. Within VxWorks this could be solved using counting semaphore. In the TMALI CSC design a faster method was used using a free running error counter a careful update of the reported number of using an extra temporary variable. As the increment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost. This means sum of the errors reported by the tmaliHkGet() function is equal to total numbers of errors that occurred, no error reports are due to the update of the",1
"The DPU-SCUI, in the of a buffer full condition, shall discard return an the caller, and an error condition to the DPU-CCM.","CPU BITThe CPU consists of a series of tests designed to test each of functional units of the processor. These include test for the Branch-Unit, the Fixed-Point Unit, Floating-Point Unit, the Interrupt-Unit, and the Timer Unit. Each of these tests consists of executing a selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the are tested for stuck-bits as part of the Branch-Unit test. This is done by writing a 1s pattern by reading it back) and then writing a 0s pattern (verified by reading back).",0
The DPU-TIS shall read from the SCM registers in B-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of registers on the Company Communications module using D16 VME access.,0
"The DPU-DCI shall the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been by the hardware, the hardware will swap buffers interrupt the software.","Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. detailed design of BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes test of the SCM EDAC circuit, a checksum test on SCM PROM, MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. results of the BIT are recorded in the SYS_CNFG_AREA in and are also maintained in DRAM. If an error occurs one of the functions performing the BIT, the test will be reported as a in the test itself.",0
The CSC log detected BIT failures to the SYSTEM_BLOCK.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in the Bootstrap program and of Processing Unit (CPU) BIT, Dynamic Random Memory (DRAM) BIT. The 2 BIT is executed after the operating system is booted and is part of the Bootstrap program.",1
The DPU-SCUI shall provide the capability for data producing applications to specify whether or not queued data may be segmented.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from SCU the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task that command can be executed.",0
The DPU compression software shall produce compressed Data Packages from uncompressed Data Packages.,"FunctionsThis is used to format messages for transmission to the ICU and to those on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the Packet APID and the Message Identifier (refer to document DPUICD-01). A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being by multiple tasks simultaneously. The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an conflict.This routine may be called interrupt context to transmit an ACK/NAK message. In that the semaphore is not since it is not to take semaphore at interrupt context. Refer to discussion the design to the ACK/NAK message.",0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides task heartbeat to the CCM task.",0
"The DPU-RTOS shall be a real-time, operating",Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) and Dynamic Random Access Memory (DRAM) BIT. The Stage 2 BIT is executed after the operating system is booted and is of the Bootstrap program.,0
The DPU-DCI shall provide program with a function to read the contents of the ping/pong buffer.,"Public FunctionsThis routine provides a means to set bit arrangement used by the DCI. When bSpecialArrangement is TRUE, the DCI set to special bit arrangement mode, otherwise default mode of no rearrangement is set.",0
The DPU-CCM shall a mechanism other CSCs to report for inclusion in the DPU_HK.,"Sending Messages to the ICUSome and checking is required in this function to handle the transmission of the ACK/NAK message. When a command arrives the ICU, the will verify the checksum then an ACK/NAK message to the ICU. It is possible that an application in the midst sending message to the ICU at the time a command interrupt occurs. However, since it is not possible for an ISR to take an additional mechanism is required in order to provide mutual exclusion between a task an To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context. If so, it then tests the value of a static icuiEnqBusy. If the variable is set, the function will save the given ACK/NAK message parameters static variables and return. If the variable is not set, the function will as normal (avoiding the semTake() and semGive() calls). In normal execution, the variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK",0
The DPU-BOOT CSC shall to EEPROM in 32-bit words only.,Normal Data Exchange SequenceThe TMALI serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC. TMALI CSC waits for notification from the DCI CSC that frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready be served to TMALI. TMALI reads all EVENT from the DCI and notifies the DCI that it swap Ping-Pong buffers when ready. TMALI gives a semaphore unblock the tmaliWait() call from the DPA.,0
"The DPU-CCM shall DPU_HK at a commandable rate, with a default of 10 seconds.","Time SynchronizationThe interface with the spacecraft as in document 1143-EI-S19121 specifies the spacecraft will provide a Message to each Instrument at a Hz rate. The Clock Message contains two a value representing the current and a value representing the delta from the spacecraft and Univeral Time (UT), based on an epoch of TBD.",0
The DPU-BOOT CSC shall initialize the in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y The Command and Control CSC includes the following A Control Task, ccmCtrlTask(), which initializes DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog and* Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major structures include:* A Data table that keeps track of the operational state. Data included this table includes production rates, CCM specific and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported the DPU FSW. error and event codes are from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system task, usrRoot(). the task is spawned it calls a function, which creates the error/event queue, instantiates needed semaphores and installs various ISRs. Finally, spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, defaults are used. The CCM Control initializes the remaining CSCs by calling the applicable initialization function, or if the CSC an associated task, by spawning the using the VxWorks function, taskSpawn(). When the CCM Control Task initializes a CSC, it the startup defaults from as parameters to the task initialization function. In addition to task initialization activities, also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses created table to verify command lengths for received commands.",0
DPU-DPA shall be able to tracking based on data from the detector by calculating the spacecraft drift successive tracking frames using the algorithm described in C.,"Telemetry Output the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller periodically reads the STPDU contained in the fifteen telemetry subaddresses, then writes to the telemetry subaddress. the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the The software provides fault automatically awaking after approximately two polling periods. timeout is automatically adjusted any time the Poll Rate value is by command.",1
The DPU-BOOT CSC shall write to EEPROM in 32-bit words only.,"Telemetry to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress. When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask(). The software provides fault automatically awaking after approximately two polling periods. This timeout is automatically adjusted any time SCU Poll Rate value is changed command.",0
"The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is","Public FunctionsOperationally, DPU uses bit in the DCI CSR indicate whether the DPU is syncing its clock with the spacecraft or not. This function sets Jam bit autoSync is FALSE, and negates Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an software error occur. An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"driver is initialized by invoking the initialization function adcInit(). The function initializes ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three to adcUpdateNext()). The ADC Driver can be re-initialized, which result in the values in the ADC_LIST_ENTRY array being to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D. The upper are used to indicate invalid or suspect values follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during no new events have been received by the after which the hardware will swap buffers and software.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor. These for the Branch-Unit, Fixed-Point Unit, the Unit, the Interrupt-Unit, and the Timer Unit. Each of these tests consists of executing a selected from unit. The General Purpose Registers (GPR), Segment Registers (SR), the Counter Register (CTR), the Condition Register tested stuck-bits as part of the test. This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
The DPU-ADC shall create analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"InitializationThe driver is initialized by invoking initialization adcInit(). The function initializes the ADC_LIST_ENTRY array, up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for first conversion (otherwise very first ADC value requires three calls to adcUpdateNext()). The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit The upper bits are used indicate invalid or suspect values as follows:* At initialization, MSbit of each of ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the reads the analog value and determines that conversion has not yet completed), the second MSbit.",1
"In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Event ProcessingIf the Mode command is Instrument Y the detector events are spatially filtered to the Instrument Y window specified in the Mode command then corresponding pixel in the Ping or buffer incremented. If specified in the Mode command, pixels will be binned at AxA or BxB. Also, if specified in the Mode command, a tracking frame data product will produced for every Ping/Pong tracking frame. Instrument and Event Mode may be commanded in the command. If the sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes the command.",1
The shall provide the capability for an application program to receive data at a of bytes per second over the DCI,"Startup Sequence flight, a power cycle can only be effected by the SCU. A watchdog reset could be induced by the DPU FSW to a detected, unrecoverable error, or it could occur a of FSW entering a in it fails to strobe timer. On boot, the bootstrap tests and DRAM, and proceeds to the DPU EEPROM executes The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and the various DPU FSW tasks.",0
The DPU-ADC shall write to the SCM registers in B-bit words only.,"Command HandlingThe DPU accepts commands via two interfaces from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via SSI interface. of the DPU commands can be from the SCU or the ICU. The for a command from the DPU is the following:* is generated and sent by the ICU via the SSI.* SCU is generated and sent the SCU via the G-ICU command is generated on the ground sent to DPU via the ICU/SSI.* G-SCU command is generated the ground and sent to the DPU via SCU/1553.",0
"The DPU-SSI shall provide an operational mode MESSAGE MODE) for transmitting blocks in which consecutive words in a are transmitted, and the transmitter disabled until a transmit IBG interrupt is At this point the transmitter is re-enabled, and the next message can be transmitted.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface CSC is a new component that support for application-level communication with the INSTRUMENT ICU. The ICUI CSC is primarily responsible for implementing the application protocol the ICU defined in document DPUICD-01. In to meet these objectives, ICUI provides: * An ICU Interface Message which provides an by which other CSCs can send to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which from the ICU and forwards them to the Command and Control Task for processing.* An Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the of the Command and Control Task.",0
The DPU-SCUI shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,Public FunctionsThis routine a means for the CCM task to a command the ICU to the DPA The Mode command shall be used to command the DPU into a science or engineering event processing mode. The shall become effective after sent Mode Ready message the ICU.,0
The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N and it to DPU-CCM for processing.,"Command HandlingWhen a command arrives from the SCU (via the interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet a Command and then give the semaphore to the ccmCmdTask(). Since possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context. Therefore the CCM maintains two queues one for interrupt context which is semaphore protected, and one for task context which is semaphore protected.",1
"The DPU-TMALI utilize SCM_DCI_SR, along with ERRNO by decode errors and place them on an error queue for DPU-CCM.","initial sequencethe initial boot sequence, identified as Boot 1. This processing takes place when the Bootstrap from Programmable Read-Only Memory (PROM). Boot Sequence is composed primarily of 4 steps as in this sequence, EEPROM is updated. Then, CPU BIT and a of DRAM BIT is performed. Next, DRAM is cleared. Lastly, Boot Sequence is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set. Load parameters are put into registers r13, r14, r15 and r16. DRAM is up memSize. Lastly, the DPU-RTOS or Bootstrap Monitor is loaded according to the load parameters.",0
The DPU-BOOT CSC shall create a record of the CPU BIT in SYSTEM_BLOCK.,"Startup SequenceThe DPU FSW is booted using bootstrap software. The bootstrap software performs a basic set built-in tests, then copies the DPU from EEPROM to DRAM and executes it. In flight, there are two methods which can trigger the DPU FSW to boot:* power-on boot), or* watchdog reset (warm boot, reboot).",0
The DPU-DCI write to the DCI Memory in words only.,"Bootstrap MonitorThe Bootstrap Monitor entered commands for syntax and number of arguments, and displays an message to the RS-232 interface if an invalid command or argument is entered. A complete listing of these messages given in document 7384-BSPS-01.",0
"The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong interrupt, and Ping-Pong Complete Flag interrupt.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project. The Command and Control CSC includes the following components:* A Control Task, initializes the DPU FSW and spawns other tasks schedules the production of DPU housekeeping data packets, the execution other tasks, and schedules execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Data table that keeps of the operational state. Data included in this table includes housekeeping production rates, CCM specific flags, and the number of executed.* A Command Queue into which commands are placed when they arrive, via interrupt, the ICU or the SCU.* An Queue which accumulates error and codes which are reported by the DPU FSW. These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from operating system startup task, usrRoot(). After the task is spawned it a function, which creates the error/event queue, instantiates semaphores and installs various ISRs. Finally, it spawns the remaining tasks which comprise the FSW. When the CCM Control Task starts up, it reads DPU configuration startup the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA is bad, hard-coded defaults are used. CCM Control Task initializes the remaining CSCs calling initialization if the CSC an task, by spawning the using the VxWorks function, taskSpawn(). When the CCM Control Task initializes a CSC, it passes the startup defaults from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify expected command lengths for newly received",0
"The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset CTS is not asserted.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. The detailed of the BIT CSC The Built-In Tests identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The of the BIT recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM. If error occurs in one the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
The DPU-BIT shall perform MIL-STD-1553B internal,"Command and CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project. The Command and Control CSC includes the following components:* A Control Task, which initializes the DPU and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch ccmCmdTask(), which and dispatches real-time commands received from SCU or the ICU.Major data include:* A Static Data table that keeps track of the operational state. Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they via interrupt, from the ICU or the SCU.* An Queue which accumulates error and event codes which are reported by the DPU FSW. These error and codes are removed from the queue and placed into a telemetry packet at a given interval and in housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), the operating system startup task, usrRoot(). After the task is spawned it calls a function, ccmInit(), which the error/event queue, needed semaphores and installs various ISRs. Finally, it spawns the remaining tasks which comprise the FSW. When the CCM Control Task starts up, it DPU configuration defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA is bad, defaults are used. CCM Task initializes the remaining CSCs by the applicable initialization function, if the CSC has an associated task, by spawning the task using VxWorks function, taskSpawn(). When the CCM Control Task a CSC, it passes the startup defaults read from EEPROM as parameters to the initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor the created table to verify expected command lengths for newly received commands.",0
The DPU-DCI shall provide access to DCI status so that application program can determine error type.,"BITThe CPU BIT consists of a series of designed to test each of the functional units the processor. These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit. Each of these tests consists of executing a selected instructions from the this functional unit. The General Purpose (GPR), the Segment (SR), the Counter Register (CTR), and the Condition Register are tested for as of the Branch-Unit This is done by a 1s (verified by reading it back) and then writing a 0s pattern by reading it back).",0
The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is used to messages transmission to the ICU and to place those messages on the SSI Driver Transmitter The functionCode parameter used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01). A mutual exclusion semaphore, icuiSemWrite, protects the SSI from being written by multiple tasks simultaneously. The timeout parameter lets the caller control how long it willing to block this semaphore if there is an access conflict.This routine may be called at interrupt context transmit an ACK/NAK message. In that case, the semaphore is not since it is not to take a semaphore at interrupt context. Refer to discussion of the design to accommodate the ACK/NAK message.",1
The DPU-BIT shall report BIT_HK on request.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module. The accesses as ?-bit words The specific timing requirements of the EEPROM satisfied in one of three the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use the EEPROM Driver (DOWNLOAD command), andthe timing requirements met implicitly by the amount of time which be to the intervening instructions regardless of CPU setting (DRAM test logic).",0
The DPU-ADC to the SCM registers in words only.,Exchange SequenceThe TMALI CSC serves as an manager of EVENT data supplied by the DCI Driver CSC eventually delivered to the DPA CSC. The TMALI CSC waits for notification from the DCI CSC that frame limit (or has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI. TMALI reads all EVENT data from the DCI and notifies the DCI that can swap Ping-Pong buffers when ready. TMALI gives to unblock tmaliWait() call from the,0
DPU-BOOT CSC shall boot the primary or alternate configuration of DPU-RTOS according to the BC_INDEX in the SYSTEM_BLOCK.,"Command and Control CSCThe Command and Control (CCM) CSC a Level 2 reuse component from the Y project. The Command and Control CSC includes the following Control Task, ccmCtrlTask(), initializes the DPU FSW spawns tasks at schedules the production of DPU housekeeping packets, monitors of other tasks, and schedules the execution of other periodic tasks such as the heartbeat and the watchdog and* A Command Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Data table that keeps track of the operational state. Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* Command Queue into which commands are when they arrive, via interrupt, from the ICU or SCU.* Error/Event Queue which accumulates error and event codes which are reported by DPU FSW. These error and event codes are removed from the and placed into telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup usrRoot(). After the task spawned calls function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs. Finally, it spawns the remaining tasks which comprise DPU FSW. When the CCM Control Task starts up, it reads configuration defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, defaults are used. The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or the CSC an associated task, by spawning the task the function, taskSpawn(). the CCM Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the initialization function. In to its initialization activities, ccmInit(), also initializes the command length verification table calling ccmCmdLengthInit(). command processor uses the created table to verify expected command lengths for newly commands.",0
The DPU-BOOT CSC put the processor into diagnostic mode.,"Standard I/O InterfaceThe primitive does not block. The buffer passed to is written directly to the active portion of the ping pong buffer by the This primitive is only TEST mode. The write call will set errno to S_dci_MODE_ERROR and the driver is in NORMAL mode. In TEST mode, the driver returns the number of bytes written.",1
The DPU-CCM shall provide a mechanism for other CSCs report errors for inclusion in the DPU_HK.,"Error Collection and ReportingThe CSC provides centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report Each time it wakes, ccmTask() checks to see if it is time to form an packet for to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the and forward it to DPU-SCUI for to the ground.",0
The DPU-RTOS shall install hook routine which is invoked on exception which shall to the interrupt vector to the LAST_BOOT_IVEC EEPROM prior to reboot.,"Install Exception Handlers The RSC processor also generates an external interrupt the Power Fail Interrupt. The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt. Some custom routines be to access this interrupt. These are described below, and contained in sysLibSup.c.",1
The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF INSTRUMENT Y projects. The design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the Data The results the BIT are in the SYS_CNFG_AREA in EEPROM and are maintained in DRAM. If error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"commanded, during the collection data, the DPU-DPA produce PROD_ACS_MSG.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the Y project. The and Control CSC includes the following components:* A Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures A Static table that track of the operational state. Data in this includes production CCM specific flags, and the number of executed.* A Command Queue into commands are placed when they arrive, via interrupt, from the or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by DPU FSW. These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control is initialized by spawning the CCM Control ccmCtrlTask(), from the operating system startup task, usrRoot(). After the is spawned it a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and various ISRs. Finally, it spawns the remaining tasks which comprise DPU When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA is bad, defaults are used. The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning task the taskSpawn(). When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM parameters to the task initialization function. In addition to its initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify expected command lengths for commands.",0
This DPU-TIS shall provide the capability for an application program to enable and disable automatic time synchronization.,"Data Transfer to QueueDuring initialization, the installs an ISR hook routine, tmaliTransferToQueueISR(), into the DCI which is invoked when:* the DCI interface the programmed frame limit in the Ping-Pong buffer, the DCI interface detects a data receipt timeout.",0
The DPU-SCUI shall communicate with the SCU according to defined in 1143-EI-S19121.,"SequenceThe DPU FSW booted using bootstrap software. The software performs basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it. In flight, there are two methods which can trigger the DPU FSW to power-on (cold boot), watchdog reset (warm boot, commanded reboot).",0
The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for to the ground. If ccmTask() calls to actually create the packet forward it to DPU-SCUI for transmission to the",0
The DPU-RTOS shall provide a function to an application program to write the Real-Time Clock on the CPU Module.,"Time SynchronizationThe time contained in the Clock Message is specified be valid on the rising edge the next 1PPS signal. When the DPU receives the Clock Message, 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to TIS via the TIS_CLK_MSG data structure.. The tisTimeSync() function will immediately copy the spacecraft value to the DPU clock hardware registers. The DPU hardware designed to latch the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware). Once the is the hardware automatically disables the time latch to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one In the unlikely event UT Delta discarded, an message is enqueued to ccmErrEnq() for informational purposes.",1
The DPU-EDAC shall record the number of that been in PROM and since boot and the of the last two SBEs.,"DRAM BITPart of the memory is tested Boot Sequence 1, and part of the is tested during Boot 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is to this area. During Boot Sequence 2, the remaining is tested in KB blocks. The DRAM BIT first the address of each in a block to that word in the block. the flushes the cache and reads back the entire block. If single-bit error occurs the read-back, the location is read again. If another single-bit error occurs, the test assumes a hard error and the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value does match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT EEPROM a series of x y-bit words. a result word represents the result of testing a ? KB block of These bits are mapped to DRAM by proceeding from least-significant bit to most-significant bit as the addresses of the memory blocks increase. A set indicates a of DRAM has failed. A clear bit that a block of DRAM has passed the test.",0
The DPU-DCI shall report errors to an application program by setting the ERRNO and returning ERROR.,"Public FunctionsThis routine is called by any CSC in order to report error or event that should included in DPU housekeeping. If this routine is called from interrupt context a static global ccmISRError, is set that error can be enqueued later (see ccmCtrlTask()). This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR. The error queue semaphore priority inversion set to reduce conflicts between callers should a priority inversion situation arise. This routine also replaces frequently occuring with a special repeat error code. The repeat code is a special error code that follows a reported error code indicate that the normally reported error code previously reported has occurred more than once the last rate reporting period",1
"The DPU-TIS provide the capability for application program to set the value of the on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","FunctionsThis used format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode is create CCSDS Packet APID and the Message Identifier to document DPUICD-01). A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to an message. In that case, the semaphore is not taken since it is valid to take a semaphore at interrupt context. Refer to discussion of the design to accommodate the ACK/NAK message.",0
The DPU-ICUI shall DPU-SSI to communicate with SSI Interface.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous interface (SSI) bus, which utilizes an gap (IBG) to delineate complete messages from one another. The DPU hardware produces interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an can install an interrupt hook routine to respond IBG interrupt. the ICUI CSC installs hook the SSI called icuiCommandReceiveISR(), which verifies checksum of an incoming command, transmits an message to the ICU, then enqueues the command for later processing by calling ccmCmdEnq().",1
The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection any failure.,Error Detection and Correction Error Detection Correction (EDAC) CSC reuse component from the and INSTRUMENT Y projects. The EDAC of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task. The design of the INSTRUMENT Y EDAC CSC is described in CIDPSDS-01.The only design change was to add logic to check for excessive EDAC interrupts.,1
The shall process non-deferred commands B ms of from ICU or the,"Structural TIS CSC provides a library of functions to* initialize the DPU clock at startup,* maintain synchronization the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values the DPU clock the and provide for use by CCM command dispatcher to alter the configuration of the clock interface.",0
The DPU-BIT shall perform two tests on the RAM the DCI Data Buffers. The write the address of each location that location. The second test shall write the ones complement of the values used in first test.,"Telescope Module Access and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the Driver, but which have yet been retrieved by the DPA CSC;* API which facilitates the retrieval detector events the queue by the DPA CSC. The API of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API function, tmaliHkGet(), which gathers CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from DCI to the queueAn error handling ISR, tmaliDciErrorReportedISR(), is as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the",0
The DPU-DPA perform bounds checking before accessing memory.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding in the Ping or Pong buffer is incremented. If specified in the Mode command, pixels will be binned at or Also, if specified in the Mode command, a tracking frame data product be produced for every Ping/Pong tracking Instrument Event Mode may be commanded simultaneously in the Mode command. If the ICU sends XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in command.",0
DPU-BIT shall report BIT_HK on,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the X ICU. ICUI is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers Interface housekeeping data at the request the Command and Control Task.",0
The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. detailed design of the BIT CSC The Built-In Tests CSC, identified DPU-BIT, performs the 2 (BIT). The Stage 2 BIT a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B BIT, and a of DCI Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA EEPROM are also maintained in DRAM. If error occurs in one of the performing the BIT, the test be reported as a failure in itself.",0
The DPU-DCI shall provide an program with the ability to toggle the hardware interface Normal mode and Test mode.,Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware. The driver features two a test mode and a normal mode.,1
"The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed test, floating point test, an interrupt test, a timer test, and a register test.","Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse from the SSFF and INSTRUMENT Y projects. detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In (BIT). The Stage 2 includes a of the SCM EDAC circuit, a checksum test on SCM internal BIT, and memory test of the DCI Data Buffers. The results of the BIT are in the SYS_CNFG_AREA in EEPROM and also maintained in DRAM. If error occurs in one of functions performing the the result will be reported as a failure in the itself.",0
The Bootstrap Monitor of DPU-BOOT CSC shall provide the capability to load a of DPU-RTOS from EEPROM to DRAM and start its execution on command.,"InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM the X Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words The specific timing requirements of the EEPROM satisfied in one of three ways:* the timing requirements are by wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time will be required to execute the intervening instructions regardless of the speed setting (DRAM test",1
The DPU-ICUI shall report to DPU-CCM for inclusion in the DPU_HK.,"Error Collection ReportingThe DPU-CCM CSC provides a error reporting ccmErrEnq(), that other FSW tasks use to report errors. Each time it wakes, ccmTask() checks to see it is to form an error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
The DPU-BOOT CSC shall enable EDAC SCM.,"DPU-BIT should be initialized every time the DPU boots. startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and device drivers.",1
"The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU maintaining an un-incremented ST_PDU Transfer Request Counter field.","Output Spacecraft 1553 BusThe SCUI reads the Data from the queues transforms them into CCSDS Version 1 Source Packets. These Source Packets are packed into the STPDU for transmission the SCU. This processing is by scuiConvertToSTPDU(). The STPDU, prefixed with a Transfer Counter (TRC), is then written to fifteen sequential 1553 subaddresses described in the Company X 1553 ICD) by the function scuiWrite().",1
"The DPU-TMALI install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong interrupt, and Ping-Pong Complete Flag interrupt.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt. The hook routine will be called from interrupt context. This function returns OK always.,1
"The DPU-BOOT CSC&#39;s boot monitor shall follow the protocol specified in BSPS-01 (Boot Monitor Protocol Specification), with the following exceptions.",Boot Monitor The boot monitor checks the syntax and number of parameters of the input command and displays an error message to the RS-232 interface if an invalid command or parameter is entered. A complete list of these messages is given in file 7384-BSPS-01.,1
DPU-TIS should report errors to the application by setting the ERRNO task variable and returning ERROR.,"When error collection and reporting starts, the error queue does not exist because it has not been created yet. Errors that occur in the early stages of error reporting are assigned directly to the global task variable errno. Readers can refer to Section 2.3.7 of the &quot;VxWorks Programmer&#39;s Guide&quot; for more information about errno. If errno is set after the error queue is created, it is queued to the error queue by calling ccmErrEnq().",1
DPU-DPA shall provide task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCDPA CSC consists of the following components: * Instrument Y processor task creates histogram instrument Y, performs tracking (select guide star, drift correction, shift and summation), creates reference, accumulation and data product buffers, and CCM tasks provide task heartbeats.",1
DPU-DPA will complete the exposure within the time specified by the MODE command - even if the final tracking frame needs to be truncated.,"Public Function This routine provides a method for the CCM task to send stop mode commands from the ICU to the DPA software. The stop mode command is used to instruct the DPU to immediately stop processing events, complete the current data product, clear the events from the DPU hardware, and enter idle mode. Data products will include actual exposure time and number of frames. In response to this command, the DPU should issue a Mode Complete command to the ICU after completing the above tasks.",1
DPU-TMALI should install callback routines to respond to DCI error interrupts.,Install exception handler This routine installs a hook routine for the memory error interrupt. The hook routine will be called from the interrupt context. This function always returns OK.,1
DPU-ICUI should use DPU-SSI to communicate with the SSI interface.,Real-time clock interface The real-time clock (RTC) register of RAD6000 is a special register that is usually inaccessible to C language programs. Some assembler wrapper functions provide access to these.,0
The DPU-DPA should calculate the drift relative to the reference frame based on the established guide star and then perform the shift and addition of the image pattern data.,"Event Handling If the mode command is an instrument Y mode, detector events are spatially filtered to the instrument Y window specified in the mode command and the corresponding pixel in the Ping or Pong buffer is incremented. If specified in the mode command, pixels will be binned by AxA or BxB. Additionally, if specified in the mode command, a trace frame data product will be generated for each Ping/Pong trace frame. Instrument Y and event modes can be commanded simultaneously in the mode command. If the ICU sends an XRT position command, the instrument Y-mode and event mode windows will be resized to match the new window size in the command.",1
DPU-SSI should only be read from the SSI register as 16-bit words.,"Controlling and Monitoring The CCM control task also handles memory dump commands. If a data dump command is executed, the CCM control task breaks the dump into manageable portions and dumps a small portion at a time each time the task wakes up. The purpose of this delay activity is to prevent large dumps from consuming available CPU time by keeping high-priority CCM command scheduling tasks busy for an extended period of time.",0
"The DPU-CCM shall include the ability to read data from DRAM, VME bus and ground command IOCC.","Initialization The SCUI CSC is initialized when the CCM CSC generates scuiTask(). The initialization parameters passed to scuiTask() include: * Poll Rate S/C The rate at which the DPU is polled for telemetry. The rate is specified in Hz, with the default value being X Hz, based on the instrument X-DPU polling rate in the company&#39;s X 1553 ICD. * The buffer rate value is used to rate buffered data sent to the S/C. The rate is specified in bits per telemetry poll, with a default value of 7664, which equals one STPDU per poll (*** bytes per STPDU multiplied by V bits/byte). This default effectively disables rate buffering. * Low priority queue size The size of the low priority telemetry queue in bytes. If the requested amount cannot be allocated, the buffer will be allocated according to the amount of memory contained in the largest free memory block. High Priority Queue Size The size of the high priority telemetry queue in bytes. If the requested amount of memory cannot be allocated, the buffer will be allocated according to the amount of memory contained in the largest free memory block.",0
"The DPU-BOOT CSC&#39;s boot monitor shall provide the ability to read from dynamic random access memory (DRAM), VME bus, and input/output channel controller (IOCC) on command.",Data Capture Interface Driver CSC The Data Capture Interface (DCI) driver CSC is a new driver that provides the standard VxWorks driver interface for DCI hardware. The driver has two modes: test mode and normal mode.,0
"The DPU-BOOT CSC&#39;s boot monitor shall provide the ability to read from dynamic random access memory (DRAM), VME bus, and input/output channel controller (IOCC) on command.",Built-in Testing The DPU&#39;s built-in testing (BIT) has two phases. The Stage 1 BIT is included in the bootloader and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. Stage 2 BIT is executed after the operating system starts and is not part of the Bootstrap program.,1
"At the end of the download, the DPU-BOOT CSC&#39;s boot monitor should calculate the CHKS_32 on X stored in the EEPROM and compare it to the CHKS_32 sent with X during the transfer. The boot monitor should output CHKS_32 to the RS-232 interface and a message indicating whether the download was successful.","Telemetry Output to Spacecraft 1553 Bus The SCU is a MIL-STD-1553 Bus Controller (BC) that periodically reads the STPDU contained in the 15 telemetry subaddresses and then writes to the telemetry completion subaddress. When the telemetry completion subaddress is written, scuiTlmDoneISR() is called, which gives a semaphore to wake up scuiTask(). The software provides fault tolerance by automatically waking up after approximately two polling cycles. This timeout is automatically adjusted whenever the SCU polling rate value is changed via a command.",0
DPU-ICUI should report errors to DPU-CCM for inclusion in DPU_HK.,"Command processing commands are dequeued from the command queue and executed by the command scheduling task ccmCmdTask(). The task blocks on the semaphore given by ccmCmdEnq(). ccmCmdTask() wakes up on the semaphore and calls ccmCmdProcess() to process the waiting command. The ccmCmdProcess() function then retrieves the waiting command from the command queue and calls ccmCmdDispatch() to verify the expected length of the command and execute it. If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command to the ground. Keeps a count of rejected commands and executed commands. If the command sent to ccmCmdEnq() is a 1 Hz clock time message or an attitude message from the spacecraft, the command is not forwarded to the command queue but is executed directly in the interrupt context. The gesture message is forwarded to dpaCommandSend() and the 1 Hz clock time message parameter is passed to tisTimeSync() to synchronize the current time. Any other non-DPU or spacecraft observatory messages are silently discarded without reporting an error. In order to ensure that the ccmCmdTask() task reports to the CCM control task regularly without ground commands, the timeout value of the semaphore is 20 seconds. If the semaphore times out, the task verifies that there is no command in the command queue and reports to the CCM control task by calling ccmTaskReport().",0
DPU-DCI should report errors to the application by setting the ERRNO task variable and returning ERROR.,"Built-in Test CSC Built-in Test (BIT) CSC is a level 2 reusable component from SSFF and INSTRUMENT Y projects. The detailed design of BIT CSC is as follows. The built-in test CSC (identified as DPU-BIT) performs phase 2 built-in testing (BIT). The Phase 2 BIT includes SCM EDAC circuit testing, SCM PROM checksum testing, MIL-STD-1553B internal BIT, and memory testing of the DCI data buffer. The result of BIT is recorded in SYS_CNFG_AREA of EEPROM and also saved in DRAM. If an error occurs in one of the functions executing the BIT, the test results will be reported as a failure of the test itself.",0
DPU-DCI should only write to DCI memory in B-bit words.,"Standard I/O interface write primitives do not block. When the driver is not in BGTX message mode, the write() primitive is managed by the tyLib function tyWrite(). The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns the number of bytes written or an error.",1
"Each time the DPU-RTOS is copied from EEPROM to DRAM and executed, the DPU-BOOT CSC should increment the BOOT_CNT parameter in the EEPROM.","Telemetry Output to Spacecraft 1553 Bus The SCU is a MIL-STD-1553 Bus Controller (BC) that periodically reads the STPDU contained in the 15 telemetry subaddresses and then writes to the telemetry completion subaddress. When the telemetry completion subaddress is written, scuiTlmDoneISR() is called, which gives a semaphore to wake up scuiTask(). The software provides fault tolerance by automatically waking up after approximately two polling cycles. This timeout is automatically adjusted whenever the SCU polling rate value is changed via a command.",0
"DPU-CCM should generate tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI on startup.",Public Function This routine is generated by the command and control task to initialize and execute the DPA Instrument Y processing task.,1
The DPU-DCI shall provide the application with the ability to reset the DCI by writing to the DCI reset register.,"Bootstrap CSC Bootstrap CSC is a level 1 reusable component from SSFF and INSTRUMENT Y projects. The bootloader for the Company Different interfaces are used: INSTRUMENT Y CIDP/SCU. * The Task Elapsed Time (MET) clock interface on Company X DPU is different from the interface used on INSTRUMENT Y CIDP/SCU. * INSTRUMENT Y The bootloader is able to recognize a cold (power-on) boot from a hot (watchdog reset) by checking the value of the MET clock, which does not reset to zero on a warm boot. The Company X DPU MET clock is reset to zero on both cold and warm boot, so there is no difference in the Company X bootloader.",1
The DPU-BOOT CSC shall provide the functionality to automatically load the DPU-RTOS configuration from EEPROM to DRAM and start execution.,"Initial boot sequence Initial boot sequence, identified as boot sequence 1. This processing occurs when the bootloader is executed from programmable read-only memory (PROM). Startup sequence 1 mainly consists of the following four steps. First, in this sequence, the EEPROM is updated. Then, the CPU BIT and part of the DRAM BIT are executed. Next, the DRAM is cleared. Finally, boot sequence 2 is copied to DRAM and executed. During this sequence, if skipBit is not set, the remainder of the DRAM is tested. The load parameters are placed in registers r13, r14, r15 and r16. DRAM is cleared to memSize. Finally, DPU-RTOS or Bootstrap Monitor is loaded and executed based on the loading parameters.",0
DPU-DCI shall provide applications with the ability to receive data over the DCI interface at a rate of A bytes per second.,"CPU BIT The CPU BIT consists of a series of tests designed to test each functional unit of the processor. These include tests of branch units, fixed-point units, floating-point units, interrupt units and timer units. Each of these tests consists of executing some selected instructions in that functional unit. As part of branch unit testing, the general purpose register (GPR), segment register (SR), counter register (CTR) and condition register are tested for stuck bits. This is done by writing a pattern of 1 (verified by readback) and then a pattern of 0 (verified by readback).",0
"The DPU-ADC should provide the ability for applications to perform an alternate read/set startup sequence that will read the A/D result settings from the last call, store the results into a scan list, and set up the conversion scan for the next call item in the list; then on the next call the transition set during the previous call is started.","Standard I/O interface write primitives do not block. When the driver is not in BGTX message mode, the write() primitive is managed by the tyLib function tyWrite(). The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns the number of bytes written or an error.",0
DPU-SSI shall provide applications with the ability to read the SSI status register.,"Error Collection and Reporting DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), which is used by other FSW tasks to report errors. Every time it wakes up, ccmTask() checks if it&#39;s time to form an error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to the DPU-SCUI for transmission to the ground.",0
"DPU-TMALI should be configured with a ping-pong frame limit on startup, as specified by TMALI_PP_LIMIT provided during initialization. The default value should be M frames and should be able to be modified dynamically.","Public Function This function sets the frame depth of the Ping-Pong buffer used by DCI CSC. Frame depth determines how many frames are read into the selected ping-pong buffer before interrupting. The initial value of the frame depth setting is determined by the parameters provided when starting tmaliTask. The maximum commandable value for the frame depth is 64 frames, attempts to command the frame depth to a value greater than this maximum will cause the timeout to be set to the default value for V-frames. The actual setting of the frame depth may be delayed a small amount of time if there is activity on the DCI bus, and usually changes when the DCI has just reported that a frame level or timeout condition has been reached. This minimizes the chance of changing settings when the hardware is about to detect a frame event. Changing the frame depth while the DCI CSC is processing data may cause unpredictable results. When a new tmaliDciFrameDepthSet command is sent before the previous setting is activated, the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",1
DPU-ICUI should report errors to DPU-CCM for inclusion in DPU_HK.,"Error Collection and Reporting The ccmErrEnq() function tracks the last reported error and how often it occurs. Once an error code is reported, it becomes the previously reported error code maintained by ccmErrEnq(). The repeat count is then incremented for each subsequent, consecutively reported identical instance of that previously reported error. If this error code is reported multiple times within a high-rate overhead reporting cycle, the special error S_ccm_ERR_REPEAT is queued with a repeat count of the error encoded in the least significant byte. This mechanism effectively reduces the likelihood of housekeeping telemetry being overwhelmed by a single repetitive error.",1
The DPU-SSI shall provide an operating mode for transmit blocks (Tx message mode) in which consecutive words in a block are transmitted and the transmitter is disabled until a transmit IBG interrupt is received. At this point the sender is re-enabled and can send the next message.,"Ring Buffer Data Structure CSC maintains a FIFO implemented as a ring buffer for temporary storage of data received from the DCI prior to processing. The ring buffer uses two pointers named pIn and pOut to track the data in the buffer. The pointer is defined such that reading from the buffer is the simplest operation and only requires a single comparison to verify that the buffer is empty. The buffer only stores events, so the pointer points to these four byte entities. Since DCI specifies all data in bytes, the size must be converted before reading the data.",0
"The DPU-BOOT CSC&#39;s boot monitor shall provide the ability to write to dynamic random access memory (DRAM), VME bus, and input/output channel controller (IOCC) on command.",Generic VME Driver CSC The Generic VME (GVME) Driver CSC is a Level 1 reuse component in the INSTRUMENT Y project. The GVME driver provides a set of convenience routines that are useful when accessing registers and memory in the VME memory space.,1
The DPU-CCM should provide the ability to echo back to the spacecraft every command received from the spacecraft or ICU.,"Command processing commands are dequeued from the command queue and executed by the command scheduling task ccmCmdTask(). The task blocks on the semaphore given by ccmCmdEnq(). ccmCmdTask() wakes up on the semaphore and calls ccmCmdProcess() to process the waiting command. The ccmCmdProcess() function then retrieves the waiting command from the command queue and calls ccmCmdDispatch() to verify the expected length of the command and execute it. If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command to the ground. Keeps a count of rejected commands and executed commands. If the command sent to ccmCmdEnq() is a 1 Hz clock time message or an attitude message from the spacecraft, the command is not forwarded to the command queue but is executed directly in the interrupt context. The gesture message is forwarded to dpaCommandSend() and the 1 Hz clock time message parameter is passed to tisTimeSync() to synchronize the current time. Any other non-DPU or spacecraft observatory messages are silently discarded without reporting an error. In order to ensure that the ccmCmdTask() task reports to the CCM control task regularly without ground commands, the timeout value of the semaphore is 20 seconds. If the semaphore times out, the task verifies that there is no command in the command queue and reports to the CCM control task by calling ccmTaskReport().",1
DPU-CCM should collect DPU_HK and forward it to DPU-SCUI.,"Error Collection and Reporting DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), which is used by other FSW tasks to report errors. Every time it wakes up, ccmTask() checks if it&#39;s time to form an error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to the DPU-SCUI for transmission to the ground.",1
DPU-DCI should provide applications with the ability to enable ping-pong buffers for swapping.,Built-in Testing The DPU&#39;s built-in testing (BIT) has two phases. The Stage 1 BIT is included in the bootloader and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. Stage 2 BIT is executed after the operating system starts and is not part of the Bootstrap program.,0
The DPU-BOOT CSC should periodically strobe the PSM watchdog timer at B second intervals (+/- 1/2 seconds) by writing 0xEB90 to the watchdog clear register SCM_WDR. The boot program CSC should continue to be strobed during the transfer of control from the boot program to the operating system.,"Startup sequence In flight, power cycling can only be achieved by the SCU. A watchdog reset may be caused by the DPU FSW due to the detection of an unrecoverable error, or it may be a by-product of the FSW entering a state where it cannot gating the watchdog timer. On startup, the bootloader tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and execute it. The DPU FSW then loads configuration information from EEPROM (establishing various operating defaults) and generates various DPU FSW tasks.",0
The DPU-DCI shall provide the application with the ability to reset the DCI by writing to the DCI reset register.,"The initialization driver is initialized by calling the initialization function adcInit(). This function initializes the ADC_LIST_ENTRY array, sets up a convenience pointer to the ADC hardware register, and sets up the ADC multiplexer for the first conversion (otherwise the first ADC value requires three calls to adcUpdateNext()). The ADC driver can be reinitialized, which causes the values ​​in the ADC_LIST_ENTRY array to be reset to their default values. ADC_VALUE is an A-bit data item; however, the hardware contains a B-bit A/D. The high bits are used to indicate invalid or questionable values ​​as follows: * On initialization, the MSbit of each ADC_VALUE is set (0x8000). * The second MSbit if the conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed).",0
DPU-EDAC should log the number of SBEs detected in DRAM since startup and the addresses of the last two SBEs.,"Data processing algorithm CSCDPA CSC includes the following components: * Event handler task communicates with ICU, creates event list data product, creates tracking instrument Y in Ping/Pong buffer, creates lookup chart, executes engineering mode, generates housekeeping data, creates events Frame, Ping, and Pong buffers, and provide task heartbeats to CCM tasks.",0
"If CTS is not set, the DPU-BOOT CSC shall complete the Phase 1 BIT and load the DPU-RTOS in less than A seconds after hardware reset.","Startup sequence In flight, power cycling can only be achieved by the SCU. A watchdog reset may be caused by the DPU FSW due to the detection of an unrecoverable error, or it may be a by-product of the FSW entering a state where it cannot gating the watchdog timer. On startup, the bootloader tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and execute it. The DPU FSW then loads configuration information from EEPROM (establishing various operating defaults) and generates various DPU FSW tasks.",1
DPU-DCI should provide applications with the ability to mask/unmask each DCI interrupt condition using SCM_DCI_CSR.,"Data processing algorithm CSCDPA CSC includes the following components: * Algorithm o Select a guide star to scan bright stars in the reference frame, select the guide star and set a tracking window around the guide star. o Drift correction calculates the drift offset of the guide star and rolls the just completed tracking frame relative to the reference frame. o Create a Find Chart will use the Select Guided Stars algorithm described above to find the brightest stars in the find chart, then Instrument Y creates a list of the brightest stars and their intensities. o Derive Channel Boundaries Calculates a set of channel boundaries (18 numbers - 9X, 9Y) for use by the centroid software in the Blue Processing Electronics (BPE) of the telescope module.",0
The DPU-RTOS shall provide functionality that allows applications to write to the real-time clock registers on the RAD6000SC CPU module.,Real-time clock interface This routine sets the value of the RTC register,1
DPU-BOOT The CSC&#39;s boot monitor shall provide the functionality to load the DPU-RTOS configuration from EEPROM to DRAM and initiate its execution on command.,"Command and Control CSC Command and Control (CCM) CSC is a level 2 reuse component in the INSTRUMENT Y project. The command and control CSC includes the following components: * Control task ccmCtrlTask(), which initializes the DPU FSW and generates other tasks at startup, schedules the generation of DPU overhead packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks, For example, heartbeat messages and watchdog strobes; * Command scheduling task ccmCmdTask(), which receives and schedules real-time commands received from SCU or ICU. The main data structures include: * Static data tables that track operation status. Data included in this table includes housekeeping productivity, CCM-specific flags, and the number of commands executed. * The command queue into which commands will be placed when they arrive from the ICU or SCU via interrupts. * Error/Event Queue It accumulates error and event codes reported by the DPU FSW. These error and event codes are removed from the queue, placed into telemetry packets at given intervals, and included in the DPU overhead data. DPUSDS5.12.1.1.1 Flight Software Initialization Command and Control CSC is initialized by generating the CCM control task ccmCtrlTask ​​( ) from the operating system startup task usrRoot(). After the task is generated, it calls the function ccmInit(), which creates the error/event queue, instantiates the required semaphores, and installs the various ISRs. Finally, it generates the remaining tasks that make up the DPU FSW. When the CCM control task starts, it reads the DPU configuration startup defaults from SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is wrong, the hardcoded default value is used. The CCM control task initializes the remaining CSC by calling the applicable initialization function or, if the CSC has an associated task, by spawning the task using the VxWorks function taskSpawn(). When the CCM control task initializes the CSC, it passes the startup default value read from the EEPROM as a parameter to the task initialization function. In addition to the task initialization activity, ccmInit() initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify the expected command length of newly received commands.",0
"The image mode shall be able to generate a parameterized search graph of the image using the algorithm described in Appendix C on command PROD_FINDING_CHART. The parametric lookup map should contain the brightest light source. Each light source should be parameterized by its position [X,Y] and intensity/brightness.","Data processing algorithm CSCDPA CSC includes the following components: * Event handler task communicates with ICU, creates event list data product, creates tracking instrument Y in Ping/Pong buffer, creates lookup chart, executes engineering mode, generates housekeeping data, creates events Frame, Ping, and Pong buffers, and provide task heartbeats to CCM tasks.",1
DPU-DPA shall provide task heartbeat to DPU-CCM.,"Data processing algorithm CSCDPA CSC includes the following components: * Event handler task communicates with ICU, creates event list data product, creates tracking instrument Y in Ping/Pong buffer, creates lookup chart, executes engineering mode, generates housekeeping data, creates events Frame, Ping, and Pong buffers, and provide task heartbeats to CCM tasks.",1
"At the end of the download, the DPU-BOOT CSC&#39;s boot monitor should calculate the CHKS_32 on X stored in the EEPROM and compare it to the CHKS_32 sent with X during the transfer. The boot monitor should output CHKS_32 to the RS-232 interface and a message indicating whether the download was successful.","Public functions set the polling rate and buffering rate to the given values. If the value is out of range, the previous value is retained and an error is reported. The scuiTask() semaphore timeout (scuiTaskTimeout) automatically adjusts based on the given polling rate, by setting the timeout to approximately the polling rate (not the timeout in clock cycles, so the resolution is lower and only approximates the polling rate) vote rate).",0
DPU-DPA shall convert the mode according to the protocol specified in document DPUICD-01 Section 2.2,Boot Monitor The boot monitor checks the syntax and number of parameters of the input command and displays an error message to the RS-232 interface if an invalid command or parameter is entered. A complete list of these messages is given in file 7384-BSPS-01.,0
"If a buffer full condition occurs, DPU-SCUI should discard new data, return an error to the caller, and report the error condition to DPU-CCM.","Initial boot sequence Initial boot sequence, identified as boot sequence 1. This processing occurs when the bootloader is executed from programmable read-only memory (PROM). Startup sequence 1 mainly consists of the following four steps. First, in this sequence, the EEPROM is updated. Then, the CPU BIT and part of the DRAM BIT are executed. Next, the DRAM is cleared. Finally, boot sequence 2 is copied to DRAM and executed. During this sequence, if skipBit is not set, the remainder of the DRAM is tested. The load parameters are placed in registers r13, r14, r15 and r16. DRAM is cleared to memSize. Finally, DPU-RTOS or Bootstrap Monitor is loaded and executed based on the loading parameters.",0
DPU-TIS shall provide applications with the ability to access the current UT_DELTA.,"Structural Design TIS CSC provides a library of functions to * initialize the DPU clock hardware at startup, * keep the DPU clock synchronized with the spacecraft clock, * provide functions for use by other applications to retrieve the current value of the DPU clock and UT Delta, and provides functionality used by the CCM command scheduler to change the configuration of the clock interface.",1
"DPU-TMALI should be configured with a ping-pong frame limit on startup, as specified by TMALI_PP_LIMIT provided during initialization. The default value should be M frames and should be able to be modified dynamically.","Normal Data Exchange Sequence TMALI CSC acts as an intermediate manager for event data provided by the DCI driver CSC and ultimately passed to the DPA CSC. TMALI CSC waits for notification from DCI CSC that the frame limit (or data timeout) has been reached in the ping-pong buffer, indicating that event data is ready to be provided to TMALI. TMALI reads all EVENT data from DCI and notifies DCI that Ping-Pong buffers can be exchanged when ready. TMALI provides a semaphore to unlock tmaliWait() calls from DPA.",1
"Channel Boundary Engineering Mode should create lookup table (LUT) arrays of channel boundaries, PROD_CHAN_BOUND, and PROD_MN_DATA from flat fields using the algorithm described in Appendix C.","Public Function This routine initializes the ICU interface. This routine opens the SSI driver port, installs the SSI interface interrupt callback, and enables transmit message mode in the SSI driver.",0
"DPU-CCM should generate DPU_HK at a commandable rate, which defaults to 10 seconds.","Setting Frame Depth in DCI The optimal frame depth will be determined through benchmark testing. The default frame depth is 10 frames. Based on the data above, reading the 10 largest sized frames at the maximum data transfer rate takes approximately 24 milliseconds.",1
DPU-SCUI should provide data-generating applications with the ability to specify whether queued data can be fragmented.,"The boot sequence DPU FSW boots using PROM-resident boot software. The boot software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it. In flight, there are two ways to trigger DPU FSW startup: * Power-on (cold boot), or * Watchdog reset (warm boot, command restart).",0
"The DPU-BOOT CSC should perform consecutive writes to word pages of the EEPROM within C milliseconds, or wait at least D milliseconds between consecutive writes.","The hardware interface DPU-BOOTSTRAP must be directly connected to the EEPROM on the communication module of company X. DPU-BOOTSTRAP only accesses EEPROM as ? bit words. Specific timing requirements for the EEPROM are met in one of three ways: * Timing requirements are met by inserting specific wait loops (typical), * Timing requirements are met by using the EEPROM driver (download command), and Timing requirements are met regardless of CPU speed Regardless of the setup (DRAM test logic), the time required to execute intermediate instructions is implicitly satisfied.",1
DPU-TMALI should use DPU-DCI to communicate with the DCI interface.,"Public Function This routine initializes the ICU interface. This routine opens the SSI driver port, installs the SSI interface interrupt callback, and enables transmit message mode in the SSI driver.",0
The DPU-RTOS should include the functionality to dynamically load target modules from EEPROM.,"Data processing algorithm CSCDPA CSC includes the following components: * Event handler task communicates with ICU, creates event list data product, creates tracking instrument Y in Ping/Pong buffer, creates lookup chart, executes engineering mode, generates housekeeping data, creates events Frame, Ping, and Pong buffers, and provide task heartbeats to CCM tasks.",0
The DPU-DCI shall provide an application capable of commanding the DCI hardware to reorder its bit sequence upon receipt of the raw detector electronics output format for each event.,"Built-in Test CSC Built-in Test (BIT) CSC is a level 2 reusable component from SSFF and INSTRUMENT Y projects. The detailed design of BIT CSC is as follows. The built-in test CSC (identified as DPU-BIT) performs phase 2 built-in testing (BIT). The Phase 2 BIT includes SCM EDAC circuit testing, SCM PROM checksum testing, MIL-STD-1553B internal BIT, and memory testing of the DCI data buffer. The result of BIT is recorded in SYS_CNFG_AREA of EEPROM and also saved in DRAM. If an error occurs in one of the functions executing the BIT, the test results will be reported as a failure of the test itself.",0
DPU-BOOT The CSC&#39;s boot monitor shall provide the functionality to load the DPU-RTOS configuration from EEPROM to DRAM and initiate its execution on command.,"Initial boot sequence Initial boot sequence, identified as boot sequence 1. This processing occurs when the bootloader is executed from programmable read-only memory (PROM). Startup sequence 1 mainly consists of the following four steps. First, in this sequence, the EEPROM is updated. Then, the CPU BIT and part of the DRAM BIT are executed. Next, the DRAM is cleared. Finally, boot sequence 2 is copied to DRAM and executed. During this sequence, if skipBit is not set, the remainder of the DRAM is tested. The load parameters are placed in registers r13, r14, r15 and r16. DRAM is cleared to memSize. Finally, DPU-RTOS or Bootstrap Monitor is loaded and executed based on the loading parameters.",0
"The DPU-ICUI shall check the length of the received DPU_CMD against the message length determined by the inter-block gap. If the received values ​​do not match, the command will be discarded and the error will be queued to the DPU-CCM and a NAK message will be transmitted to the ICU within one second.","The hardware interface DPU-BOOTSTRAP must be directly connected to the EEPROM on the communication module of company X. DPU-BOOTSTRAP only accesses EEPROM as ? bit words. Specific timing requirements for the EEPROM are met in one of three ways: * Timing requirements are met by inserting specific wait loops (typical), * Timing requirements are met by using the EEPROM driver (download command), and Timing requirements are met regardless of CPU speed Regardless of the setup (DRAM test logic), the time required to execute intermediate instructions is implicitly satisfied.",0
The DPU-ADC CSC shall address the hardware module as defined in Document 1400 (Company X Specification for Company X Communications/Memory Modules).,"The time contained in the time synchronization clock message is specified to be valid on the next rising edge of the 1PPS signal. When the DPU receives the clock message, the 1553 ISR calls the tisTimeSync() function to forward the data part of the clock message to the TIS CSC through the TIS_CLK_MSG data structure. The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware register. The DPU hardware is designed to latch the new time on the next rising edge of the 1 PPS signal (the act of writing the new time to a hardware register enables the latching function in the hardware). Once the new time is latched, the hardware automatically disables the time latch feature to avoid the possibility of latching the old time when the next 1 PPS signal is received within one second. In case UT Delta is discarded, the event message will be queued into ccmErrEnq() for reference.",0
The DPU-DPA should be able to collect detector events over the entire FOV.,Intensifier Characteristics (IC) Engineering Mode Intensifier Characteristics The purpose of engineering mode is to evaluate the health and performance of the detector. Detector events produced in full-frame high-resolution detector format are collected and histogrammed against the commanded integration time to produce a pulse height histogram.,1
"If CTS is not set, the DPU-BOOT CSC shall complete the Phase 1 BIT and load the DPU-RTOS in less than A seconds after hardware reset.","Startup sequence In flight, power cycling can only be achieved by the SCU. A watchdog reset may be caused by the DPU FSW due to the detection of an unrecoverable error, or it may be a by-product of the FSW entering a state where it cannot gating the watchdog timer. On startup, the bootloader tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and execute it. The DPU FSW then loads configuration information from EEPROM (establishing various operating defaults) and generates various DPU FSW tasks.",0
The DPU-ADC should read from the SCM register in B-bit words only.,"Startup sequence In flight, power cycling can only be achieved by the SCU. A watchdog reset may be caused by the DPU FSW due to the detection of an unrecoverable error, or it may be a by-product of the FSW entering a state where it cannot gating the watchdog timer. On startup, the bootloader tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and execute it. The DPU FSW then loads configuration information from EEPROM (establishing various operating defaults) and generates various DPU FSW tasks.",0
DPU-ICUI should install an ISR called on the SSI receiver inter-block gap interrupt to receive and process commands from the ICU.,"Initializing ICUI CSC is initialized by calling icuiInit(). The icuiInit() function opens the SSI interface port to the ICU, installs the send and receive ISRs, and enables send message mode in the SSI driver CSC. The icuiInit() function is called by the CCM control task at startup.",1
DPU-ICUI shall format messages according to DPUICD-01 Section 3.1,Boot Monitor The boot monitor checks the syntax and number of parameters of the input command and displays an error message to the RS-232 interface if an invalid command or parameter is entered. A complete list of these messages is given in file 7384-BSPS-01.,0
DPU-TIS shall provide applications with the ability to access SC_TIME from SCM.,"Analog-to-Digital Converter Driver CSC Analog-to-Digital Converter (ADC) Driver CSC is a new driver that controls the ADC hardware and retrieves data. Key elements of the ADC driver include: * A list (ADC_LIST_ENTRY array) that maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * API function adcUpdateNext(), which causes a single ADC_VALUE to be updated each time the driver is called. Since each value requires multiplexer settling time and ADC conversion time, a value is updated on every call. To keep the driver simple, the application is responsible for achieving correct settling and transition times. * API function adcGet(), which returns a copy of the current ADC_VALUE list.",0
"DPU-CCM should generate tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI on startup.","Controlling and monitoring the CCM control task initializes the DPU FSW. The CCM control task is responsible for establishing successful boot. It does this by blocking temporary semaphores after spawning SCU interface tasks and CCM command tasks, each with a 5 second timeout. If both tasks report successful initialization by supplying semaphores, the CCM control task toggles the BC_INDEX parameter in the EEPROM to indicate successful startup. If either task does not report successful initialization, the CCM control task disables the watchdog strobe to enable a DPU restart. The rationale for selecting successful initialization of these two tasks as the definition of successful startup is that the DPU FSW requires these tasks as a minimum to establish ground contact and provide commandability. Once this initialization is complete, the task blocks on the binary semaphore, given by the SCUI command ISR when the 1 Hz clock message arrives. If the clock message does not arrive, the semaphore will time out after 1.5 seconds. The CCM control task remains active to create and transfer DPU overhead at appropriate intervals, perform various periodic processing tasks, and process memory dump commands. The final call to ccmErrEnq() is performed so that when an error occurs in the interrupt service routine, the global variable is set to the value of errno, which is then queued to the error/event queue as part of the normal processing of the task.",1
"If automatic time synchronization is enabled, the DPU-TIS should provide the application with the ability to set the value of the SC_TIME register on the SCM and enable the 1PPS clock jam register.","Structural Design TIS CSC provides a library of functions to * initialize the DPU clock hardware at startup, * keep the DPU clock synchronized with the spacecraft clock, * provide functions for use by other applications to retrieve the current value of the DPU clock and UT Delta, and provides functionality used by the CCM command scheduler to change the configuration of the clock interface.",0
The image pattern should shift consecutive frames based on the calculated spacecraft drift and add the frames together to the cumulative image.,"Telemetry Output to Spacecraft 1553 Bus The SCU is a MIL-STD-1553 Bus Controller (BC) that periodically reads the STPDU contained in the 15 telemetry subaddresses and then writes to the telemetry completion subaddress. When the telemetry completion subaddress is written, scuiTlmDoneISR() is called, which gives a semaphore to wake up scuiTask(). The software provides fault tolerance by automatically waking up after approximately two polling cycles. This timeout is automatically adjusted whenever the SCU polling rate value is changed via a command.",0
DPU-DCI should use load multiple/store multiple instructions to read from DCI memory in B-bit words only.,"The standard I/O interface read() primitive does not block. Reads are performed on the active portion of the H/W ping-pong buffer using RAD 6000 multiple move instructions (hereinafter referred to as block moves). For best performance, block moves are implemented in the assembler. The number of bytes read is returned to the caller.",1
The DPU-CCM should provide the ability to echo back to the spacecraft every command received from the spacecraft or ICU.,"Initialization The SCUI CSC is initialized when the CCM CSC generates scuiTask(). The initialization parameters passed to scuiTask() include: * Poll Rate S/C The rate at which the DPU is polled for telemetry. The rate is specified in Hz, with the default value being X Hz, based on the instrument X-DPU polling rate in the company&#39;s X 1553 ICD. * The buffer rate value is used to rate buffered data sent to the S/C. The rate is specified in bits per telemetry poll, with a default value of 7664, which equals one STPDU per poll (*** bytes per STPDU multiplied by V bits/byte). This default effectively disables rate buffering. * Low priority queue size The size of the low priority telemetry queue in bytes. If the requested amount cannot be allocated, the buffer will be allocated according to the amount of memory contained in the largest free memory block. High Priority Queue Size The size of the high priority telemetry queue in bytes. If the requested amount of memory cannot be allocated, the buffer will be allocated according to the amount of memory contained in the largest free memory block.",0
DPU-DCI shall provide applications with the ability to configure the SCM_DCI_WIN parameter.,"Command processing When a command arrives from SCU (via 1553 interface) or ICU (via SSI interface), the corresponding ISR will queue the command packet into the command queue, and then give a semaphore to wake up ccmCmdTask(). Since the DPU can send commands to itself, the commands may arrive in an interrupt context or task context. Therefore, CCM maintains two queues, one for interrupt contexts that are not protected by a semaphore and another for task contexts that are protected by a semaphore.",0
"DPU-CCM should monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by checking their TASK_INFO and report this information in DPU_HK.",Boot Monitor The boot monitor checks the syntax and number of parameters of the input command and displays an error message to the RS-232 interface if an invalid command or parameter is entered. A complete list of these messages is given in file 7384-BSPS-01.,1
"If the clear to send (CTS) signal on the RS-232 interface is active, the boot monitor of the DPU-BOOT CSC should be activated. If no activity is detected on the RS-232 interface within 30 seconds, the bootloader loads the configuration of the DPU-RTOS based on BC_INDEX in the SYSTEM_BLOCK.",Built-in Testing The DPU&#39;s built-in testing (BIT) has two phases. The Stage 1 BIT is included in the bootloader and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. Stage 2 BIT is executed after the operating system starts and is not part of the Bootstrap program.,0
DPU-TIS shall provide applications with the ability to access the current UT_DELTA.,The time retrieval DPU maintains a local copy of the spacecraft clock and current UT Delta so that the DPU FSW can timestamp data products and packets. TIS CSC provides a function tisTimeGet() that retrieves the current DPU clock value and a copy of the latest UT Delta value. Time is communicated between DPU FSW applications through the TIS_TIME data structure.,1
The DPU-RTOS should provide the ability to call user-installed interrupt service routines (ISRs) in response to internal and external (VME) interrupts.,"The hardware interface DPU-BOOTSTRAP must be directly connected to the EEPROM on the communication module of company X. DPU-BOOTSTRAP only accesses EEPROM as ? bit words. Specific timing requirements for the EEPROM are met in one of three ways: * Timing requirements are met by inserting specific wait loops (typical), * Timing requirements are met by using the EEPROM driver (download command), and Timing requirements are met regardless of CPU speed Regardless of the setup (DRAM test logic), the time required to execute intermediate instructions is implicitly satisfied.",0
The DPU-DCI shall provide the application with the ability to reset the DCI by writing to the DCI reset register.,"DRAM BIT Part of the memory is tested in boot sequence 1, and part of the memory is tested in boot sequence 2. In startup sequence 1,? KB of DRAM are tested before Bootstrap is copied to this area. During boot sequence 2, remaining memory is tested in ?. KB blocks. The DRAM BIT first writes the address of each word in the block to that word in the block. Then test flushing the cache and reading back the entire block. If a single-bit error occurs on readback, the location is read again. If another single-bit error occurs, the test assumes a hard error occurred and marks the entire block as bad. If a multi-bit error occurs, the entire block will be marked as bad. If the value read back does not match the address, the entire block is marked as bad. Repeat the same process for the complement of the address. Bootstrap stores the result of the DRAM BIT in EEPROM as a series of x consecutive y bit words. Each digit in the result word represents the result of the test?. KB blocks of DRAM. As the memory block address increases, the bits are mapped to DRAM from the least significant bit (LSb) to the most significant bit (MSb). A set bit indicates a DRAM block failure. A clear bit indicates that the DRAM block has passed the test.",0
DPU-DCI should provide applications with the ability to set a timeout (in milliseconds) that specifies a period of time when no new events are received by the hardware before the hardware swaps ping-pong buffers and interrupts the software.,"Setting Data Timeout in DCID During normal operation, frames arrive approximately every 11 milliseconds. If event data is received in one of the Ping-Pong buffers and no other events are received after a configurable period of time, the DCI hardware will generate an interrupt. A data timeout interrupt is not an error but usually indicates that the current exposure has completed. The data timeout interrupt allows TMALI CSC to retrieve trailing events from the DCI Ping-Pong buffer. The function tmaliDciTimeoutSet() provides an API to the DCI driver to allow the timeout setting to be changed.",1
"The DPU-SCUI shall be able to package the created CCSDS source packets into STPDUs using segmented (grouped) packets for transmission to the SCU, as defined in CCSDS-102.0-B-4 and in compliance with Interface Control Document 1143-EI-S19121 .","Structural Design TIS CSC provides a library of functions to * initialize the DPU clock hardware at startup, * keep the DPU clock synchronized with the spacecraft clock, * provide functions for use by other applications to retrieve the current value of the DPU clock and UT Delta, and provides functionality used by the CCM command scheduler to change the configuration of the clock interface.",0
DPU-DCI should provide applications with the ability to install callback routines in response to a timeout interrupt condition (INTTO_EN).,"Startup sequence In flight, power cycling can only be achieved by the SCU. A watchdog reset may be caused by the DPU FSW due to the detection of an unrecoverable error, or it may be a by-product of the FSW entering a state where it cannot gating the watchdog timer. On startup, the bootloader tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and execute it. The DPU FSW then loads configuration information from EEPROM (establishing various operating defaults) and generates various DPU FSW tasks.",0
DPU compression software should report errors to DPU-CCM to be included in DPU housekeeping information.,"Public Function This routine is called by any CSC to report errors or events that should be included in DPU housekeeping. If this routine is called from an interrupt context, the static global variable ccmISRError is set so that the error can be queued later (see ccmCtrlTask()). This is done because the error/event queue is protected by a semaphore and the semaphore cannot be obtained in the ISR. The error queue semaphore has a priority inversion setting to reduce conflicts between multiple callers when a priority inversion situation occurs. This routine also replaces frequently occurring errors with special recurring error codes. A duplicate error code is a special error code that follows a normally reported error code and indicates that a previously reported normally reported error code has occurred multiple times during the last high-rate reporting period.",1
DPU-TMALI should use SCM_DCI_SR and the ERRNO provided by DPU-DCI to decode the error and place it in the error queue of DPU-CCM.,"Error Collection and Reporting DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), which is used by other FSW tasks to report errors. Every time it wakes up, ccmTask() checks if it&#39;s time to form an error/event packet for transmission to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to the DPU-SCUI for transmission to the ground.",1
"After writing to the EEPROM, the DPU-BOOT CSC should wait at least C milliseconds before performing a read from the EEPROM.","The hardware interface DPU-BOOTSTRAP must be directly connected to the EEPROM on the communication module of company X. DPU-BOOTSTRAP only accesses EEPROM as ? bit words. Specific timing requirements for the EEPROM are met in one of three ways: * Timing requirements are met by inserting specific wait loops (typical), * Timing requirements are met by using the EEPROM driver (download command), and Timing requirements are met regardless of CPU speed Regardless of the setup (DRAM test logic), the time required to execute intermediate instructions is implicitly satisfied.",1
DPU-SCUI should timestamp the source packet&#39;s auxiliary header with the current SC_TIME retrieved from the DPU-TIS module.,"The interface to the spacecraft described in time synchronization document 1143-EI-S19121 specifies that the spacecraft will provide clock messages to each instrument at a rate of 1 Hz. The clock message contains two values: a value representing the current spacecraft time, and a value representing the spacecraft time and the increment of Universal Time (UT) based on the TBD epoch.",1
"The DPU-EDAC shall handle hardware modules according to the addresses defined in Document 1400, Company","Public Functions This routine provides a way to set the bit arrangement used by DCI. When bSpecialArrangement is TRUE, DCI is set to the special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
DPU-DCI should provide applications with the ability to read the contents of the ping/pong buffer.,"Event Handling If the mode command is an instrument Y mode, detector events are spatially filtered to the instrument Y window specified in the mode command and the corresponding pixel in the Ping or Pong buffer is incremented. If specified in the mode command, pixels will be binned by AxA or BxB. Additionally, if specified in the mode command, a trace frame data product will be generated for each Ping/Pong trace frame. Instrument Y and event modes can be commanded simultaneously in the mode command. If the ICU sends an XRT position command, the instrument Y-mode and event mode windows will be resized to match the new window size in the command.",0
DPU-BOOT CSC should create a record of failed DRAM block BIT_DRAM in SYSTEM_BLOCK.,"Troubleshooting DRAM Bootstrap performs memory testing before loading the operating system. The results of this test are stored in EEPROM. DPU-RTOS uses the results of memory tests to exclude memory segments with bit errors from the system memory pool. The bootloader builds a bitmap that effectively implements a list of failed memory blocks during bootloader built-in testing. A set of functions has been created to utilize this bitmap to troubleshoot faulty memory blocks from the VxWorks system memory pool. VxWorks uses the system memory pool to dynamically allocate memory. Additionally, a linked list of good memory segments is created for use by the EDAC memory cleaner. These functions are called from the usrInit() and usrRoot() functions in usrConfig.c. The dramInit() function must be called before kernelInit() in usrInit(). The dramBuildMemPool() function is called before initializing the file system and driver in usrRoot().",1
"After writing to the EEPROM, the DPU-BOOT CSC should wait at least C milliseconds before performing a read from the EEPROM.",Install exception handler This routine installs a hook routine for the memory error interrupt. The hook routine will be called from the interrupt context. This function always returns OK.,0
DPU-DCI should only write to DCI memory in B-bit words.,"CPU BIT The CPU BIT consists of a series of tests designed to test each functional unit of the processor. These include tests of branch units, fixed-point units, floating-point units, interrupt units and timer units. Each of these tests consists of executing some selected instructions in that functional unit. As part of branch unit testing, the general purpose register (GPR), segment register (SR), counter register (CTR) and condition register are tested for stuck bits. This is done by writing a pattern of 1 (verified by readback) and then a pattern of 0 (verified by readback).",1
The DPU-BIT shall report errors that occur during testing as failures in the test results.,Built-in Testing The DPU&#39;s built-in testing (BIT) has two phases. The Stage 1 BIT is included in the bootloader and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. Stage 2 BIT is executed after the operating system starts and is not part of the Bootstrap program.,0
