  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.",Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted."," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,1
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",1
The DPU-BOOT CSC shall enable EDAC on the SCM.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as an bit XOR.,1
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,1
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",1
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,1
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",1
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",1
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,1
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,1
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send a Purge Science Queue command from the ICU to the DPA software. The Purge Science Queue command shall be used to command the DPU to delete all data currently in the science telemetry output queue (i.e., data pending transmission to the spacecraft).",1
 The DPU-CCM shall provide a command to reboot the DPU.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
 The DPU-CCM shall provide a command to reboot the DPU.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,1
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",1
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",1
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe TMALI CSC is initialized by spawning the tmaliTask() with the startup default parameters.  This task will allocate memory for the TMALI_EVENT_QUEUE, install DCI ISRs, initialize static variables and data structures, and then enter an end-less loop in which it transfers the data from the DCI to the TMALI queue, throttled by the semaphore semDciWait.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,1
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",1
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",1
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",1
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis function returns the next EVENT in the queue to the caller.  The caller should store the value returned by this function in a variable defined locally within the scope of the function from which it is called.  If the return value is stored as described above, the EVENT value is stored in a RAD6000 register rather than memory.  Processing is therefore much faster since register accesses on the RAD6000 are much faster than memory accesses.A compilation option TMALI_NOCHECKS is provided for the disabling of buffer empty checks. This results in slightly faster code but should only be used when the application using this function is known to make proper calls to the function.  If the TMALI module is compiled with the TMALI_NOCHECKS option an improper call to the tmaliNextEvent function (calling it when no data is available in the TMALI buffer) will compromise the TMALI buffer data structure.The queue structure and the related pointers are described in the local tmaliP.h header file. As only the write pointer (pOut) is manipulated here and the operations on the 32 bit pointers themselves are 'atomic' no mutual exclusion problem can occur.  ",1
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,1
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsWhen no data is available in the TMALI queue this routine blocks on a semaphore awaiting availability of events on the TMALI queue as indicated by the ISR.  When data is already available on the TMALI queue, or the semaphore is taken, the number of events on the TMALI queue is determined and returned to the caller.  The parameter TickstoWait specifies the maximum time which the function can wait until data becomes available in kernel-ticks.  The parameter may be set to a symbolic value FOREVER which causes the function only to return when data is available.  When the function is called with a timeout value and no data becomes avialable within that period the function will return zero (events available).If the tmali task has not been initialized the function returns an error.",1
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",1
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",1
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",1
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,"Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",1
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",1
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",1
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",1
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",1
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",1
  The DPU compression software shall forward compressed data  to DPU-SCUI.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",1
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",1
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",1
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",1
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",1
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",1
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
 The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Control and MonitoringEvery time the CCM Control executes, it calls ccmPerProcess() to handle periodic processing responsibilities.  Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported.  Other tasks report their execution to the CCM Control Task by calling the function, ccmTaskReport(), providing their task index.  Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU housekeeping.  If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible to command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,1
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",1
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",1
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Sending Messages to the ICUIn order to send messages to the ICU, the DPU FSW tasks call icuiEnq().  The calling application passes the function code of the message to be sent, as well as a pointer to a data structure containing the message parameters associated with the given function code.  The icuiEnq() function formats the message according to the ICU/DPU ICD using icuiMsgFormat(), and then writes the message to SSI Driver transmitter buffer by calling the driver write() function. A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  A timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware.  The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers.   The driver features a standard I/O interface which utilizes an extended ioctl() command set to support unique SSI hardware attributes.  This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the newer Tornado driver architecture. ,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,Standard I/O InterfaceSSI ioctl() commands.,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,InitializationThe SSI Driver CSC is initialized by calling the function ssiDrv() from the startup task usrRoot().,1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,1
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",1
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",1
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",1
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",1
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,1
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",1
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",1
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
  The DPU-DPA shall be capable of providing DPA_HK on request.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,1
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",1
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
"  The DPU-DPA shall transition MODE based on the protocol specified in document DPUICD-01, section 2.2","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",1
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",1
"  In image mode, the DPU-DPA shall calculate the memory location to increment for each valid detector event received.  The memory location shall be incremented for each valid event.  Each memory location shall be able to count so many events.  An Image mode exposure shall produce a PROD_IMAGE.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,1
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.",Event ProcessingThe Event Processor Task is also responsible for creating the Finding Chart.  The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y.  The parameterized finding chart will be created by listing the X & Y detector location of each star along with a CxC pixel matrix around the star location of the intensities. The Event Processor Task will create the necessary housekeeping for the DPA.,1
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",1
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",1
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",1
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,1
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",1
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.," Startup Sequence On flight, a power cycle can only be effected by the SCU.  A watchdog reset could be induced by the DPU FSW due to a detected, unrecoverable error, or it could occur as a by-product of the FSW entering a state in which it fails to strobe the watchdog timer.  On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it.  The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks. ",1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Public FunctionsThis routine extracts the current spacecraft time from the clock message and writes in to the hardware clock registers to be latched by the hardware at the next 1PPS signal, and maintains a copy of the UT Delta provided in the clock message.  If the UT Delta is currently being copied by an application, the UT Delta from the current message is discarded and an event is enqueued to ccmErrEnq().  If automatic time synchronization is disabled, this routine returns with no action taken. THIS ROUTINE IS INVOKED AT INTERRUPT CONTEXT.",1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine sets the value of the RTC Registers,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,1
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,1
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",1
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers The RSC processor also generates an external interrupt for the Power Fail Interrupt.  The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt.  Some custom routines must be provided to access this interrupt. These functions are described below, and are contained in sysLibSup.c.",1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,Install Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,1
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",1
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-BIT shall use the 1553 Driver CSC to perform MIL-STD-1553B internal BIT.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of the x analog inputs, and the current value (ADC_VALUE) of each analog input.  To update a single value in the list, an application must call the update function adcUpdateNext().  The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well as the normal A/D conversion time.  Therefore, it takes two calls to adcUpdateNext() to update a single value in the list.  To keep the driver simple and to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function appropriately.",1
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",1
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",1
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",1
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,1
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,1
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.",Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",1
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",1
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,1
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",1
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,1
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",1
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",1
  The DPU-DCI shall provide the capability for an application program to install a callback routine to respond to the DCI Error Interrupt (INTERR_EN).,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",1
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,Standard I/O InterfaceThe ioctl() entry point controls all interface configuration.  Different commands may be available depending on whether the driver is in NORMAL or TEST mode.  Any other value of the command parameter causes errno to be set to S_dci_IOCTL_UNDEF and ERROR to be returned.,1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",1
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",1
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",1
  The DPU-DCI shall read from the DCI Registers in C-bit words only,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",1
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Bootstrap CSCThe Bootstrap CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects. The Bootstrap for the Company X DPU will be nearly identical to that used on the INSTRUMENT Y CIDP and SCU, with the exception of minor hardware interface differences:* The interface to the hardware watchdog timer is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The interface to the mission elapsed time (MET) clock is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The INSTRUMENT Y bootstrap was able to discern a cold (power-on) boot from a warm (watchdog reset) boot by examining the value of the MET clock, which did not reset to zero on a warm boot.  The Company X DPU MET clock resets to zero on both a cold and warm boot, and so there is no distinction in the Company X bootstrap.",1
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,1
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.",The L1A/Geolocation software shall follow the coding standards established by the MODIS project in MODIS Software Development Standards and Guidelines  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI within the MODIS SDP S/W systemshall employ the Earth Science Data and Information System (ESDIS)-supplied SDPTK mandatory functions to access the DAAC production environment and services.",The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI within the MODIS SDP S/W systemshall employ the Earth Science Data and Information System (ESDIS)-supplied SDPTK mandatory functions to access the DAAC production environment and services.",The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .",The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .",The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,1
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .",The L1A/Geolocation software shall follow the coding standards established by the MODIS project in MODIS Software Development Standards and Guidelines  ,1
Each MODIS Standard Product shall contain ECS core metadata with the content and format specified in DID 311.,"Shall create ECS_standard_global_metadata and MODISL1A_specific_global_metadata for each completed Level1A_data product, using Level0_open_metadata and selected metadata contained in MODIS_scan.  ",1
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,"Shall create ECS_standard_global_metadata and MODISL1A_specific_global_metadata for each completed Level1A_data product, using Level0_open_metadata and selected metadata contained in MODIS_scan.  ",1
Each MODIS standard product shall contain the MODIS product file name for all input product files as ECS archive metadata.,"Shall create ECS_standard_global_metadata and MODISL1A_specific_global_metadata for each completed Level1A_data product, using Level0_open_metadata and selected metadata contained in MODIS_scan.  ",1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.   ,1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall write Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.  ,1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall write Read_packet_log_msgs to Log_messages when errors occur in the Read_MODIS_packet process.  ,1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall issue Program_stop if MODIS_packets cannot be read from Level0_data file.  ,1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,1
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,1
"Each software process shall be able to process input data sets with the following nominal attributes: Time transitions, including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or startof data collection not on a granule boundary.  Terminator crossing , International Date Line crossing, and/or Earth pole within a granule.  Day, Night, or mixed  mode data.","process input data sets with the following nominal attributes: * Time transitions, including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or start of data collection not on a granule boundary. * Terminator crossing , International Date Line crossing, and/or Earth pole within a granule. Day, Night, or mixed  mode data.  ",1
Each Software process shall handle input data sets with the following error attributes: Corrupted data as indicated by Quality Assurance (QA) flags also located within the file.,Shall Abort_current_packet_processing if the calculated packet checksum is not the same as the packet_checksum in the MODIS_pkt.   ,1
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,Shall verify that the Spacecraft_indicator contained in the Level1A_Parameters is consistent with the Spacecraft_indicator found in the Level 0 file header.  ,1
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,Shall generate data_input_status_messages if errors are encountered in reading Level_2_Data. ,1
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,Shall generate data_input_status_messages if errors are encountered in reading Level_1B_Data.  ,1
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,Shall incorporate level1a_scan_flags into scan_quality flags.  ,1
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,Shall report errors as parameter_input_status_messages in log status message file through the use of SDP functions.  ,1
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,1
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,Shall generate data_input_status_messages and set scan_quality_flags if corrupted data values are detected.  ,1
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI within the MODIS SDP S/W systemshall employ the Earth Science Data and Information System (ESDIS)-supplied SDPTK mandatory functions to access the DAAC production environment and services.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Shall write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.   ,0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,Shall issue Program_stop if MODIS_packets cannot be read from Level0_data file.  ,0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.",Shall write Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.  ,0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.",Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
"  The DPU-SCUI shall compute a CHKS16 for telecommands received from the SCU.  If the CHKS16 does not match the value included in the telecommand,  an error will be reported to DPU-CCM.  If the checksum computes correctly, the command will be forwarded to DPU-CCM for execution.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.","Public FunctionsThis routine is called by the MIL-STD-1553 Command ISR and the SSI Interface ISR any time a command arrives from the SCU or the ICU, to enqueue the command and to wakeup the CCM Command Dispatch Task so that the command can be executed.",0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,Normal Data Exchange SequenceThe TMALI CSC serves as an intermediate manager of EVENT data supplied by the DCI Driver CSC and eventually delivered to the DPA CSC.  The TMALI CSC waits for notification from the DCI CSC that a frame limit (or data timeout) has been reached in the Ping-Pong buffer indicating the EVENT data is ready to be served to TMALI.   TMALI reads all EVENT data from the DCI and notifies the DCI that it can swap Ping-Pong buffers when ready.   TMALI gives a semaphore to unblock the tmaliWait() call from the DPA.,0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,Install Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,Shall write Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.  ,0
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,0
 The DPU-SCUI  shall notify the SCU of new data by using the Transfer Request Counter in accordance with interface control document 1143-EI-S19121.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .","Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.",Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
Each MODIS standard product shall contain the MODIS product file name for all input product files as ECS archive metadata.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.",Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
Each MODIS Standard Product shall contain ECS core metadata with the content and format specified in DID 311.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,Shall write Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.  ,0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.",Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.",Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0
  The  raw event list engineering mode shall collect events for transmission to the ground.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",0
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ","ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Install Exception Handlers The RSC processor also generates an external interrupt for the Power Fail Interrupt.  The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt.  Some custom routines must be provided to access this interrupt. These functions are described below, and are contained in sysLibSup.c.",0
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,"Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
  The DPU-TIS shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
 The DPU-CCM shall provide a command to reboot the DPU.,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Public FunctionsWhen no data is available in the TMALI queue this routine blocks on a semaphore awaiting availability of events on the TMALI queue as indicated by the ISR.  When data is already available on the TMALI queue, or the semaphore is taken, the number of events on the TMALI queue is determined and returned to the caller.  The parameter TickstoWait specifies the maximum time which the function can wait until data becomes available in kernel-ticks.  The parameter may be set to a symbolic value FOREVER which causes the function only to return when data is available.  When the function is called with a timeout value and no data becomes avialable within that period the function will return zero (events available).If the tmali task has not been initialized the function returns an error.",0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
  The DPU-BIT shall report errors that occur during tests as failures in the test results.,"Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,Shall write Read_packet_log_msgs to Log_messages when errors occur in the Read_MODIS_packet process.  ,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.",External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"Bootstrap CSCThe Bootstrap CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects. The Bootstrap for the Company X DPU will be nearly identical to that used on the INSTRUMENT Y CIDP and SCU, with the exception of minor hardware interface differences:* The interface to the hardware watchdog timer is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The interface to the mission elapsed time (MET) clock is different on the Company X DPU versus that used on the INSTRUMENT Y CIDP/SCU.* The INSTRUMENT Y bootstrap was able to discern a cold (power-on) boot from a warm (watchdog reset) boot by examining the value of the MET clock, which did not reset to zero on a warm boot.  The Company X DPU MET clock resets to zero on both a cold and warm boot, and so there is no distinction in the Company X bootstrap.",0
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.",Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.",InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.",Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating system.  The results of this test are stored in the EEPROM.  The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test.  A set of functions have been created to utilize this  bit map to exclude failed memory blocks from the VxWorks system memory pool.  The system memory pool is used by VxWorks to allocate memory dynamically.  In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber.  These functions are called from the usrInit() and usrRoot() functions in usrConfig.c.  The dramInit() function must be called prior to kernelInit() in usrInit().  The dramBuildMemPool() function is called just prior to initialization of filesystems and drivers in usrRoot().",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
Each MODIS Standard Product shall contain ECS core metadata with the content and format specified in DID 311.,"Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.","Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0
Each MODIS standard product shall contain the MODIS product file name for all input product files as ECS archive metadata.,"Data ProcessingWhen the DCX CSC compresses a data package, the given APID is incremented by one.  If the compressed copy of data is larger than original data set, the original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented.  In this way, the ground systems can discern compressed packets from non-compressed packets.",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1",Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware.  The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers.   The driver features a standard I/O interface which utilizes an extended ioctl() command set to support unique SSI hardware attributes.  This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the newer Tornado driver architecture. ,0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,"InitializationThe driver is initialized by invoking the initialization function adcInit().  The function initializes the ADC_LIST_ENTRY array, sets up convenience pointers to the ADC hardware registers, and sets up the ADC multiplexer for the first conversion (otherwise the very first ADC value requires three calls to adcUpdateNext()).  The ADC Driver can be re-initialized, which will result in the values in the ADC_LIST_ENTRY array being reset to their default values.The ADC_VALUEs are A-bit data items; however the hardware contains a B-bit A/D.  The upper bits are used to indicate invalid or suspect values as follows:* At initialization, the MSbit of each of the ADC_VALUEs is set (0x8000).* If a conversion fails (i.e. the driver reads the analog value and determines that the conversion has not yet completed), the second MSbit.",0
Each Software process shall handle input data sets with the following error attributes: Corrupted data as indicated by Quality Assurance (QA) flags also located within the file.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Shall create ECS_standard_global_metadata and MODISL1A_specific_global_metadata for each completed Level1A_data product, using Level0_open_metadata and selected metadata contained in MODIS_scan.  ",0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,"Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",0
  The DPU-BOOT CSC shall initialize the BIT_DATA in the SYSTEM_BLOCK to the incomplete/failure state prior to executing Stage 1 BIT.,"CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
"  The DPU-CCM shall be able to count a consecutively reported error.  When the the count for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number of times the error was reported.  ",Shall issue Program_stop if MODIS_packets cannot be read from Level0_data file.  ,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,Public FunctionsThis routine provides a means for the CCM task to send a Mode command from the ICU to the DPA software. The Mode command shall be used to command the DPU into a particular science or engineering event processing mode.  The mode shall become effective after the DPU has sent the Mode Ready message to the ICU.,0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.","Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as an bit XOR.,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
" The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.",Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Install Exception Handlers The RSC processor also generates an external interrupt for the Power Fail Interrupt.  The RSCVME Board Support Package of VxWorks? does not directly support access to this interrupt.  Some custom routines must be provided to access this interrupt. These functions are described below, and are contained in sysLibSup.c.",0
  The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"InitializationThe TMALI CSC is initialized by spawning the tmaliTask() with the startup default parameters.  This task will allocate memory for the TMALI_EVENT_QUEUE, install DCI ISRs, initialize static variables and data structures, and then enter an end-less loop in which it transfers the data from the DCI to the TMALI queue, throttled by the semaphore semDciWait.",0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.",Standard I/O InterfaceSSI ioctl() commands.,0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,Shall generate data_input_status_messages if errors are encountered in reading Level_2_Data. ,0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,"Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
  The DPU-BIT shall use the 1553 Driver CSC to perform MIL-STD-1553B internal BIT.,Shall verify that the Spacecraft_indicator contained in the Level1A_Parameters is consistent with the Spacecraft_indicator found in the Level 0 file header.  ,0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,Shall write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.   ,0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU compression software shall forward compressed data  to DPU-SCUI.,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"Public FunctionsThis routine provides a means for the CCM task to send a Purge Science Queue command from the ICU to the DPA software. The Purge Science Queue command shall be used to command the DPU to delete all data currently in the science telemetry output queue (i.e., data pending transmission to the spacecraft).",0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Shall write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.   ,0
" In Image Mode, the DPU-DPA shall be capable of binning images at different levels.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,0
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.",Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
Each MODIS Standard Product shall contain ECS core metadata with the content and format specified in DID 311.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ",Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Shall incorporate level1a_scan_flags into scan_quality flags.  ,0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.",SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Shall write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.   ,0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
" The DPU-SCUI, in the event of a buffer full condition, shall discard new data, return an error to the caller, and report an error condition to the DPU-CCM.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event List Engineering Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a list of raw events.,0
  The DPU-CCM shall collect DPU_HK and forward it to the DPU-SCUI.,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0
"  The DPU-ICUI shall format messages according to DPUICD-01, Section 3.1","Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
"  On boot, the DPU-CCM shall toggle the BC_INDEX if the boot is successful.  A boot is successful if command and telemetry communications have been established with the spacecraft.",Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,Shall incorporate level1a_scan_flags into scan_quality flags.  ,0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets.  These Source Packets are then packed into the STPDU for transmission to the SCU.  This processing is performed by scuiConvertToSTPDU().   The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the Company X 1553 ICD) by the function scuiWrite().",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.",Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.",The L1A/Geolocation software shall follow the coding standards established by the MODIS project in MODIS Software Development Standards and Guidelines  ,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Public FunctionsThis routine provides a means for the CCM task to send a Purge Science Queue command from the ICU to the DPA software. The Purge Science Queue command shall be used to command the DPU to delete all data currently in the science telemetry output queue (i.e., data pending transmission to the spacecraft).",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0
  The  raw event list engineering mode shall collect events for transmission to the ground.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"types of external (VME) interruptsThe DPU has five types of external (VME) interrupts:* MIL-STD-1553 Interface Interrupts,* DCI Interface Interrupts,* SSI Interface Interrupts,* Memory EDAC Interrupt, and* Ethernet Interrupt (ground use only).",0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of the x analog inputs, and the current value (ADC_VALUE) of each analog input.  To update a single value in the list, an application must call the update function adcUpdateNext().  The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well as the normal A/D conversion time.  Therefore, it takes two calls to adcUpdateNext() to update a single value in the list.  To keep the driver simple and to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function appropriately.",0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Public FunctionsThis routine provides a means for the CCM task to get the housekeeping info from the DPA software.  The CCM task will call this function and pass a pointer to the location that DPA is to store its housekeeping. ,0
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.","Public FunctionsThis routine manually sets the values of the spacecraft time maintained in the DPU hardware, and the UT Delta maintained in a static variable, to the given values.",0
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,0
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of occurrence.  Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq().  A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error.  If this error code is reported more than once in one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",0
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,"Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Data Processing Algorithm CSCThe DPA CSC includes the following components:* Algorithms  o Choose Guide Stars scans the bright stars in the reference frame, chooses guide stars and sets up tracking windows around the guide stars.o Drift Correction calculates the drift offset and roll of a just-completed tracking frame relative to the reference frame. o Create Finding Chart will use the above Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y then creates a list of the brightest stars and their intensities.o Derive Channel Boundaries calculates a set of channel boundaries (18 numbers - 9X, 9Y) which are used by the centroiding software in the Blue Processing Electronics (BPE) in the Telescope Module.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",0
The DPU-BOOT CSC shall enable EDAC on the SCM.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.",Shall write Read_packet_log_msgs to Log_messages when errors occur in the Read_MODIS_packet process.  ,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.",Shall generate data_input_status_messages if errors are encountered in reading Level_1B_Data.  ,0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,Public FunctionsThis routine provides a means for the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position command shall be used to command the DPU to update the position and window parameters that it uses to spatially filter event data. ,0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
  The DPU-SSI shall write to the SSI registers in 16-bit words only.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
"  The DPU-DCI shall read from the DCI Memory in B-bit words only, using the load multiple/store multiple instructions.",Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
  The DPU-ICUI shall receive real-time DPU_CMDs from the ICU via SSI and forward them to DPU-CCM.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the transmit IBG Interrupt.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Control and Monitoringthe CCM Control Task also handles memory dump commands.  In the event of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened.  The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM Command Dispatch Task busy for an extended period.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
  The DPU-DCI shall provide the capability for an application program to reset the DCI by writing to the DCI Reset Register.,"InitializationThe DCX CSC is initialized when the dcxTask() is spawned by the CCM CSC.  During initialization, the DCX CSC creates a compression queue to contain data packages which are pending compression.  Access to the compression queue is protected by a mutual exclusion semaphore.  The size of the compression queue is controlled by an initialization parameters which is passed into the dcxTask().  If the amount of memory requested cannot be allocated, initialization of the DCX CSC will fail.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU.  The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT.  The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,"Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
"  The DPU-DCI shall provide the capability for an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong buffers and interrupt the software.","CPU BITThe CPU BIT consists of a series of tests designed to test each of the functional units of the processor.  These include test for the Branch-Unit, the Fixed-Point Unit, the Floating-Point Unit, the Interrupt-Unit, and the Timer Unit.   Each of these tests consists of executing a few selected instructions from the this functional unit. The General Purpose Registers (GPR), the Segment Registers (SR), the Counter Register (CTR), and the Condition Register are tested for stuck-bits as part of the Branch-Unit test.  This is done by writing a 1s pattern (verified by reading it back) and then writing a 0s pattern (verified by reading it back).",0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task  communicates with the ICU, creates event list data products, creates Tracking Instrument Ys in the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,Shall generate data_input_status_messages and set scan_quality_flags if corrupted data values are detected.  ,0
  The DPU-BOOT CSC shall read from EEPROM in 32-bit words only.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.",The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,0
  The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the ICU.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,The L1A/Geolocation software shall follow the coding standards established by the MODIS project in MODIS Software Development Standards and Guidelines  ,0
Each Software process shall handle input data sets with the following error attributes: Wrong format input files.,"Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
 The DPU-SCUI shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ",Event ProcessingThe Event Processor Task is also responsible for creating the Finding Chart.  The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y.  The parameterized finding chart will be created by listing the X & Y detector location of each star along with a CxC pixel matrix around the star location of the intensities. The Event Processor Task will create the necessary housekeeping for the DPA.,0
  The DPU-ICUI shall report errors to DPU-CCM for inclusion in the DPU_HK.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as an bit XOR.,0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.","Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0
"  When observing a new GRB, and the XRT_POS becomes available from the ICU, the DPU-DPA shall shift and resize the image and event windows appropriately.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,0
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  The DPU-RTOS shall be a real-time, multi-tasking operating system.","Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,"Setting Frame Depth in DCIThe optimum frame depth will be determined with benchmark testing.  The default frame depth is 10 frames.  Given the above data, it will take approximately 24 msec to read 10 maximum-sized frames at the maximum data transfer rate.",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Hardware InterfacesThe DCI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access mode.  Reads from DCI memory are performed in VME D32 mode via a special assembly language routine which uses the lwm/stm instructions to minimize the transfer time.,0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
 The DPU-TMALI shall configure the DCI interface data timeout at startup as specified by TMALI_TIMEOUT provided during initialization.  The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Public FunctionsWhen no data is available in the TMALI queue this routine blocks on a semaphore awaiting availability of events on the TMALI queue as indicated by the ISR.  When data is already available on the TMALI queue, or the semaphore is taken, the number of events on the TMALI queue is determined and returned to the caller.  The parameter TickstoWait specifies the maximum time which the function can wait until data becomes available in kernel-ticks.  The parameter may be set to a symbolic value FOREVER which causes the function only to return when data is available.  When the function is called with a timeout value and no data becomes avialable within that period the function will return zero (events available).If the tmali task has not been initialized the function returns an error.",0
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.",Install Exception HandlersThis routine installs a hook routine for the Memory Error Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
" The DPU-TMALI shall install callbacks for handling all DPU-DCI interrupts including Error interrupt, Ping-Pong Timeout interrupt, and Ping-Pong Complete Flag interrupt.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Message to each Instrument at a 1 Hz rate.  The Clock Message contains both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral Time (UT), based on an epoch of TBD.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU compression software shall forward compressed data  to DPU-SCUI.,Shall generate data_input_status_messages if errors are encountered in reading Level_1B_Data.  ,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to download configurations of the DPU-RTOS from the RS-232 interface to EEPROM on command.,"Instrument Y ProcessingAt the end of an exposure, the Instrument Y in the accumulation buffer is transferred to the Instrument Y data product buffer one horizontal line at a time, starting at the top of the Instrument Y to form a PROD_INSTRUMENT Y data product.  This rasterized Instrument Y in the Instrument Y data product buffer will be enqueued for transmission to the spacecraft.",0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
"  There DPU-DPA shall have three science modes, X, Y mode, and X/Y mode.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
 The DPU-CCM shall provide a command to reboot the DPU.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
  The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it's required to truncate the final tracking frame.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
"  The DPU-BOOT CSC shall create a record of failed DRAM blocks, BIT_DRAM, in the SYSTEM_BLOCK.",The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,0
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,Real-Time Clock InterfaceThe Real-Time Clock (RTC) Registers of the RAD6000 are special-purpose registers not normally accessible to C language programs.  Some assembler wrapper functions provide access to these.  ,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,External Program InterfacesThis routine copies the BIT Results into bitHk for inclusion in the DPU Housekeeping.,0
  The DPU-BOOT CSC shall put the processor into diagnostic mode.,Shall generate data_input_status_messages and set scan_quality_flags if corrupted data values are detected.  ,0
  The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is received.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the most significant word of the error number.  These module identifiers are defined in a VxWorks header file.",0
" The DPU-CCM shall collect a TASK_HBEAT from  DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA .  Non-responsive tasks will be reported in DPU_HK.","Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
"  Image mode shall have the ability to produce a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C.  The Parameterized Finding Chart shall consist of the brightest sources. Each source shall be parameterized by its position [X,Y] and Intensity/brightness.","InitializationThe DPU-BIT should be initialized every time the DPU boots.  The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"InitializationThe TMALI CSC is initialized by spawning the tmaliTask() with the startup default parameters.  This task will allocate memory for the TMALI_EVENT_QUEUE, install DCI ISRs, initialize static variables and data structures, and then enter an end-less loop in which it transfers the data from the DCI to the TMALI queue, throttled by the semaphore semDciWait.",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping.  If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued later (see ccmCtrlTask()).  This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR.  The error queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error code.  The repeat error code is a special error code that follows a normally reported error code to indicate that the normally reported error code previously reported has occurred more than once in the last high rate reporting period",0
Each MODIS Standard Product shall contain ECS core metadata with the content and format specified in DID 311.,"Command HandlingCommands are dequeued from the Command Queue and executed by the Command Dispatch Task, ccmCmdTask().  This task blocks on a semaphore which is given by ccmCmdEnq(). The ccmCmdTask() wakes on the semaphore and calls ccmCmdProcess() to process waiting commands.  The ccmCmdProcess() function subsequently retrieves waiting commands from the Command Queue and invokes ccmCmdDispatch() to verify the expected length of the command and execute it.  If command echo is enabled, ccmCmdDispatch() will call ccmHkMkCmdEcho() to blindly echo the command back to the ground.  Counts for both rejected and executed commands are maintained. If the command sent to ccmCmdEnq() is either a 1 Hz Clock Time message or an Attitude message from the spacecraft, the command will not be forwarded to the Command Queue, but instead will be executed directly while still in interrupt context.  Attitude messages are forwarded to dpaCommandSend(), while the 1 Hz Clock Time messages parameters are passed to tisTimeSync() in order to synchronize the current time.  Any other non DPU or spacecraft observatory messages are quietly discarded without reporting an error.In order to guarantee that ccmCmdTask() task reports in with the CCM Control Task periodically in absence of a ground command, the semaphore has a timeout value of 20 seconds.  If the semaphore times out, the task will verify no commands are on the Command Queue, and then report in to the CCM Control Task by calling ccmTaskReport().",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
 The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization.  The default value shall be M frames and shall be capable of being modified dynamically.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Shall verify that the Spacecraft_indicator contained in the Level1A_Parameters is consistent with the Spacecraft_indicator found in the Level 0 file header.  ,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
The DPU-BOOT CSC shall wait a minimum of C msecs after a write to EEPROM before performing a read from EEPROM.,"Public FunctionsThis routine returns OK, or ERROR and sets errno if the passed parameter is NULL.  The following error codes may be returned in errno ",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Analog to Digital Converter Driver CSCThe Analog to Digital Converter (ADC) Driver CSC is a new driver which controls and retrieves data from the ADC hardware.  The key elements of the ADC driver include:* A list (array of ADC_LIST_ENTRY) which maintains the setup information and current value (ADC_VALUE) for each of the 24 ADC values. * An API function, adcUpdateNext(), which causes a single ADC_VALUE to be updated every other call to the driver.  A value is updated every other call since each value requires a multiplexer settle time as well as an ADC conversion time.  In order to keep the driver simple, the responsibility for implementing the correct settle time and conversion time rests with the application.* An API function, adcGet(), which returns a copy of the current list of ADC_VALUEs.",0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.",Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication.  This mode uses the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages.  This Byte Count queue is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize the transmission of messages over SSI.  In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue.  When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted.  At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt.  The Byte Transfer Limit corresponds to the entry on the Byte Count queue.  When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a message of a particular length.",0
Each Software process shall handle input data sets with the following error attributes: Corrupted data as indicated by Quality Assurance (QA) flags also located within the file.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Data Transfer to QueueWhen the tmaliTransferToQueueISR() ISR is invoked, it gives a semaphore to awaken tmaliTask() that will transfer data to the  queue over the VME bus.  The tmaliTask() uses the read() function in the DCI Driver, which implements a data transfer using a high speed assembly language routine.  Because the TMALI ring buffer is implemented as an array, the tmaliTask() function must first examine the TMALI_EVENT_QUEUE to determine whether the data resident in the DCI buffer can be retrieved using a single read() call, or whether two calls are required in order to correctly handle the wrap-around case at the end of the ring buffer.  In addition, the tmaliTask() function must perform an error check to verify that there is sufficient space to receive the data available in the Ping-Pong buffer.  If there is insufficient space for the complete set of frames, the entire contents of the readable Ping-Pong buffer are discarded and the error S_TMALI_QUEUE_FULL is reported using ccmErrEnq mechanism.  Such discarded data constitutes an integral number of CCD frames, since the DCI hardware design ensures that Ping-Pong transitions occur at CCD frame boundaries.  This policy of discarding the newer data supports the scientific viewpoint that events collected right after a burst have more scientific value than events collected later.",0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.",Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-DPA shall be capable of providing DPA_HK on request.,"Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
The DPU-BOOT CSC shall enable EDAC on the SCM.,The L1A/Geolocation software shall follow the coding standards established by the MODIS project in MODIS Software Development Standards and Guidelines  ,0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,"Time Interface ConfigurationThe TIS CSC provides three functions for use by the CCM command dispatcher to control these values:* tis1ppsSet()  select active A PPS signal,* tisSyncModeSet()  set whether manual clock jamming is enabled, and        tisTimeSet()  manually jam a value into the DPU clock.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an incorrect number of command arguments are entered.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  Tthe DPU-CCM shall create DPU_HK_START and forward it to DPU-SCUI at bootup.,Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,0
  The DPU-TIS shall provide the capability for application programs to access the SC_TIME from the SCM.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
 The DPU-SCUI shall receive command messages in the form of Telecommand Packets from the SCU and make them available to the DPU-CCM.,Control and MonitoringThe DPU produces eight types of housekeeping packets.,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall validate commands entered for syntax and number of arguments.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-EDAC shall contain a background task which walks DRAM to trip single-bit errors (SBEs).,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,"Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,Standard I/O InterfaceSSI ioctl() commands.,0
 The DPU-SCUI shall time stamp the secondary header of the Source Packets with the current SC_TIME retrieved from the DPU-TIS module.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a Level 3 reuse component from the INSTRUMENT Y project.  The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,0
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,Shall verify that the Spacecraft_indicator contained in the Level1A_Parameters is consistent with the Spacecraft_indicator found in the Level 0 file header.  ,0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
"Each software process shall be able to process input data sets with the following nominal attributes: Time transitions, including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or startof data collection not on a granule boundary.  Terminator crossing , International Date Line crossing, and/or Earth pole within a granule.  Day, Night, or mixed  mode data.","Sending Messages to the ICUIn order to send messages to the ICU, the DPU FSW tasks call icuiEnq().  The calling application passes the function code of the message to be sent, as well as a pointer to a data structure containing the message parameters associated with the given function code.  The icuiEnq() function formats the message according to the ICU/DPU ICD using icuiMsgFormat(), and then writes the message to SSI Driver transmitter buffer by calling the driver write() function. A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  A timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.",0
 The DPU-CCM shall notify the ICU upon completion of boot and flight software initialization.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.",The L1A/Geolocation software shall use all applicable mandatory SDPTK 5.2 routines and any additional SDPTK routines that are useful.  ,0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0
 The DPU-CCM shall provide a mechanism for other CSCs to report errors for inclusion in the DPU_HK.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2.  During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied to this area.  During Boot Sequence 2, the  remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block.   Then the test flushes the cache and reads back the entire block.  If a single-bit error occurs on the read-back, the location is read again.  If another single-bit error occurs, the test assumes a hard error and marks the whole block bad.  If a multiple-bit error occurs, the whole block is marked bad.  If the value read back does not match the address, the whole block is marked bad.  This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit words.  Each bit in a result word represents the result of testing a ? KB block of DRAM.  These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase.  A set bit indicates that a block of DRAM has failed.  A clear bit indicates that a block of DRAM has passed the test.",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"Public FunctionsSets the poll rate and buffer rate to the given values.  If the values are out of range, the prior values are retained and an error is reported.  The scuiTask() semaphore timeout (scuiTaskTimeout) is automatically adjusted based on the given poll rate, by setting the timeout to approximately  the poll rate (not that the timeout is expressed in clock ticks, and so the resolution is low and only approximates  of the poll rate).",0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Receiving Commands from the SpacecraftThe DPU/SCU interface specifies that commands for the DPU will be transmitted from the SCU to the DPU on a separate MIL-STD-1553 subaddress.  The SCU Interface Command Reader ISR, scuiCmdReadISR(). consists of an ISR installed on a specific MIL-STD-1553 subaddress corresponding to the command subaddress for the INSTRUMENT X DPU. This ISR is installed at initialization by scuiInit().  Upon interrupt, the scuiCmdReadISR() reads a single telecommand from the 1553 bus, checks the length and checksum, and then forwards valid commands to the Command and Control CSC for dispatch via ccmCmdEnq().  Errors are reported by incrementing an invalid command counter.",0
  The DPU-DCI shall provide the capability for an application program to receive data at a rate of A bytes per second over the DCI interface.,HousekeepingThe TMALI CSC collects housekeeping data that can be retrieved via a call to tmaliHkGet().   TMALI CSC housekeeping is returned via the TMALI_HK data structure.,0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
  The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests.  The first test shall write the address of each memory location to that location.  The second test shall write the complement of each memory location to that location.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.","Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Command HandlingThe DPU accepts commands via two interfaces  from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface.  Any of the DPU commands can be sent from the SCU or the ICU.  The source for a command from the DPU is one of the following:* ICU  command is generated and sent by the ICU via the SSI.* SCU  command is generated and sent by the SCU via the 1553.* G-ICU  command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU  command is generated on the ground and sent to the DPU via the SCU/1553.",0
  The DPU-DCI shall write to the DCI Memory in B-bit words only.,External Program InterfacesReads the BIT results from the location pointed to by pBitResults (which is assumed to be in EEPROM) into the BIT results data structure in DRAM.,0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Standard I/O Interface The write primitive does not block.  The write() primitive is managed by the tyLib function, tyWrite() when the driver is not in BGTX Message Mode.  The size of the Tx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation. This routine returns either the number of bytes written, or ERROR.",0
" The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
"  The DPU-CCM shall, in rejecting a command, report an error in DPU_HK indicating  the byte-code of the command being rejected in the LSB of the errno as described in 03691-DPUSDP-01.  ","Data Transfer to QueueDuring initialization, the TMALI CSC installs an ISR hook routine, tmaliTransferToQueueISR(),  into the DCI Driver which is invoked when:* the DCI interface reaches the programmed frame limit in the Ping-Pong buffer, or* the DCI interface detects a data receipt timeout.",0
"  The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a hardware reset if CTS is not asserted.","Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,Install Exception Handlersa default interrupt handler and is installed into element five (5) of the system interrupt table.,0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task  creates histogrammed Instrument Ys, performs Tracking (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM task.",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0
" At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), install device drivers, execute the BIT driver loopback tests (cold boot only), and then spawn the application flight software.",Error Detection and Correction CSCThe Error Detection and Correction (EDAC) CSC is a Level 1 reuse component from the SSFF and INSTRUMENT Y projects.  The EDAC CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task.  The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01.The only design change was to add logic to check for excessive external (SCM) EDAC interrupts.,0
" The DPU-SCUI shall detect the condition in which the SCU fails to read one or more MIL-STD-1553B subaddresses during the transmission of a STPDU, shall cancel the write on those subaddresses, record new data to those subaddresses, and report an error to the DPU-CCM.","Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",0
  The DPU-TMALI shall place the starting address of the event ring buffer in TMALI_HK.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,0
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,"Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
 The DPU-CCM shall use DPU-ICUI to communicate with the ICU.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,Control and MonitoringThe DPU produces eight types of housekeeping packets.,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,Shall detect corrupt converted_instrument_scan_data.converted_mirror_encoder_data.  ,0
  The DPU-CCM shall maintain counts of both the number of commands successfully received and rejected and report the parameters in DPU_HK.,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
The image mode shall shift successive frames according to the calculated spacecraft drift and co-add the frame into an accumulated image.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects.  The detailed design of the BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT).  The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM.  If an error occurs in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,"Time RetrievalThe DPU maintains a local copy of the spacecraft clock and current UT Delta in order that the DPU FSW can timestamp data products and packets.  The TIS CSC provides a function, tisTimeGet(), which retrieves a copy of both the current DPU clock value and the most recent UT Delta value.  Time is communicated among DPU FSW applications via the TIS_TIME data structure.",0
  The DPU-SSI shall provide the capability for an application program to install a callback routine to respond to the receive IBG Interrupt.,"Telescope Module Access Library and Interface CSCThe TMALI CSC includes the following components:* A queue, TMALI_EVENT_QUEUE, implemented using a ring buffer, which contains the detector events which have been received over the data capture interface from the DCI Driver, but which have not yet been retrieved by the DPA CSC;* An API which facilitates the retrieval of detector events from the queue by the DPA CSC.  The API consists of the tmaliNextEvent() and tmaliWait() functions.* An set of API functions used by the DPA CSC to configure the DCI interface, including tmaliBitArrangementSet(), tmaliDciFrameDepthGet(), tmaliDciFrameDepthSet(), tmaliDciWindowSet(), tmaliDataTimeoutSet(), and tmaliDataTimeoutGet().* An API housekeeping function, tmaliHkGet(), which gathers  CSC housekeeping data at the request of the Command and Control Task.* The task tmaliTask() and an ISR tmaliTransferToQueueISR() work together via a semaphore to synchronize the transfer of data from the DCI to the  queueAn error handling ISR, tmaliDciErrorReportedISR(), is installed as a hook routine to the DCI Driver, and is used to keep track of the number of errors reported by the DCI driver.",0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
  The DPU-RTOS shall install an hook routine which is invoked on system exception which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,"Standard I/O InterfaceThe read() primitive does not block.  A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move.  For optimum performance, the block move is implemented in assembler.  The number of bytes read is returned to the caller.",0
  The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,The L1A/Geolocation software shall use all applicable mandatory SDPTK routines and any additional SDPTK routines that are useful.  ,0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,"Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"ACS Message ProcessingThe SCUI task will send the ACS message to the DPA by calling the function dpaACSReceive().  Because the SCUI task will be calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly.  If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product.  To return quickly, dpaACSReceive() will place the ACS message in a data queue then return.  The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,Shall write Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.  ,0
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
"  The DPU-ICUI shall compute a CHKS_16 for DPU_CMDs received from the ICU.  If the expected checksum is not computed, the command will be discarded, an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
 The DPU-SCUI shall be capable of receiving a telecommand from the SCU every N ms and forward it to DPU-CCM for processing.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Shall generate data_input_status_messages if errors are encountered in reading Level_2_Data. ,0
  The DPU-SSI shall provide the capability for an application program to set the Inter-Block Gap (IBG) Timeout for transmitted and received messages.,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project.  The Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state.  Data included in this table includes housekeeping production rates, CCM specific flags, and the number of commands executed.* A Command Queue into which commands are placed when they arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the DPU FSW.  These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot().  After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs.  Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM.  If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used.  The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn().  When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit().  The command processor uses the created table to verify expected command lengths for newly received commands.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of the x analog inputs, and the current value (ADC_VALUE) of each analog input.  To update a single value in the list, an application must call the update function adcUpdateNext().  The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well as the normal A/D conversion time.  Therefore, it takes two calls to adcUpdateNext() to update a single value in the list.  To keep the driver simple and to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function appropriately.",0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,"Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
"  The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatic time synchronization is enabled.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.","Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Full-Frame (FF) Engineering ModeThe purpose of Full-Frame Engineering Mode is to monitor the health of the detector to locate hot spots and dead pixels. Detector events produced in Full Frame High Resolution detector format are received and histogrammed for a commanded integration time.  The entire Instrument Y is transmitted to the ground.  This mode can use high resolution (all pixels) or low resolution imaging (BxB , DxD pixel binning).",0
 The DPU-TMALI shall be capable of making data available from the DCI to DPU-DPA.  DPU-TMALI will populate a ring buffer with frames of data for application task retrieval.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,0
  The DPU-BOOT CSC shall create a record of the CPU BIT in the SYSTEM_BLOCK.,Ring buffer data structureThe pIn and pOut pointers are defined  as follows:* pIn- last location filled with data* pOut- last empty location,0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The DPU-RTOS shall provide the capability to invoke user-installed Interrupt Service Routines (ISRs) in response to internal and external (VME) interrupts.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Instrument Control Unit Interface CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU.  The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to meet these objectives, ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Reader ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",0
  The DPU-CCM shall forward ACS_MSGs to the DPU-DPA for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"Shall create ECS_standard_global_metadata and MODISL1A_specific_global_metadata for each completed Level1A_data product, using Level0_open_metadata and selected metadata contained in MODIS_scan.  ",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","Command HandlingWhen a command arrives from the SCU (via the 1553 interface) or the ICU (via the SSI interface), the respective ISR will enqueue the command packet into a Command Queue, and then give the semaphore to awaken the ccmCmdTask().  Since it is possible for the DPU to send a command to itself, commands may arrive at interrupt context or task context.  Therefore the CCM maintains two queues  one for interrupt context which is not semaphore protected, and one for task context which is semaphore protected.",0
  The DPU-TIS shall provide the capability for an application program to select the active 1PPS signal.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
  The DPU-DCI shall report errors to an application program by setting the ERRNO task variable and returning ERROR.,InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,0
  The DPU-SSI shall provide the capability for an application to determine the number of bytes in a message received from the ICU.,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Ring buffer data structureThe  CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed to verify if the buffer is empty. The buffer only stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes have to be converted before reading data.",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Time Synchronization CSCThe Time Synchronization (TIS) CSC is a new component which provides services to maintain time synchronization between the DPU and the spacecraft, and which provides an API for retrieval of the current system time.",0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ",Standard I/O InterfaceSSI ioctl() commands.,0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,0
 The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
 The DPU-CCM shall provide a command to reboot the DPU.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
  The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.",Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
  The DPU-RTOS shall include the capability to dynamically load object modules from the EEPROM.,Telescope Module Access Library and Interface CSCThe Telescope Module Access Library and Interface (TMALI) CSC manages the detector event queue and provides an API for the retrieval of detector events from that queue to the data processing algorithms.,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,InitializationThe TIS CSC is initialized by calling the tisInit() function.  The TIS CSC does not have an associated operating system task.  The TIS CSC will initialize the DPU hardware to perform or not perform automatic time synchronization with the spacecraft as indicated by an initialization parameter passed to the tisInit() function.  There are two 1 PPS signals between the DPU and the Spacecraft (a primary and alternate);  the TIS CSC will select the active 1 PPS signal according to the parameter passed to the tisInit() function.,0
 The DPU-CCM shall record an error to the LAST_BOOT_IVEC location in EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur.  An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Install Exception Handlers Certain conditions can cause the VxWorks? exception handler to reboot the DPU.  These conditions include a Data Storage Interrupt from within an interrupt context, a Multiple-Bit Error (MBE), and a deferred-work queue overrun.  Under these circumstances, interrupting devices on the Company X Communication/Memory Module must be stopped prior to jumping back to the Bootstrap.  This can be done by installing a hook routine to perform the cleanup in sysHwInit() using the function rebootHookAdd().  However, to avoid the need to cleanup interrupts, an exception handler is installed which forces a watchdog reset, which will effectively clean up the pending interrupt problem.  The exception hook saves the contents of the Exception Stack Frame to EEPROM and waits for a watchdog timeout.  The following call is added to the usrRoot() function in usrConfig.c:",0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the processor.  This must be done separately since some VME interrupts may share an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW.  This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
  The DPU-CCM shall utilize bootup default values stored in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",0
  The DPU-RTOS shall provide a function to allow an application program to write to the Real-Time Clock registers on the RAD6000SC CPU Module.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Public FunctionsThis routine returns a copy of the local copy of the spacecraft time maintained in the DPU hardware, and the UT Delta from the most recent Clock Message which is maintained in a static variable.  The caller may pass in NULL for either parameter.  If NULL is passed for both parameters, the function performs no action and returns OK.",0
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,Shall generate data_input_status_messages and set scan_quality_flags if corrupted data values are detected.  ,0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.","Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",0
  The DPU-DCI shall read from the DCI Registers in C-bit words only,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.","Public FunctionsOperationally, the DPU uses the Jam bit in the DCI CSR to indicate whether the DPU is actively syncing its clock with the spacecraft or not.  This function sets the Jam bit if autoSync is FALSE, and negates the Jam bit otherwise. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
"  The DPU-1553 CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.","Public FunctionsThis routine initializes the interface to the ICU.  This routine opens SSI Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode in the SSI Driver.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,The L1A/Geolocation software shall use HDF Version 4.1r1 for reading and writing all HDF files.  ,0
  The DPU-ADC shall create a fixed analog conversion scan list containing the A DPU analog values (active values plus one ground reference value).,SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Time Interface ConfigurationThe TIS CSC utilizes the manual jam bit in the DCI CSR to indicate whether automatic time synchronization is enabled or disabled.  If automatic time synchronization is enabled, and a command is issued to manually jam the DPU clock, the command will be rejected - see tisTimeSet().",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .","Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",0
  The DPU-CCM shall process real-time non-deferred commands within B ms of receipt from the ICU or the SCU.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Instrument Y ProcessingThe Instrument Y Processor Task will perform tracking by breaking the exposure up into 10-second sub-exposures which are shifted and added into a final histogrammed Instrument Y.  Tracking is performed by choosing guide stars from the first 10-second Instrument Y of an exposure.  Then in each subsequent Instrument Y, these guide stars are found and the drift is determined by comparing the two Instrument Ys. The Instrument Y is then shifted by the determined drift and added to the previous Instrument Ys in the accumulation buffer.",0
  The DPU-BIT shall perform MIL-STD-1553B internal BIT.,"Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors.  Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground.  If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"Data ProcessingData requiring compression is received via the dcxEnq() function, which has an API definition which matches the scuiEnq() API.  The DCX CSC handles the PKG_CTRL flags as described below:* PKG_COMPRESS  this flag is set to indicate if the package is actually compressed.* PKG_PRIORITY_HIGH  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.* PKG_SEGMENT  this flag is ignored by the DCX CSC but is forwarded to the SCUI CSC.PKG_CHECKSUM  if set, the dcxEnq() function will compute a checksum which is appended to the data, and then the flag is negated.  The checksum will be compressed with the rest of the data, so that when the data is decompressed on the ground, the checksum can be recomputed and compared to provide a good indication of whether the decompressed copy of the data matches the original data set.",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,"Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI in the MODIS SDP S/W shall run in the ECS production environment.","Checksum LibraryA number of checksum algorithms are required by various system and application software modules.  In order to avoid duplication of code, the various checksum algorithms are encapsulated into a checksum library. ",0
" The DPU-DPA shall produce a Parameterized Finding Chart, PROD_FINDING_CHART, that is so many bytes.","Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
 The DPU-SCUI shall rate-buffer the delivery of STPDUs to the SCU according to the SCU_BUFFER_RATE parameter provided during initialization.  The default value shall provide data to the SCU at a rate of X Kbps and shall be capable of being modified dynamically.,Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Instrument Y Processing Task.,0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI shall be coded according to thestandards specified in the MODIS Software Development Standards and Guidelines, SDST-022 .","Time SynchronizationThe time contained in the Clock Message is specified to be valid on the rising edge of the next 1PPS signal.  When the DPU receives the Clock Message, the 1553 ISR calls the tisTimeSync() function, forwarding the data portion of the clock message to the TIS CSC via the TIS_CLK_MSG data structure..  The tisTimeSync() function will immediately copy the spacecraft clock value to the DPU clock hardware registers. The DPU hardware is designed to latch in the new time on the rising edge of the next 1 PPS signal (the act of writing a new time to the hardware registers arms the latch function in the hardware).  Once the new time is latched, the hardware automatically disables the time latch function to avoid the potential of latching in an old time at the next 1 PPS signal.will be received within one second.  In the unlikely event a UT Delta is discarded, an event message is enqueued to ccmErrEnq() for informational purposes.",0
  The DPU-DPA shall be capable of collecting detector events over the full  FOV.,"process input data sets with the following nominal attributes: * Time transitions, including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or start of data collection not on a granule boundary. * Terminator crossing , International Date Line crossing, and/or Earth pole within a granule. Day, Night, or mixed  mode data.  ",0
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
 The DPU-DCI shall provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
 The DPU-CCM shall use DPU-EEPRM to access the EEPROM.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR).  VME interrupts are prioritized; however the DPU does not allow nested interrupts, and so any interrupts which occur while servicing another interrupt will pend until the current ISR has returned.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall output an error message to the RS-232 interface if an invalid command argument option is entered.,Shall incorporate level1a_scan_flags into scan_quality flags.  ,0
  The DPU compression software shall forward compressed data  to DPU-SCUI.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,"initial boot sequencethe initial boot sequence, identified as Boot Sequence 1.  This processing takes place when the Bootstrap executes from Programmable Read-Only Memory (PROM).  Boot Sequence 1 is composed primarily of 4 steps as follows.First, in this sequence, EEPROM is updated.  Then, CPU BIT and a portion of DRAM BIT is performed.  Next, DRAM is cleared.  Lastly, Boot Sequence 2 is copied to DRAM and executed. During this sequence, the rest of DRAM is tested if skipBit is not set.  Load parameters are put into registers r13, r14, r15 and r16.  DRAM is cleared up to memSize.  Lastly, either the DPU-RTOS or the Bootstrap Monitor is loaded and executed according to the load parameters.",0
"  The DPU-ICUI shall check the length of a received DPU_CMD against the message length determined by the Inter-Block Gap.  If the received value does not match, then the command will be discarded, and an error will be enqueued to DPU-CCM, and a NAK message transmitted to the ICU within a second.","Error Collection and ReportingIn order to insure that error counts are not lost due to rollover, ccmErrEnq(), checks to insure that the count for a given error has not gone above 250 in one high rate housekeeping reporting period.  If the error count exceeds 250 for a particular reporting period, ccmErrEnq() will enqueue S_ccm_ERR_REPEAT error with the current error count and will clear its error tracking mechanism.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"Centroiding Confirmation (CC) Engineering ModeThe purpose of Centroiding Confirmation Engineering Mode is to determine the validity of derived channel boundaries. Detector events are collected and histogrammed for a commanded integration time.  The full field is divided into 8x8 sub-Instrument Ys, each of ExEcentroided (by 8) pixels.  These sub-Instrument Ys are then modulo binned to produce a set of 8x8 pixels pseudo-Instrument Ys.  The Instrument Ys are column (y axis) ordered, as are the pixels within them.  These pseudo Instrument Ys are transmitted to the ground.",0
  The  raw event list engineering mode shall collect events for transmission to the ground.,"Standard I/O InterfaceThe read() primitive does not block.  The read() primitive is implemented by simply passing its parameters to the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0
  The DPU-ADC shall read from the SCM registers in B-bit words only.,Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector health and performance. Detector events produced in Full Frame High Resolution detector format are collected and histogrammed for a commanded integration time to produce a pulse-height histogram.,0
 The DPU-DPA shall be able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,Real-Time Clock InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
"  The DPU-CCM shall monitor the status of DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA by examining their TASK_INFO and report this information in DPU_HK.","Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
The DPU-BOOT CSC shall disable write-protection of the EEPROM on the SCM.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI.  The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
  The DPU-DPA shall calculate drift with respect to the reference frame based on the established guide stars then perform a shift-and-add of the image mode data.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0
"  The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Shall generate data_input_status_messages if errors are encountered in reading Level_1B_Data.  ,0
Each software process shall perform quality checks on the input and output data and report on the degree to which the product conforms to instrument specification or science data accuracy specifications.,"Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Data ProcessingThe DCX CSC is a task which receives data packages from other tasks, compresses the data using the VBTWL algorithm, and then forwards the compressed data package to the SCUI CSC.",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,Install Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt.  The hook routine will be called from the interrupt context.  This function returns OK always.,0
  The DPU-CCM shall forward CLK_MSGs to the DPU-TIS for processing immediately upon receipt (I.e. shall not enqueue the message to the command dispatcher queue).,"remaining DPU FSW tasksFollowing startup, the Command and Control Task spawns the remaining DPU FSW tasks, which are described below:* The Command Dispatch Task (ccmCmdTask) is an Application Framework Software task which is responsible for dispatching commands which arrive from the ICU or the SCU.  Commands are executed directly by this task by calling the applicable CSC function* The SCU Interface Task (scuiDPTask) receives telemetry data from other tasks, converts them to CCSDS Version1 Source Packets, forms Company X Telemetry Protocol Data Units (STPDUs) from the Source Packets, and transmits the STPDUs to the SCU via the MIL-STD-1553B Interface.* The Telescope Module Event Transfer Task (tmaliTask) is an Application Framework Software task which is responsible for transferring data from the DCI ping/pong buffers to the TMALI data buffer in response to a DCI frame limit or data timeout interrupt.* The Data Compression Task (dcxTask) receives telemetry data from other tasks, uses a lossless data compression algorithm to compress the data, and then enqueues the data to the SCU Interface Task.* The Data Processing Algorithms Tasks (dpaIMTask and dpaEPTask) process incoming detector events according to the commanded mode, create data products, and enqueue those data products to the Data Compression Task (if compression is enabled) or to the SCU Interface Task.* The Error Detection and Correction Memory Scrubber Task (edacTask) cycles through the text and data segments of the DPU to trigger the correction of single-bit errors which may have occurred, in order to help prevent the occurrence of uncorrectable multiple-bit errors.",0
"  At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC shall compute a CHKS_32 on the X stored in EEPROM and compare it against the CHKS_32 sent with the X during the transfer.  The Bootstrap Monitor shall output to to the RS-232 interface both CHKS_32s and a message indicating whether the download was successful.",Standard I/O InterfaceSSI ioctl() commands.,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait a minimum of D usecs between successive writes.","Public FunctionsThis routine provides a means for the CCM task to send the Stop Mode command from the ICU to the DPA software. The Stop Mode command shall be used to command the DPU to immediately stop processing events, complete the current data product, purge events from the DPU hardware, and enter Idle Mode.  The data product will include the actual exposure time and the number of frames.  In response to this command, the DPU shall issue a Mode Complete command to the ICU after finishing the before-mentioned tasks.",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry done subaddress.  When the telemetry done subaddress is written, the scuiTlmDoneISR() is called which gives a semaphore to awaken the scuiTask().  The software provides fault tolerance by automatically awaking after approximately two polling periods.  This timeout is automatically adjusted any time the SCU Poll Rate value is changed by command.",0
  The DPU-RTOS shall provide a function to allow an application program to read from the Real-Time Clock registers on the RAD6000SC CPU Module.,Shall report errors as parameter_input_status_messages in log status message file through the use of SDP functions.  ,0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the MIL-STD-1553B.  The first test shall construct and write half-word (16-bit) values obtained by adding the upper and lower half-words of each each memory address.  The second test shall construct and write the ones complement of the half-word values used in the first test.,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
"  The DPU-DPA shall command DPU-TMALI to reorder EVENT data bits as a function of the Detector Electronics Output Format (Science Mode 3, Full-Frame High Res), and the commanded DPU science or engineering mode.  ","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs.  The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount of time has passed during which no additional events have been received.  A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed.  The data timeout interrupt allows the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer.  The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",0
 The DPU-SCUI shall communicate with the SCU according to the protocol defined in document 1143-EI-S19121.,"Event ProcessingIf the Mode command is Instrument Y Mode, the detector events are spatially filtered to the Instrument Y window specified in the Mode command then the corresponding pixel in the Ping or Pong buffer is incremented.  If specified in the Mode command, pixels will be binned at AxA or BxB.  Also, if specified in the Mode command, a tracking frame data product will be produced for every Ping/Pong tracking frame. Instrument Y and Event Mode may be commanded simultaneously in the Mode command. If the ICU sends an XRT Position command, the Instrument Y mode and Event Mode windows will be resized to match the new window sizes in the command.",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,"Public FunctionsThis function gets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when stating the tmaliTask.  The returned value is the current active value, this may differ from the last commanded value as the commanded value only takes effect when data is transferred from the hardware Ping-Pong buffer to the TMALI queue (in response to a frame or timeout interrupt, see section 5.13.2.3).",0
  The DPU-CCM shall strobe the Watchdog timer  by writing to the SCM_WDR at an interval of 1 second.,"Development PlatformThe DPU FSW will be implemented in the ANSI C programming language, with some PowerPC assembly used in the Bootstrap and to implement the VME data transfer in the DCI Driver.  The host (development) platform and operating system is Sun/Solaris from Sun Microsystems, Inc.  The target platform is the RAD6000 processor which has a POWER (PowerPC-like) architecture, and executes the VxWorks 5.3.1 real-time operating system.  The cross compiler and debugger is MULTI/C/C++ 1.8.9 from Green Hills Software, Inc.",0
"  When commanded to event mode by the ICU,  the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
  The DPU-BOOT CSC shall provide the capability to automatically load a configuration of DPU-RTOS from EEPROM to DRAM and start its execution.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process. ,0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,Shall verify that the Spacecraft_indicator contained in the Level1A_Parameters is consistent with the Spacecraft_indicator found in the Level 0 file header.  ,0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsThis task initializes the TMALI CSC and then continues to read data from the DCI and store it in the TMALI buffer each time the DCI driver signals that data is available in the Ping-Pong buffer.  The availability of data in the DCI Ping-Pong buffer is signaled to the tmaliTask using a semaphore.  Unless a fatal error is detected during initialization this task will never terminate.The specified 3 parameters specify the size of the TMALI queue and the initial parameters for the DCI, if the specified values are outside the allowed range default values will be used.The specified QueueSize is the allocated buffersize (in 4 byte EVENTS), the ring buffer is full when QueueSize-1 EVENTS are stored in the buffer.",0
  The DPU-EDAC shall record the number of MBEs that have been detected in DRAM since boot and the address of the last two MBEs.,"Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task.  The SCUI CSC has a High Priority Queue and a Low Priority Queue.  The two queues are implemented in an identical manner with the exception that the scuiTask() gives processing preference to the High Priority Queue.  The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
"  The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in the SYSTEM_BLOCK.  The system memory table does not include the Interrupt Vector Table (IVT), nor the text and data segment.","Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC.  The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition.  This minimizes the chance of changing the setting while the hardware is close to detecting a frame event.  Changing the frame depth while the DCI CSC is processing data could cause unpredictable results.  When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",0
" The DPU-ICUI shall install an ISR to be invoked on the SSI receiver interblock gap interrupt, for the receiving and processing of commands from the ICU.","Channel Boundary (CB) Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time.  The pseudo Instrument Y is transmitted to the ground.  Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground.  Channel boundaries are sent by the ICU to the BPE and used in the detector event centroiding process.",0
  The DPU-BOOT CSC shall log detected BIT failures to the SYSTEM_BLOCK.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM command dispatcher to alter the configuration of the clock interface.",0
 The DPU-TMALI shall allocate a ring buffer of size specified by TMALI_BUFFER_SIZE provided during initialization for storing incoming frames of data.  The default buffer size shall be 15 MB.,"Error RecoveryExcept for the modification described in Sections 5.2.3.6, no further modifications to the existing task error-handling mechanisms are required. VxWorks? uses a global mechanism for returning status codes when errors occur.  This is accomplished  by using the task variable, errno (stored in the task control block).  Most VxWorks? functions return a STATUS value.  This value can either be OK or ERROR.  If a function returns ERROR, then the errno variable must indicate a specific error code.",0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit of software within the MODIS SDP S/W, including processes, scripts, and utility libraries.  Each CSCI within the MODIS SDP S/W systemshall employ the Earth Science Data and Information System (ESDIS)-supplied SDPTK mandatory functions to access the DAAC production environment and services.","Bootstrap MonitorThe Bootstrap Monitor checks entered commands for syntax and number of arguments, and displays an error message to the RS-232 interface if an invalid command or argument is entered.  A complete listing of these messages is given in document 7384-BSPS-01.",0
" The DPU-SCUI shall be capable of preparing one STPDU for delivery to the SCU every M milliseconds, or shall indicate a No Data condition to the SCU by maintaining an un-incremented ST_PDU Transfer Request Counter field."," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Public FunctionsThis routine provides a means to set the data timeout used by the DCI, the value requested indicates the timeout in milliseconds.  The initial value for the frame depth setting is determined by the parameter provided when starting the tmaliTask.  The maximum value to which the timeout can be commanded is X seconds, an attempt to set the timeout to a number larger than this maximum will result in setting the timeout to the default value of X milliseconds",0
"  The DPU-CCM shall check the length of a received DPU_CMD against an expected value from a lookup table indexed by FUNCTION code.  If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.",Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware.  The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers.   The driver features a standard I/O interface which utilizes an extended ioctl() command set to support unique SSI hardware attributes.  This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the newer Tornado driver architecture. ,0
  The DPU-BOOT CSC shall provide a monitor which accepts commands over the RS-232 interface.,"Sending Messages to the ICUSome special processing and checking is required in this function to handle the transmission of the ACK/NAK message.  When a command arrives from the ICU, the icuiCmdReceiveISR() will verify the message checksum and then send an ACK/NAK message to the ICU.  It is possible that an application is in the midst of sending a message to the ICU at the time a command interrupt occurs.  However, since it is not possible for an ISR to take a semaphore, an additional mechanism is required in order to provide mutual exclusion between a task an the ISR.  To accommodate this problem, the icuiEnq() function first determines whether it is being invoked from interrupt context.  If so, it then tests the value of a static variable, icuiEnqBusy.  If the variable is set, the function will save the given ACK/NAK message parameters in static variables and return.  If the variable is not set, the function will continue as normal (avoiding the semTake() and semGive() calls).  In normal execution, the icuiEnqBusy variable is set on entry and negated on exit, after which the static variables containing the ACK/NAK message parameters will be checked to determine whether an ACK/NAK is pending.",0
 The DPU-TMALI  shall provide TMALI_HK to the DPU-CCM on request.,"Standard I/O InterfaceThe write primitive does not block.  The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver.  This primitive is valid only in TEST mode.  The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode.  In TEST mode, the driver returns the number of bytes written.",0
  The DPU-BIT shall perform two write/read/compare tests on the RAM for the DCI Data Buffers.  The first test shall write the address of each location to that location.  The second test shall write the ones complement of the values used in the first test.,"InitializationThe ICUI CSC is initialized by calling icuiInit().  The icuiInit() function opens the SSI interface port to the ICU, installs the transmit and receive ISRs, and enables Transmit Message Mode in the SSI Driver CSC.  The icuiInit() function is called by the CCM Control Task at bootup.",0
Each MODIS standard data product shall be produced within the data volume and processing load allocation shown in Table B-1.,Install Exception HandlersThis routine is a default interrupt handler and is installed into element six (6) of the system interrupt table.,0
  The DPU-ADC shall write to the SCM registers in B-bit words only.,"Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the SCU Interface Data Processor Task.  This task initializes the SCUI CSC and then enters an infinite loop to process telemetry and produce STPDUs.  Once initialized, the task is awakened by a semaphore given when the SCU writes the telemetry done subaddress.",0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from one another.  The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt.  Upon initialization, the ICUI CSC installs a hook routine into the SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling ccmCmdEnq().  ",0
  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,"Public FunctionsThis routine is used to format messages for transmission to the ICU and to place those messages on the SSI Driver Transmitter Queue. The functionCode parameter is used to create the CCSDS Packet APID and the Message Identifier (refer to document DPUICD-01).  A mutual exclusion semaphore, icuiSemWrite, protects the SSI Driver from being written by multiple tasks simultaneously.  The timeout parameter lets the caller control how long it is willing to block on this semaphore if there is an access conflict.This routine may be called at interrupt context to transmit an ACK/NAK message.  In that case, the semaphore is not taken since it is not valid to take a semaphore at interrupt context.  Refer to discussion of the design to accommodate the ACK/NAK message.",0
  The DPU-BOOT CSC shall display a message via RS-232 on detection of a BIT failure.,"Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs.  When the CCM CSC spawns the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization.  Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 shared memory.",0
All searchable product-specific metadata in MODIS standard products shall be formatted as specified in DID 311.,"Public FunctionsInitializes the TIS CSC by initializing the hardware register convenience pointers and selecting the commanded 1PPS signal, and enables or disables automatic time synchronization with the S/C according to the passed parameter. THIS FUNCTION ALTERS THE VALUE OF THE DCI CSR AND SHOULD NOT BE INVOKED WHEN DCI INTERRUPTS ARE ACTIVE.",0
  The DPU-DPA will obtain the initial tracking frame time from the ICU.,Public FunctionsThis routine is spawned by the Command and Control Task to initialize and execute the DPA Event Processing Task.,0
"Each software process shall be able to process input data sets with the following nominal attributes: Time transitions, including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or startof data collection not on a granule boundary.  Terminator crossing , International Date Line crossing, and/or Earth pole within a granule.  Day, Night, or mixed  mode data.","Public FunctionsThis routine provides a means to set the bit arrangement used by the DCI.  When bSpecialArrangement is TRUE, the DCI is set to special bit arrangement mode, otherwise the default mode of no rearrangement is set.",0
" The channel boundary engineering mode shall create an array of look-up table (LUT) channel boundaries, PROD_CHAN_BOUND, from a flat field, and PROD_MN_DATA, using the algorithm described in Appendix C.",Control and MonitoringThe DPU produces eight types of housekeeping packets.,0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",Generic VME Driver CSCThe Generic VME (GVME) Driver CSC is a Level 1 reuse component from the INSTRUMENT Y project.  The GVME Driver provides a set of convenience routines which are useful when accessing registers and memory in the VME memory space.,0
 The DPU-SCUI  shall be capable of packing created CCSDS Source Packets into STPDUs using segmented (grouped) packets for transfer to the SCU as defined by CCSDS-102.0-B-4 and in accordance with interface control document 1143-EI-S19121.,Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
  The DPU-SSI shall read from the SSI registers in 16-bit words only.,Data Capture Interface Driver CSCThe Data Capture Interface (DCI) Driver CSC is a new driver which provides a standard VxWorks driver interface to the DCI hardware.  The driver features two modes: a test mode and a normal mode.,0
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.  ,0
  The DPU-CCM shall quietly discard any unrecognized observatory messages (I.e. messages which do not have a DPU command APID).,"InitializationThe SCUI CSC is initialized when the scuiTask() is spawned by the CCM CSC.  Initialization parameters which are passed into the scuiTask() include:* Poll Rate  rate at which the S/C will poll the DPU for telemetry.  The rate is specified in Hz, and has a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate  value used to rate buffer data to the S/C.  The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte).  This default value effectively disables rate buffering.* Size of Low Priority Queue  size in bytes of the low priority telemetry queue.  If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.Size of High Priority Queue  size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at  the amount of memory contained in the largest free memory block.",0
" The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall record new data to those subaddresses, and report an error to the DPU-CCM.  The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.",Shall generate data_input_status_messages and set scan_quality_flags if corrupted data values are detected.  ,0
 The DPU-TMALI shall install a callback routine to respond to the DCI Error Interrupt.,"Public FunctionsThis routine gets housekeeping data stored for the TMALI CSC including some DCI parameters and resets the tmali internal counters to zero.  When the caller supplied pointer to a TMALI_HK structure is NIL no data is returned but the tmali internal counters are still reset to zero.Two of the four error counters are updated within an ISR context, this requires a task switch safe implementation of these counters.  Within VxWorks this could be solved using a counting semaphore.  In the TMALI CSC design a faster method was used by using a free running error counter and a careful update of the reported number of errors, using an extra temporary variable.  As the increment and assignment of the 32 bit unsigned integers themselves are atomic operations the resulting counters are task safe and no error events are lost.  This means that the sum of the errors reported by the tmaliHkGet() function is equal to the total numbers of errors that occurred, no error reports are lost due to the update of the internal structures.",0
Each software process shall trap and properly process all exceptions that may produce an abnormal terminationand report all such events using the SDPTK error message functions.,Hardware InterfacesThe SSI Driver CSC accesses each of the registers on the Company X Communications module using D16 VME access.,0
  The DPU-TMALI shall provide a function which sets the current event bit ordering mode in the DCI driver.,"Time Interface ConfigurationThe DPU hardware provides two configuration options to the software:* selection of the active A PPS signal, and* the option to manually jam a value into the clock registers without the A PPS signal.",0
  The DPU-DCI shall provide an application program with the ability to read and write the hardware ping-pong buffers when in Test Mode.,InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask().  After the tasks are spawned they create the needed memory buffers.  The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU.  The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer.  The default setting for compression (on or off) is retrieved from EEPROM.,0
"  The Intensifier Characteristics Engineering mode shall produce a pulse-height histogram, PROD_INTENSE_CHAR.","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
"  The DPU-DPA shall collect event mode data, preserving the time and spatial resolution in the specified event window.",SCU Interface CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU according to a commandable parameter.  The rate at which the SCU polls the DPU is also commandable.  The CSC installs an ISR to collect telecommands from the SCU via the MILSTD1553B Interface.,0
"  The DPU-BOOT CSC shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test, and a register test.","Public FunctionsThe routine formats the given data into a CCSDS Telecommand Packet and writes it to the 1553 bus shared memory for transmission to the SCU.  If a message is already pending in the 1553 shared memory, the pending messages will be replaced in 1553 shared memory with the new message, and an error will be reported.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X Communication Module.  The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only.  The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to execute the intervening instructions regardless of the CPU speed setting (DRAM test logic).",0
  The DPU-SSI shall provide the capability for an application program to enable/disable the VME Slave Interrupt on the SCM for the SSI Interface.," Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software.  The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it.  In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",0
  The DPU-DCI shall write to the DCI Registers in C-bit words only,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created.  Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno.  The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno.  If errno is set after the error queues are created, it is queued to the Error Queue by calling ccmErrEnq(). ",0
"  The Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() and tmaliNextEvent().  The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode Complete message to the ICU.  After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",0
 The DPU compression software shall report errors to the DPU-CCM for inclusion in the DPU Housekeeping information.,"Memory Upload and Download HandlingData can be upload to several types of locations, including* DRAM* EEPROM* hardware registers, and* EEPROM filesystem.ial D_MEM_DAT_UPLD command specify the target location.  If the destination is the EEPROM filesystem, a block number is provided in lieu of a memory address , which is used by the DPU FSW to formulate a filename of the form eefs1:DPU_blk.##, where ## is the block number.  In this case, once the entirety of the uploaded data is received by the DPU FSW, the uploaded data is then written to that file in the EEPROM filesystem.  If a file already exists with that name, it is overwritten.  The EEPROM filesystem can be reinitialized using the command D_MEM_DISK_INIT.",0
" There shall be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.","Checksum Library This function performs a checksum on a specified memory range.  The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
"  The Bootstrap CSC shall address hardware modules as defined in document 1400, Company X Specification for the Company X Communication/Memory Module.",Checksum LibraryThis function performs a checksum on a specified memory range.  The checksum is performed as a 32-bit additive checksum.,0
  The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF.  This mode shall divide a full frame image into a certain regions.  Each region shall be processed to form an 8x8 confirmation image.  The certain confirmation images shall be sent to the solid state recorder as one data product.,"External Program InterfacesPerforms the SCM EDAC test, PROM checksum test, and device loopback tests for those devices which support it.",0
" The DPU-SCUI  shall provide the capability to handle high priority data.  High priority data shall be processed before low priority data.  In the condition  that low priority data is being processed when new high priority data arrives, DPU-SCUI shall finish processing the low priority data and then  immediately shift all resources to processing the high priority data.","Memory Upload and Download HandlingIf more than 65535 bytes need to be uploaded, the upload file must be broken up into multiple smaller files, each less than or equal to 65535 bytes, and then each of the virtual uploads should be sent in series.  Because of the sequence numbers, the DPU FSW can receive individual upload commands out of sequence.  There is no time limit for the accomplishment of a single virtual upload, and so a long upload can continue across ground contacts.  If an upload is in progress, the last sequence number can be sent to the DPU FSW and it will report the list of missing sequence numbers via event number S_ccm_MISSING_SEQNO.  If an upload is in progress and needs to be cancelled, it can be discarded by issuing the D_MEM_DAT_CNCL command.",0
  The DPU-BOOT CSC shall attempt to complete its normal execution sequence following detection of any failure.,"Control and Monitoringthe CCM Control Task initializes the DPU FSW. It is the responsibility of the CCM Control Task to establish a successful boot.  It does so by blocking on temporary semaphores, each with a 5 second timeout, after spawning the SCU Interface Task and the CCM Command Task.  If both of these tasks report a successful initialization by giving the semaphore, the CCM Control Task toggles the BC_INDEX parameter in EEPROM to indicate a successful boot.  If either task does not report a successful initialization, the CCM Control Task disables the watchdog strobe to effect a reboot of the DPU.  The rationale for selecting the successful initialization of these two tasks as the definition of a successful boot is that the DPU FSW requires these tasks, as a minimum, to establish ground contact and provide commandability.Once this initialization is complete, the task blocks on a binary semaphore which is given by the SCUI Command ISR upon arrival of the 1 Hz Clock Message.  In the event a Clock Message does not arrive, the semaphore will time out after 1.5 seconds.  The CCM Control Task remains alive to create and transmit DPU housekeeping at the appropriate intervals, perform various periodic processing tasks, and to process memory dump commands.The final call to ccmErrEnq() is performed in order that if an error occurs in an interrupt service routine, a global variable is set to the value of the errno which is then enqueued into the Error/Event Queue as part of this tasks normal processing.",0
  The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.  ,0
The DPU-DCI must provide an application program with the capability to command the DCI hardware to rearrange the bit sequence of the original detector electronic output format of each event as it is received.,Setting the DCI Bit Arrangement The bit arrangement of the DCI control/status register can be set via tmaliBitArrangementSet().,1
The DPU-RTOS must install a hook routine that is invoked in the event of a system exception and will attempt to save the interrupt vector to the LAST_BOOT_IVEC location in the EEPROM before rebooting.,Install Exception HandlersThis routine installs a hook routine for the power failure interrupt. The hook routine will be called from the interrupt context. This function always returns OK.,1
"The DPU-CCM must discreetly discard all unrecognized observation messages (i.e., messages that do not have a DPU command APID).","Data ProcessingWhen the DCX CSC compresses a data packet, the given APID is incremented by one. If the compressed copy of the data is larger than the original dataset, the original dataset will be passed to the SCUI CSC, an S_dcx_UNC_USED event is queued in ccmErrEnq() and the APID is not incremented. This way, ground systems can distinguish compressed packets from uncompressed packets.",1
The DPU-DPA must provide a task heartbeat to the DPU-CCM.,"CSC Data Processing AlgorithmThe DPA CSC includes the following components:* Instrument Y processor task creates histogrammed Y instruments, performs tracking (choose guide stars, drift correction, offset and addition ), creates the reference, accumulation, and data product buffers, and provides a task heartbeat to the CCM task.",1
The DPU-TMALI must configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization. The default should be M frames and should be able to be changed dynamically.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC. The frame depth determines the number of frames that are read into the selected Ping-Pong buffer before interrupting. The initial value of the frame depth parameter is determined by the parameter provided when tmaliTask starts. The maximum value to which the frame depth can be controlled is 64 frames; an attempt to control the frame depth to a value greater than this maximum will result in the timeout being set to the default value of V frames. Current frame depth setting may be delayed a small amount of time if there is activity on the DCI bus, and is usually changed when the DCI has just reported a frame level reached or timeout condition . This minimizes the risk of changing the parameter while the hardware is about to detect a frame event. Changing the frame depth while the DCI CSC is processing data can cause unpredictable results. When a new tmaliDciFrameDepthSet command is sent before the previous setting has been enabled, the new request will overwrite the previous request and the DCI will be ordered to the new value at the first available opportunity.",1
The DPU-RTOS must provide a function for an application program to read from the real-time clock registers on the RAD6000SC CPU module.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function that can be used by others applications to retrieve current clock values ​​from the DPU and UT Delta and provide functions to be used by the CCM command dispatcher to modify the clock interface configuration.",1
The DPU-CCM must provide the capability to send back to the spacecraft each command received from the spacecraft or the ICU.,"Time Synchronization The interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a clock message to each instrument at a frequency of 1 Hz. The clock message contains two values: a value representing the current time of the spacecraft and a value representing the delta between the spacecraft time and universal time (UT), based on an epoch to be determined.",1
"The DPU-CCM must generate tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI and DPU-TMALI at startup.","InitializationThe DPA CSC is initialized by generating the dpaEventTask() and dpaInstrument YTask() tasks. Once the tasks are generated, they create the necessary memory buffers. The dpaEventTask() then enters the idle state while waiting for a Mode command from the ICU. The YTask dpaInstrument also enters the idle state while waiting to process the Ping or Pong buffer. The default setting for compression (on or off) is retrieved from the EEPROM.",1
The DPU-BIT must test Error Detection and Correction (EDAC) on Company X&#39;s communications/memory module by reading the pre-programmed error locations in the PROM.,"DRAM BITPart of the memory is tested in boot sequence 1 and part of the memory is tested during boot sequence 2. During boot sequence 1, ? The KB of DRAM is tested before the Bootstrap is copied to this area. During boot sequence 2, the remaining memory is tested in ? KB blocks. The DRAM BIT first writes the address of each word of a block into that word of the block. Then the test clears the cache and rereads the entire block. If a single-bit error occurs during replay, the location is reread. If another single-bit error occurs, the test assumes a hardware error and marks the entire block as bad. If a multi-bit error occurs, the entire block is marked as bad. If the value read back does not match the address, the entire block is marked as bad. This same process is repeated with the 1&#39;s complements of the address. The Bootstrap stores the results of the DRAM BIT in the EEPROM as a series of x consecutive words of y bits. Each bit of a result word represents the test result of a ? KB block of DRAM. These bits are mapped onto the DRAM proceeding from the least significant bit (LSb) to the most significant bit (MSb) as the addresses of the memory blocks increase. A set bit indicates that a block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",1
The DPU-BOOT CSC must disable the write protection of the EEPROM on the SCM.,"Integrated Test CSCThe Integrated Test CSC (BIT) is a Tier 2 reuse component of the SSFF and INSTRUMENT Y projects. The detailed design of the BIT CSC follows. The integrated test CSC, identified DPU-BIT, performs the integrated tests (BIT) of stage 2. The stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on the SCM PROM, a MIL-STD-1553B internal BIT and a memory test of DCI data buffers. The BIT results are saved in the SYS_CNFG_AREA in the EEPROM and are also retained in the DRAM. If an error occurs in any of the functions executing the BIT, the test result will be reported as a failure in the test itself.",1
The DPU-CCM must trigger the Watchdog timer by writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThis feature activates the system watchdog to prevent a watchdog reset.,1
The DPU-CCM must use the default startup values ​​stored in SYSTEM_CONFIG_AREA in the EEPROM when initializing the FSW.,"Command and Control CSCThe Command and Control (CCM) CSC is a level 2 reuse component of the INSTRUMENT Y project. The Command and Control CSC includes the following components:* A control task, ccmCtrlTask(), which initializes the DPU FSW and generates other tasks at startup, schedules the production of DPU management data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as heartbeat message and strobe monitoring ; and* A command dispatch task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or ICU. The main data structures include:* A static data table that tracks operational status. Data included in this table includes maintenance production rates, CCM-specific metrics, and number of orders filled.* An order queue into which orders are placed when they arrive, via an interrupt, from the ICU or SCU.* An error/event queue that accumulates error and event codes reported by the FSW DPU. These error and event codes are removed from the queue and placed in a telemetry packet at a given interval and included in the DPU management data. DPUSDS5.12.1.1.1 Flight Software Initialization The command and control CSC is initialized by generating the CCM control task, ccmCtrlTask(), from the operating system startup task, usrRoot(). Once the task is generated, it calls a function, ccmInit(), which creates the error/event queue, instantiates the necessary semaphores, and installs various ISRs. Finally, it generates the remaining tasks that make up the DPU FSW. When the CCM control task starts, it reads the DPU configuration startup defaults from SYSTEM_CONFIG_AREA in the EEPROM. If the SYSTEM_CONFIG_AREA checksum is incorrect, the hardcoded defaults are used. The CCM control task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn(). When the CCM control task initializes a CSC, it passes the startup defaults read from the EEPROM as parameters to the task&#39;s initialization function. In addition to its task initialization activities, ccmInit() also initializes the command length check table by calling ccmCmdLengthInit(). The order processor uses the created table to check the expected order lengths for newly received orders.",1
The DPU-TIS must allow application programs to access the current UT_DELTA.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function that can be used by others applications to retrieve current clock values ​​from the DPU and UT Delta and provide functions to be used by the CCM command dispatcher to modify the clock interface configuration.",1
The DPU-BOOT CSC should display a message via RS-232 when detecting a BIT failure.,"Integrated Test CSCThe Integrated Test CSC (BIT) is a Tier 2 reuse component of the SSFF and INSTRUMENT Y projects. The detailed design of the BIT CSC follows. The integrated test CSC, identified DPU-BIT, performs the integrated tests (BIT) of stage 2. The stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on the SCM PROM, a MIL-STD-1553B internal BIT and a memory test of DCI data buffers. The BIT results are saved in the SYS_CNFG_AREA in the EEPROM and are also retained in the DRAM. If an error occurs in any of the functions executing the BIT, the test result will be reported as a failure in the test itself.",1
The DPU-TMALI must configure the DCI interface data timeout on startup as specified by TMALI_TIMEOUT provided during initialization. The default value should be N milliseconds and should be dynamically changeable.,"Public Functions This routine provides a way to obtain the current data timeout value used by the DCI. The returned value is the current timeout in milliseconds. The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",1
"Image mode must have the capability to produce a parameterized results table, PROD_FINDING_CHART, of the image if commanded, using the algorithm described in Appendix C. The parameterized results table must consist of the brightest sources. Each source must be configured by its position [X,Y] and its intensity/brightness.",Event Processing The event processor task is also responsible for creating the results table. The search graph creation algorithm will use the guide star selection algorithm to find the brightest stars in the search graph of instrument Y. The parameterized search graph will be created by listing the location of the X and Y detector of each star as well as a matrix of CxC pixels around the instrument. star location of intensities. The event processor task will create the necessary housekeeping for the DPA.,1
The DPU-ICUI must provide an API for other CSCs to transmit messages to the ICU.,"CSC Instrument Control Unit InterfaceThe CSC Instrument Control Unit Interface (ICUI) is a new component that supports application-level communication with the INSTRUMENT X ICU. The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to achieve these goals, ICUI provides: * An ICU interface message sending function, icuiEnq(), which provides an API through which other CSCs can send messages to the ICU. * A message reader ICU ISR interface commands, icuiCmdReceiveISR(), which receives remotes from the ICU and forwards them to the command and control task for processing.* An ICU interface maintenance function, icuiHkGet(), which gathers maintenance data from the ICU interface on demand from the command and control task.",1
The DPU-CCM must trigger the Watchdog timer by writing to the SCM_WDR at an interval of 1 second.,Monitoring LibraryThe DPU contains a hardware watchdog that must be monitored periodically in order to prevent a reboot of the DPU.,1
"The DPU-DCI must allow an application program to set a timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will exchange ping-pong buffers and will interrupt the software.","Setting Data Timeout in DCIDDuring nominal operation, frames arrive approximately every 11 ms. The DCI hardware will generate an interrupt if event data has been received in one of the Ping-Pong buffers and a configurable amount of time has passed where no additional events have been received. A data timeout interruption is not an error, but rather indicates that the current exposure has ended. The data timeout interrupt allows the TMALI CSC to recover DCI Ping-Pong buffer end events. The tmaliDciTimeoutSet() function provides an API to the DCI driver to allow the timeout setting to be changed.",1
"There should be four engineering modes associated with the detector: raw event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering Mode The purpose of the Intensifier Characteristics Engineering mode is to evaluate the condition and performance of the detector. Detector events produced in high-resolution full-frame detector format are collected and histogrammed for a controlled integration time to produce a pulse height histogram.,1
The DPU-BOOT CSC must put the processor in diagnostic mode.,"Standard I/O interfaceThe write primitive does not block. The written buffer is written directly to the active part of the ping-pong buffer by the driver. This primitive is only valid in TEST mode. The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode. In TEST mode, the driver returns the number of bytes written.",1
The DPU-SCUI must receive control messages in the form of remote control packets from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU Interface (SCUI) CSC is a level 3 reuse component of the INSTRUMENT Y project. The SCUI CSC is primarily responsible for implementing the application protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manages the interface between the DPU and the SCU.,1
"The DPU-ICUI must check the length of a received DPU_CMD against the length of the message determined by the inter-block interval. If the received value does not match, the command will be rejected, an error will be queued in the DPU-CCM and an NAK message will be transmitted to the ICU within 1 second.","Receiving Commands from the ICUThe interface to the ICU is via a synchronous serial interface bus (SSI), which uses inter-block space (IBG) to delimit complete messages from each other. The DPU hardware produces an interrupt when it detects an IBG interrupt, and the SSI driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt. During initialization, the ICUI CSC installs a hook routine in the SSI driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits an ACK/NAK message to the ICU, and then sets the queued command for further processing by calling ccmCmdEnq( ).",1
"The DPU-BOOT CSC Boot Monitor shall provide the capability to read from Dynamic Random Access Memory (DRAM), VME Bus, and Input/Output Channel Controller (IOCC) on command.",Integrated TestingThere are two stages of integrated testing (BIT) for the DPU. The Step 1 BIT is included in the Bootstrap program and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. BIT Stage 2 is run after the operating system boots and is not part of the Bootstrap program.,1
The DPU-TMALI must place the start address of the event ring buffer in TMALI_HK.,"Public functionsThis routine initializes the interface with the ICU. This routine opens the SSI driver port, installs the SSI interface interrupt callbacks, and enables message passing mode in the SSI driver.",1
The DPU-BOOT CSC boot monitor shall provide the capability to load a DPU-RTOS configuration from EEPROM to DRAM and start its execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with the EEPROM on the Company X communications module. The DPU-BOOTSTRAP accesses the EEPROM only in the form of bit words?. Specific timing requirements of the EEPROM are met in one of three ways: * timing requirements are met by inserting specific (typical) wait loops, * timing requirements are met by using of the EEPROM driver (DOWNLOAD command), and the timing requirements are implicitly satisfied by the time that will be required to execute intermediate instructions regardless of the processor speed setting (DRAM test logic).",1
"The DPU-SCUI must be capable of preparing an STPDU for delivery to the SCU every M milliseconds, or must indicate a no-data condition to the SCU by maintaining a non-incrementing ST_PDU transfer request counter field.","Telemetry Output to Spacecraft 1553 Bus The SCUI CSC reads data packets in the queues and transforms them into CCSDS version 1 source packets. These source packets are then packaged into the STPDU for transmission to the SCU. This processing is carried out by scuiConvertToSTPDU(). The STPDU, prefixed by a transfer request counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in Company X&#39;s ICD 1553) by the scuiWrite() function.",1
"The DPU-TMALI must use SCM_DCI_SR, as well as ERRNO provided by DPU-DCI to decode errors and place them in an error queue for DPU-CCM.","Error Collection and ReportingThe DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), which other FSW tasks use to report errors. Every time it wakes up, ccmTask() checks if it&#39;s time to form an error/event packet to transmit to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to the DPU-SCUI for ground transmission.",1
"When controlled in event mode by the ICU, the DPU-DPA must be capable of collecting time-stamped photonic events and producing a PROD_EVENT.","Event Processing The event processor task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message, and then receives detector events by calling the tmaliWait functions () and tmaliNextEvent(). The Event Processor task will collect detector events for the period specified in the Mode command and then send a Mode Complete message to the ICU. After issuing the Mode Complete message, the event processor task will enter the idle state.",1
The DPU-BOOT CSC must include a DRAM BIT consisting of two write/read/compare tests. The first test should write the address of each memory location to that location. The second test should write the complement of each memory location to that location.,"Boot SequenceThe FSW DPU is started using the boot software residing in the PROM. The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to DRAM and executes it. In flight, there are two methods that can trigger the DPU FSW to start:* power-up (cold start) or* watchdog reset (warm start, command restart).",1
"Each software process must be capable of processing input data sets with the following nominal attributes: temporal transitions, including the crossing of the Greenwich meridian, leap year, start of year, start of millennium and/or start of collecting data outside of a granule boundary. Terminator crossing, crossing of the international date line and/or Earth pole in a granule. Data day, night or mixed mode.","process input data sets with the following nominal attributes: * Temporal transitions, including the crossing of the Greenwich meridian, leap year, start of year, start of millennium and/or start of collecting data outside of a granule boundary. * Terminator crossing, international date line crossing and/or Earth pole in a granule. Data day, night or mixed mode.",1
The DPU-CCM must provide the capability to send back to the spacecraft each command received from the spacecraft or the ICU.,Command ManagementThe DPU accepts commands through two interfaces from the spacecraft via the MIL-STD-1553 interface and from the ICU via the SSI interface. Any of the DPU commands can be sent from the SCU or ICU. The source of a DPU command is one of the following:* The ICU command is generated and sent by the ICU via the SSI.* The SCU command is generated and sent by the SCU via the 1553.* The G command -ICU is generated on the ground and sent to the DPU via the ICU/SSI.* The G-SCU command is generated on the ground and sent to the DPU via the SCU/1553.,1
The DPU-BOOT CSC should complete the 1 BIT stage and load DPU-RTOS in less than 1 second after a hard reset if CTS is not enabled.,"Startup Sequence In flight, a power cycle can only be performed by the SCU. A watchdog reset may be induced by the FSW DPU due to a detected and unrecoverable error, or it may occur as a byproduct of the FSW entering a state in which it fails to trigger the watchdog timer. On startup, the bootstrap tests and clears the DRAM, then proceeds to load the DPU FSW from the EEPROM and executes it. The DPU FSW then loads the configuration information from the EEPROM (which establishes various operational defaults) and generates the various DPU FSW tasks.",1
"The DPU-CCM must collect a TASK_HBEAT from DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI and DPU-DPA. Non-responsive tasks will be reported in DPU_HK.","Event Processing The event processor task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message, and then receives detector events by calling the tmaliWait functions () and tmaliNextEvent(). The Event Processor task will collect detector events for the period specified in the Mode command and then send a Mode Complete message to the ICU. After issuing the Mode Complete message, the event processor task will enter the idle state.",1
"The DPU-CCM must be able to count one reported error consecutively. When the number of particular error IDs exceeds 250 for a particular reporting period, the error code will be replaced with a sequence of error codes that will include the original error code and the number of times the error has been reported.","Error Collection and Reporting The ccmErrEnq() function tracks the last error reported and how often it occurred. Once an error code has been reported, it becomes the error code previously reported and handled by ccmErrEnq(). A repeat count is then incremented for each subsequent identical, consecutively reported instance of that previously reported error. If this error code is reported more than once during a high-throughput maintenance reporting period, then a special error, S_ccm_ERR_REPEAT, is queued with the number of times the error is repeated encoded in the least significant byte. This mechanism effectively reduces the risk of maintenance telemetry being flooded by a single repeated error.",1
The DPU-SCUI must timestamp the secondary header of source packets with the current SC_TIME retrieved from the DPU-TIS module.,"Time Synchronization The interface with the spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will provide a clock message to each instrument at a frequency of 1 Hz. The clock message contains two values: a value representing the current time of the spacecraft and a value representing the delta between the spacecraft time and universal time (UT), based on an epoch to be determined.",1
"The CSC DPU-BOOT boot monitor must follow the protocol specified in BSPS-01, Boot Monitor Protocol Specification, with the following noted exceptions.",Bootstrap MonitorThe Bootstrap Monitor checks the syntax and number of arguments of entered commands and displays an error message on the RS-232 interface if an invalid command or argument is entered. A complete list of these messages is given in document 7384-BSPS-01.,1
The DPU-CCM should log an error at the LAST_BOOT_IVEC location in the EEPROM and stop triggering the watchdog timer if an unrecoverable software error occurs. An unrecoverable software error is defined as an error that results in a loss of controllability or ground communication.,"Control and Monitoring Each time the CCM control runs, it calls ccmPerProcess() to manage periodic processing responsibilities. These responsibilities include analog-to-digital conversion updates, monitoring DPU tasks, producing ICU heartbeat messages, and monitoring strobe. The ccmHealthChk() function, called by ccmPerProcess(), checks the execution of other tasks by monitoring the time since each task was last reported. Other tasks report their execution to the CCM control task by calling the ccmTaskReport() function, providing their task index. Each task has an expected execution frequency, and if a task does not execute as expected, an error is reported in the internal management of the DPU. If the Command Dispatch task fails to report for an extended period of time, the DPU will perform a restart, as it is impossible to command the DPU if this task fails to run, otherwise it will trigger the watchdog.",1
The DPU-BOOT CSC should test and clear the DRAM at power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,Public FunctionsThis routine allows the CCM task to send the ICU Position XRT command to the DPA software. The XRT Position command should be used to command the DPU to update the position and window parameters that it uses to spatially filter event data.,0
The DPU-BOOT CSC must initialize error detection and correction (EDAC) on the RSC by clearing the DRAM.,"Telemetry Output to the Spacecraft 1553 Bus The SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads the STPDU contained in the fifteen telemetry subaddresses and then writes to the performed telemetry subaddress. When the telemetry subaddress performed is written, the scuiTlmDoneISR() is called, which gives a semaphore to wake up the scuiTask(). The software provides fault tolerance by automatically waking up after approximately two polling periods. This timeout is automatically adjusted each time the SCU poll rate value is changed by command.",0
"The DPU-SCUI shall cancel writing to each subaddress if the SCU fails to read a pending STPDU after a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, must record new data in these subaddresses and report an error to the DPU-CCM. The SCU_POLL RATE parameter must have a default value of J ms and must be able to be modified dynamically.",Should generate data_input_status_messages and set scan_quality_flags if corrupted data values ​​are detected.,0
The DPU-CCM must interpret and execute/send DPU_CMDs in real time.,"Error Collection and ReportingAt startup, no error queue exists because it has not yet been created. Errors that occur during this first step of error reporting are assigned directly to the errno global task variable. The reader can refer to the VxWorks Programmers Guide, section 2.3.7 for more information on the error number. If errno is set after the error queues are created, it is enqueued into the error queue by calling ccmErrEnq().",0
"The DPU-DPA must collect event mode data, preserving temporal and spatial resolution within the specified event window.",Should verify that the Spacecraft_indicator contained in Level1A_Parameters is consistent with the Spacecraft_indicator found in the level 0 file header.,0
The DPU-BOOT CSC should test and clear the DRAM at power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"Ring Buffer Data StructureThe CSC maintains a FIFO implemented as a ring buffer to temporarily store data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to track data in the buffer. The pointers have been defined such that reading from the buffer is the simplest operation and only one comparison is needed to check if the buffer is empty. The buffer only stores events so that pointers point to these four-byte entities. As the DCI specifies all data in bytes, the sizes must be converted before reading the data.",0
The DPU-DCI must write to the DCI memory only in B-bit words.,External Program Interfaces Reads BIT results from the location pointed to by pBitResults (which is assumed to be in the EEPROM) into the BIT results data structure in DRAM.,0
The DPU-BIT must test Error Detection and Correction (EDAC) on Company X&#39;s communications/memory module by reading the pre-programmed error locations in the PROM.,HousekeepingThe TMALI CSC collects housekeeping data which can be retrieved via a call to tmaliHkGet(). The TMALI CSC internal management is returned via the TMALI_HK data structure.,0
"On startup, the DPU-RTOS should run the BIT device RAM tests (cold boot only), install the device drivers, run the BIT driver loopback tests (cold boot only), then launch the flight software of the application.",Error Detection and Correction CSCThe Error Detection and Correction CSC (EDAC) is a Tier 1 reuse component of the SSFF and INSTRUMENT Y projects. The EDAC CSC consists of a set of service routines (ISR) and a garbage collection task. The design of the INSTRUMENT Y EDAC CSC is described in document CIDPSDS-01. The only design change was to add logic to check for excessive external EDAC (SCM) interrupts.,0
"The DPU-CCM must generate tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI and DPU-TMALI at startup.","Install project-specific module error identifiers In order to provide a mechanism by which error numbers can be unique across device drivers and applications, each error number must contain a unique module identifier in the word the most significant of the error number. These module identifiers are defined in a VxWorks header file.",0
The DPU-SSI must read SSI registers only in 16-bit words.,Integrated TestingThere are two stages of integrated testing (BIT) for the DPU. The Step 1 BIT is included in the Bootstrap program and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. BIT Stage 2 is run after the operating system boots and is not part of the Bootstrap program.,0
"Each software process must handle input data sets with the following error attributes: Corrupt data, as indicated by quality assurance (QA) indicators also located in the file.",Should write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process.,0
"The DPU-CCM must produce DPU_HK at a controllable frequency, with a default value of 10 seconds.",Should generate data_input_status_messages if errors are encountered while reading Level_1B_Data.,0
"The Bootstrap CSC must process hardware modules as defined in document 1400, Company X Specification for Company X Communication/Memory Module.","Message Passing Mode (FIOSSIBGTXMSGENABLE) and Inter-Block Gap InterruptsThe SSI CSC driver supports a message mode to facilitate application-level communication. This mode uses the hardware-generated Inter-Block Gap interrupt to synchronize message transmission. In messaging mode, the driver activates an internal byte counting queue that provides a synchronization mechanism for sending messages. This byte count queue is updated with the message size as Inter-Block Gap interrupts are received. The message passing mode uses the BGTX interrupt, the Tx FIFO empty interrupt, the write() call, and an internal byte count queue to synchronize the transmission of messages over SSI. In this mode, the maxBytes parameter passed to write() is enqueued into the Byte Count queue. When a period of time equal to or greater than the deadlock interval time has expired, the BGTX interrupt will be triggered. At that time, the driver will respond and initiate a new transfer by setting a byte transfer limit for that block and enabling the Tx FIFO empty interrupt. The byte transfer limit is the number of bytes entered in the queue. When all bytes in the current block have been sent up to the byte transfer limit, the Tx FIFO ISR deactivates and resets the byte transfer limit to zero. An application can use this mode by calling write() with a buffer pointer and maxBytes to transfer a message of a particular length.",0
The DPU-BOOT CSC boot monitor shall provide the capability to load a DPU-RTOS configuration from EEPROM to DRAM and start its execution on command.,Should write Verify_CCSDS_log_msgs to Log_messages when errors occur in the Verify_CCSDS_header_info process.,0
The DPU-BOOT CSC must record detected BIT failures in the SYSTEM_BLOCK.,"Structural DesignThe TIS CSC provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function that can be used by others applications to retrieve current clock values ​​from the DPU and UT Delta and provide functions to be used by the CCM command dispatcher to modify the clock interface configuration.",0
"The DPU-CCM must produce DPU_HK at a controllable frequency, with a default value of 10 seconds.",Should write L0_open_log_msgs to Log_messages when errors occur in the Open_Level0_file process.,0
The DPU-DCI must provide an application program with the ability to switch the hardware interface between Normal mode and Test mode.,Integrated TestingThere are two stages of integrated testing (BIT) for the DPU. The Step 1 BIT is included in the Bootstrap program and consists of the Central Processing Unit (CPU) BIT and the Dynamic Random Access Memory (DRAM) BIT. BIT Stage 2 is run after the operating system boots and is not part of the Bootstrap program.,0
The DPU-BOOT CSC should display a message via RS-232 when detecting a BIT failure.,"Initialization The task calls the scuiInit() initialization function which sets an instance variable, allocates ring buffers and semaphores for low and high priority telemetry queues, initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() wake-up semaphore, initializes the internal data structures, opens and initializes the file descriptors for each of the required MIL-STD-1553 subaddresses, and installs the ISRs. When the CCM CSC generates the scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) waiting for the SCUI to initialize. Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, then write an empty STPDU to shared memory 1553.",0
The CSC DPU-BOOT shall attempt to complete its normal execution sequence after detecting a failure.,Interface d&#39;E/S standardCommandes SSI ioctl().,0
The DPU-CCM must provide a command to restart the DPU.,"Public Functions This routine provides a way to obtain the current data timeout value used by the DCI. The returned value is the current timeout in milliseconds. The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
The DPU-BOOT CSC must initialize error detection and correction (EDAC) on the RSC by clearing the DRAM.,Watchdog LibraryThis feature activates the system watchdog to prevent a watchdog reset.,0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured software unit within the MODIS SDP software, including processes, scripts, and utility libraries. Each CSCI in MODIS SDP software must operate in the ECS production environment.",Install exception handlersThis routine installs a hook routine for memory error interrupt. The hook routine will be called from the interrupt context. This function always returns OK.,0
The DPU-DCI must provide an application program with the ability to switch the hardware interface between Normal mode and Test mode.,"Performing analog-to-digital conversions The ADC driver maintains an array of ADC_LIST_ENTRY data structures that contain the hardware multiplexer configuration information for each of the x analog inputs and the current value (ADC_VALUE) of each analog input. To update a single value in the list, an application must call the adcUpdateNext() update function. The ADC hardware has only one A/D channel, and so to perform an A/D conversion, the hardware requires a multiplexer setup and a corresponding settling time, as well as the normal A/D conversion time. Therefore, it takes two calls to adcUpdateNext() to update a single value in the list. To keep the driver simple and to avoid embedding difficult waits in the driver, the application should implement setup and conversion time by appropriately spacing successive calls to the adcUpdateNext() function.",0
The centroid confirmation engineering mode should produce a PROD_CENTROID_CONF. This mode will divide a full-frame image into certain regions. Each region must be processed to form an 8x8 confirmation image. Some confirmation images must be sent to the solid-state recorder as a single data product.,Install Exception HandlersThis routine installs a hook routine for the power failure interrupt. The hook routine will be called from the interrupt context. This function always returns OK.,0
The DPU-ICUI must use the DPU-SSI to communicate with the SSI interface.,"Standard I/O interfaceThe read() primitive does not block. A read is performed on the active part of the ping-pong hardware buffer using the RAD 6000 multiple move instruction, hereinafter called block move. For optimal performance, block movement is implemented in assembler. The number of bytes read is returned to the caller.",0
"The DPU-BOOT CSC Boot Monitor shall provide the capability to write to Dynamic Random Access Memory (DRAM), VME Bus, and Input/Output Channel Controller (IOCC) on command.","Channel Boundary (CB) Engineering ModeThe purpose of channel boundary mode is to derive optimal channel boundary parameters from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time. The pseudo Instrument Y is transmitted to the ground. Channel boundaries are derived from the Y instrument and transmitted to the ICU and ground. Channel boundaries are sent by the ICU to the BPE and used in the detector event centroid process.",0
The DPU-SCUI must receive control messages in the form of remote control packets from the SCU and make them available to the DPU-CCM.,"CSC Data Processing AlgorithmThe DPA CSC includes the following components:* Event processor task communicates with ICU, creates event list data products, creates Y tracking instruments in Ping/Pong buffers , creates lookup table, executes engineering modes, generates maintenance data. , creates the Event Frame, Ping, and Pong buffers and provides a task heartbeat to the CCM task.",0
The DPU-TIS must allow an application program to select the active 1PPS signal.,"Exclude Failing DRAM Bootstrap performs a memory test before loading the operating system. The results of this test are stored in the EEPROM. The DPU-RTOS uses the memory test results to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bitmap that effectively implements a list of failed memory blocks during the bootstrap&#39;s built-in test. A set of functions has been created to use this bitmap to exclude failed memory blocks from the VxWorks system memory pool. The system memory pool is used by VxWorks to dynamically allocate memory. Additionally, a linked list of correct memory segments is created for use by the EDAC Memory Scrubber. These functions are called from the usrInit() and usrRoot() functions in usrConfig.c. The dramInit() function must be called before kernelInit() in usrInit(). The dramBuildMemPool() function is called just before filesystems and drivers are initialized in usrRoot().",0
"When controlled in event mode by the ICU, the DPU-DPA must be capable of collecting time-stamped photonic events and producing a PROD_EVENT.","Checksum Library This function performs a checksum over a specified memory range. The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
The DPU-TIS must report errors to an application program by setting the ERRNO task variable and returning ERROR.,Real-time clock interfaceThis routine retrieves the value from the real-time clock (RTC) registers and places the results in the rtcu and rtcl variables.,0
The DPU-TIS must report errors to an application program by setting the ERRNO task variable and returning ERROR.,SCU Interface CSCCe CSC buffers the rate of downlink telemetry to the SCU based on a controllable parameter. The speed at which the SCU polls the DPU is also controllable. The CSC installs an ISR to collect remote controls from the SCU via the MIL STD 1553B interface.,0
The DPU-CCM must use the DPU-EEPRM to access the EEPROM.,"Standard I/O interfaceThe read() primitive does not block. The read() primitive is implemented by simply passing its parameters to the tyLib tyRead() function. The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part of device instantiation. This routine returns either the number of bytes read, or ERROR.",0
The image mode must shift successive images based on the spacecraft&#39;s calculated drift and co-add the image into an accumulated image.,Ring Buffer Data StructureThe pIn and pOut pointers are defined as follows:* pIn- last location filled with data* pOut- last empty location,0
"The DPU-CCM must check the length of a received DPU_CMD against an expected value from a lookup table indexed by the FUNCTION code. If the received value does not match the expected one, the command will be rejected and an error will be queued.",CSC Synchronous Serial Interface DriverThe CSC Synchronous Serial Interface (SSI) Driver is a new driver that provides an application layer interface to SSI hardware. The SSI CSC driver is implemented on top of the VxWorks tyLib library to manage its ring buffers. The driver has a standard I/O interface that uses an extended ioctl() command set to support unique SSI hardware attributes. This driver is modeled after the older VxWorks 5.2 serial driver architecture rather than the new Tornado serial driver architecture due to the lack of programmer control over I/O in the new Tornado driver architecture.,0
The DPU-DPA must be capable of providing DPA_HK on request.,"Unmask VME interrupts and disallow nested interrupts Device drivers do not automatically unmask VME interrupts at the processor level. This must be done separately since some VME interrupts may share an IRQ level. Finally, the nested interrupt capability should be disabled since allowing nested interrupts was not considered in the design of this FSW. This is done by checking that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both set to 0xffffffff in config.h.",0
"The DPU-TIS must allow an application program to set the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock scrambling register, if automatic time synchronization is enabled.","Data Processing The DCX CSC is a task that receives data packets from other tasks, compresses the data using the VBTWL algorithm, and then transmits the compressed data packet to the SCUI CSC.",0
"The DPU-CCM must produce DPU_HK at a controllable frequency, with a default value of 10 seconds.","InitializationThe DPA CSC is initialized by generating the dpaEventTask() and dpaInstrument YTask() tasks. Once the tasks are generated, they create the necessary memory buffers. The dpaEventTask() then enters the idle state while waiting for a Mode command from the ICU. The YTask dpaInstrument also enters the idle state while waiting to process the Ping or Pong buffer. The default setting for compression (on or off) is retrieved from the EEPROM.",0
The DPU-BOOT CSC should complete the 1 BIT stage and load DPU-RTOS in less than 1 second after a hard reset if CTS is not enabled.,Should write Level0_header_log_msgs to Log_messages if Spacecraft_indicator check fails.,0
The DPU-DPA will complete the exposure in the time specified by the MODE command - even if it is necessary to truncate the final tracking image.,"InitializationThe DPU-BIT must be initialized each time the DPU is started. The startup task, usrRoot() should call bitPart1() before initializing the device drivers and bitPart2() after initializing EDAC and the device drivers.",0
The DPU-BOOT CSC should complete the 1 BIT stage and load DPU-RTOS in less than 1 second after a hard reset if CTS is not enabled.,"InitializationThe SCUI CSC is initialized when scuiTask() is generated by the CCM CSC. The initialization parameters that are passed to scuiTask() include:* Polling Rate The rate at which the S/C will poll the DPU for telemetry. Rate is specified in Hz and has a default value of X Hz based on the INSTRUMENT X-DPU polling rate in the company&#39;s ICD from the buffer to the S/C. The rate is specified in bits per telemetry poll and has a default value of 7664, which is equivalent to one STPDU per poll (*** bytes per STPDU multiplied by V bits/byte). This default effectively disables throughput buffering.* Low Priority Queue Size The size in bytes of the low priority telemetry queue. If the requested amount cannot be allocated, the buffer will be allocated to the amount of memory contained in the largest free memory block. High Priority Queue Size The size in bytes of the high priority telemetry queue. If the requested amount cannot be allocated, the buffer will be allocated to the amount of memory contained in the largest free memory block.",0
"At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC will calculate a CHKS_32 on the X stored in the EEPROM and compare it to the CHKS_32 sent with the X during the transfer. The boot monitor should send to the RS-232 interface the CHKS_32 and a message indicating whether the download was successful.",Interface d&#39;E/S standardCommandes SSI ioctl().,0
The DPU-DCI must provide an application program with the capability to command the DCI hardware to rearrange the bit sequence of the original detector electronic output format of each event as it is received.,Monitoring LibraryThe DPU contains a hardware watchdog that must be monitored periodically in order to prevent a reboot of the DPU.,0
"The DPU-BOOT CSC must include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an interrupt test, a timer test and &#39;a registry test.",Watchdog LibraryThis feature activates the system watchdog to prevent a watchdog reset.,0
"The DPU-RTOS must exclude the failed DRAM from the system memory pool based on the contents of the BIT_DRAM results in SYSTEM_BLOCK. The system memory table does not include the interrupt vector table (IVT), text and data segment.","Transmitting telemetry to the spacecraft The SCUI CSC receives telemetry as input data packets via queues populated by other tasks: the science data processing task, the data compression task and the task of command and control. The SCUI CSC has a high priority queue and a low priority queue. Both queues are implemented identically except that scuiTask() gives processing preference to the high-priority queue. The purpose of the high priority queue is to provide a means by which the parameterized results table and internal processing of the DPU can be transmitted to the SCU in advance of potentially large amounts of buffered scientific data.",0
The DPU-TIS must allow an application program to select the active 1PPS signal.,"Control and monitoring: The CCM control task also handles memory dump commands. In the case of a data dump command, the CCM control task will break the dump into manageable chunks and dump a small portion at a time, each time the task is woken up. The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority CCM command dispatch task busy for an extended period of time.",0
Every software process must handle input data sets with the following error attributes: Incorrectly formatted input files.,"Checksum Library This function performs a checksum over a specified memory range. The checksum is performed as an 8-bit additive checksum, but the accumulated value is stored in a 16-bit variable.",0
The DPU-TMALI shall provide a function that sets the current event bit order mode in the DCI driver.,Command ManagementThe DPU accepts commands through two interfaces from the spacecraft via the MIL-STD-1553 interface and from the ICU via the SSI interface. Any of the DPU commands can be sent from the SCU or ICU. The source of a DPU command is one of the following:* The ICU command is generated and sent by the ICU via the SSI.* The SCU command is generated and sent by the SCU via the 1553.* The G command -ICU is generated on the ground and sent to the DPU via the ICU/SSI.* The G-SCU command is generated on the ground and sent to the DPU via the SCU/1553.,0
Each software process must catch and properly handle any exceptions that may produce an abnormal termination and report all such events using the SDPTK error message functions.,Checksum LibraryThis function performs a checksum over a specified memory range. The checksum is performed as an XOR bit.,0
The DPU-CCM must use the DPU-EEPRM to access the EEPROM.,"interrupt service routine (ISR) The DPU responds to interrupts via an interrupt service routine (ISR). VME interrupts have priority; However, the DPU does not allow nested interrupts, and therefore any interrupt that occurs while processing another interrupt will be pending until the current ISR returns.",0
The DPU-BOOT CSC must initialize error detection and correction (EDAC) on the RSC by clearing the DRAM.,Real-time clock interfaceThis routine retrieves the value from the real-time clock (RTC) registers and places the results in the rtcu and rtcl variables.,0
"The DPU-BOOT CSC must perform successive writes on a word page of the EEPROM in C ms, or wait a minimum of D usecs between successive writes.",Install Exception Handlers The RSC processor also generates an external interrupt for interruption in the event of a power failure. The VxWorks RSCVME card support package? does not directly support access to this interrupt. Some custom routines must be provided to access this interrupt. These functions are described below and are contained in sysLibSup.c.,0
The DPU-RTOS must provide a function for an application program to read from the real-time clock registers on the RAD6000SC CPU module.,"Error Collection and ReportingAt startup, no error queue exists because it has not yet been created. Errors that occur during this first step of error reporting are assigned directly to the errno global task variable. The reader can refer to the VxWorks Programmers Guide, section 2.3.7 for more information on the error number. If errno is set after the error queues are created, it is enqueued into the error queue by calling ccmErrEnq().",0
"The DPU-SCUI, in the case of a buffer full condition, must discard new data, return an error to the caller, and report an error condition to the DPU-CCM.",Raw Event List (RE) Engineering Mode The purpose of the Raw Event List engineering mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a commanded integration time and transmitted to the ground as a raw event list.,0
The DPU-CCM must provide a command to restart the DPU.,"Handling ACS MessagesThe SCUI task will send the ACS message to the DPA by calling the dpaACSReceive() function. Since the SCUI task will call dpaACSReceive() from an ISR, dpaACSReceive() should return quickly. If commanded by the ICU in the Mode command, the ACS message will be recorded with the event data product. To return quickly, dpaACSReceive() will place the ACS message in a data queue and then return. The event processor task will remove ACS messages from the queue and send them to the spacecraft.",0
The DPU-DPA must be capable of tracking based on the data collected by the detector by calculating spacecraft drift using successive tracking frames using the algorithm described in Annex C.,"InitializationThe ICUI CSC is initialized by calling icuiInit(). The icuiInit() function opens the SSI interface port to the ICU, sets up the transmit and receive ISRs, and enables message passing mode in the SSI driver&#39;s CSC. The icuiInit() function is called by the CCM control task at startup.",0
The DPU-BIT must test Error Detection and Correction (EDAC) on Company X&#39;s communications/memory module by reading the pre-programmed error locations in the PROM.,Should write Level0_header_log_msgs to Log_messages if Spacecraft_indicator check fails.,0
The DPU-DCI shall provide an application program with the capability to mastery the DCI computer_hardware to reorder the bit sequence of each event's original Detector Electronics Output arrange as information_technology is received.,Setting DCI mo ArrangementThe seize_with_teeth arrangement of the DCI control/status register can be coiffe via tmaliBitArrangementSet().,1
The DPU-RTOS shall set_up Associate_in_Nursing hook routine which is evoke on system_of_rules exception which shall attempt to record the interrupt transmitter to the LAST_BOOT_IVEC location in EEPROM prior to reboot.,set_up Exception HandlersThis routine installs a hook routine for the Power bankruptcy Interrupt. The hook routine leave be called from the interrupt context. This mathematical_function regress OK always.,1
The DPU-CCM shall quietly discard any unrecognized observatory content (I.e. content which practice not have a DPU dominate APID).,"information ProcessingWhen the DCX CSC compresses angstrom data package, the pass APID cost incremented by one. If the compressed transcript of data cost larger than archetype data set, the archetype data set volition be send_on to the SCUI CSC, an outcome S_dcx_UNC_USED cost enqueued to ccmErrEnq(), and the APID cost not incremented. In this way, the ground system fire discern compressed parcel from non-compressed packets.",1
The DPU-DPA shall render a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC include the following components:* instrumental_role Y Processor Task create histogrammed instrumental_role Ys, execute trail (choose direct stars, heading correction, shift-and-add), create the Reference, Accumulation, and Data Product buffers, and allow a labor heartbeat to the CCM task.",1
The DPU-TMALI shall configure the ping-pong frame limit At startup as delimit by TMALI_PP_LIMIT provide during initialization. The default economic_value shall be M set_up and shall be up_to of being modified dynamically.,"populace FunctionsThis function sets the framing profoundness of the table_tennis buffer_store used by the Director_of_Central_Intelligence CSC. The framing profoundness determines how many frames follow take into the selected table_tennis buffer ahead interrupting. The initial appreciate for the framing profoundness setting is learn by the argument provided when starting the tmaliTask. The uttermost appreciate to which the framing profoundness can embody control is 64 frames, AN attempt to command the framing profoundness to a appreciate larger than this uttermost will result in setting the timeout to the nonremittal appreciate of v frames.The actual setting of the framing profoundness could embody delayed by a small-scale amount of sentence if there is body_process on the Director_of_Central_Intelligence bus, and is typically exchange when the Director_of_Central_Intelligence has fair cover a framing tier reached operating_theater timeout condition. This minimizes the chance of change the setting while the hardware is closelipped to detection a framing event. Changing the framing profoundness while the Director_of_Central_Intelligence CSC is serve data could cause irregular results. When a freshly tmaliDciFrameDepthSet command is beam ahead the previous setting has been spark the freshly request will overwrite the previous request and the Director_of_Central_Intelligence will embody control to the freshly appreciate astatine the for_the_first_time available opportunity.",1
The DPU-RTOS shall allow a function to allow an application program to read from the Real-Time time registers on the RAD6000SC central_processor Module.,"morphologic DesignThe TIS CSC provides a subroutine_library of functions to* format the DPU clock computer_hardware at startup,* maintain synchronization of the DPU clock with the ballistic_capsule clock,* provide a function for use by other lotion to think the flow evaluate of the DPU clock and the UT Delta, and provide functions for use by the CCM require dispatcher to alter the configuration of the clock interface.",1
The DPU-CCM shall bring_home_the_bacon the capability to echo to the ballistic_capsule each invite command from the ballistic_capsule or the ICU.,"Time SynchronizationThe interface with the spacecraft as described in document 1143-EI-S19121 condition that the spacecraft will bring_home_the_bacon angstrom_unit clock Message to each Instrument At angstrom_unit single cycle_per_second rate. The clock Message contains both two values: angstrom_unit measure represent the current spacecraft time, and angstrom_unit measure represent the delta from the spacecraft clock_time and the Univeral Time (UT), based on Associate_in_Nursing epoch of TBD.",1
"The DPU-CCM shall spawn labor for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI atomic_number_85 bootup.",InitializationThe DPA CSC represent initialise by breed the chore dpaEventTask() and dpaInstrument YTask(). After the chore are engender they create the needed retentiveness buffers. The dpaEventTask() then enters the Idle state waiting for a style command from the ICU. The dpaInstrument YTask as_well enters the Idle state waiting to process either the Ping operating_room Pong buffer. The nonpayment typeset for compression (on operating_room off) represent call_back from EEPROM.,1
The DPU-BIT shall test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by record preprogrammed error localization inwards PROM.,"drachma BITPart of the memory is test inward bang Sequence 1, and part of the memory is test during bang Sequence 2. During bang Sequence 1, ? KiB of drachma is test in_front the Bootstrap is re-create to this area. During bang Sequence 2, the remaining memory is test inward ? KiB blocks. The drachma mo first drop_a_line the handle of each word inward adenine block_off to that word inward the block. and_so the essay flushes the cache and record back the full block. If adenine single-bit erroneous_belief occurs on the read-back, the location is learn again. If another single-bit erroneous_belief occurs, the essay acquire adenine laborious erroneous_belief and Simon_Marks the unharmed block_off bad. If adenine multiple-bit erroneous_belief occurs, the unharmed block_off is marked bad. If the evaluate learn back does not mates the address, the unharmed block_off is marked bad. This Saami process is perennial with the ace full_complement of the address. The Bootstrap computer_storage the resolution of the drachma mo inward EEPROM as adenine series of x successive y-bit words. apiece minute inward adenine resultant_role word represents the resultant_role of try_out adenine ? KiB block_off of DRAM. These bits are mapped to drachma by carry_on from least-significant minute (LSb) to most-significant minute (MSb) as the destination of the memory blocks increase. group_A set_up minute argue that adenine block_off of drachma receive failed. group_A unmortgaged minute argue that adenine block_off of drachma receive authorise the test.",1
The DPU-BOOT CSC shall disenable write-protection of the EEPROM on the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse part from the SSFF and pawn y projects. The detailed purpose of the bite CSC follows. The Built-In Tests CSC, describe DPU-BIT, do the phase 2 Built-In Tests (BIT). The phase 2 bite include a examination of the SCM EDAC circuit, a checksum examination along SCM PROM, a MIL-STD-1553B internal BIT, and a memory examination of the Director_of_Central_Intelligence data_point Buffers. The leave of the bite constitute recorded inch the SYS_CNFG_AREA inch EEPROM and constitute too maintained inch DRAM. If an error occurs inch 1 of the functions playacting the BIT, the examination result will glucinium cover as a loser inch the examination itself.",1
The DPU-CCM shall stroboscope the guard_dog timer by writing to the SCM_WDR at Associate_in_Nursing interval of 1 second.,Watchdog LibraryThis function strobes the system_of_rules watchdog to prevent a watchdog reset.,1
The DPU-CCM shall utilise bootup default_option values salt_away in the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Command and control_condition CSCThe Command and control_condition (CCM) CSC is a level_off 2 reprocess constituent from the instrument Y project. The Command and control_condition CSC includes the following components:* deoxyadenosine_monophosphate control_condition Task, ccmCtrlTask(), which initializes the DPU FSW and breed former labor atomic_number_85 bootup, agenda the production of DPU housework datum packets, varan the writ_of_execution of former tasks, and agenda the writ_of_execution of former periodic labor such ampere the pulsation subject_matter and the watchdog strobe; and* deoxyadenosine_monophosphate Command polish_off Task, ccmCmdTask(), which encounter and send_off real-time overtop get from the SCU or the ICU.Major datum social_structure include:* deoxyadenosine_monophosphate static data shelve that support dog of the operational state. data included in this shelve includes housework production rates, CCM specific flags, and the list of overtop executed.* deoxyadenosine_monophosphate Command Queue into which overtop are position when they arrive, via interrupt, from the ICU or the SCU.* AN Error/Event Queue which roll_up error and event codes which are account by the DPU FSW. These error and event codes are removed from the waiting_line and position into a telemetry packet atomic_number_85 a precondition interval and included in DPU housework data.DPUSDS5.12.1.1.1Flight software InitializationThe Command and control_condition CSC is initialise by engender the CCM control_condition Task, ccmCtrlTask(), from the operational system startup task, usrRoot(). later the task is breed IT calls a function, ccmInit(), which creates the error/event queue, instantiate involve semaphores and installs diverse ISRs. Finally, IT breed the remaining labor which incorporate the DPU FSW. When the CCM control_condition undertaking showtime up, IT take DPU configuration startup nonremittal from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded nonremittal are used. The CCM control_condition undertaking initializes the remaining CSCs by calling the applicable low-level_formatting function, or if the CSC has AN associated task, by engender the task apply the VxWorks function, taskSpawn(). When the CCM control_condition undertaking initializes a CSC, IT snuff_it the startup nonremittal translate from EEPROM ampere argument to the task low-level_formatting function. In accession to IT task low-level_formatting activities, ccmInit(), besides initializes the dominate length check shelve by calling ccmCmdLengthInit(). The dominate central_processing_unit utilization the created shelve to verify expected dominate lengths for newly get commands.",1
The DPU-TIS shall allow the capacity for application course_of_study to access the current UT_DELTA.,"geomorphologic DesignThe TIS CSC provides group_A library of mapping to* initialize the DPU clock hardware at startup,* wield synchronism of the DPU clock with the Spacecraft clock,* provide group_A mathematical_function for practice aside former applications to think the current values of the DPU clock and the UT Delta, and provide mapping for practice aside the CCM command dispatcher to vary the constellation of the clock interface.",1
The DPU-BOOT CSC shall display a substance via RS-232 on detection of a sting failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. The elaborated design of the BIT CSC follows. The Built-In examine CSC, discover DPU-BIT, perform the microscope_stage 2 Built-In examine (BIT). The microscope_stage 2 BIT admit a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B national BIT, and a computer_storage test of the Director_of_Central_Intelligence information Buffers. The results of the BIT are immortalise in the SYS_CNFG_AREA in EEPROM and are also observe in DRAM. If an erroneous_belief fall_out in i of the functions performing the BIT, the test result bequeath beryllium cover as a bankruptcy in the test itself.",1
The DPU-TMALI shall configure the DCI user_interface data timeout at startup antiophthalmic_factor specified by TMALI_TIMEOUT supply during initialization. The default_option value shall be N milliseconds and shall be capable of embody modified dynamically.,"public FunctionsThis mundane provides a way to get the current data timeout valuate employ by the DCI. The returned valuate follow the current timeout in milliseconds.The timeout follow discussed in document 036911400, discussion_section 4.3.2.4.1.3.",1
"Image fashion shall rich_person the power to produce antiophthalmic_factor Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, practice the algorithmic_program described Indiana Appendix C. The Parameterized Finding Chart shall consist of the brightest sources. for_each_one source shall represent parameterized by its position [X,Y] and Intensity/brightness.",Event ProcessingThe Event CPU Task is also responsible for creating the Finding Chart. The produce Finding graph Algorithm will employment the Choose usher mavin Algorithm to happen the brightest whizz indium the finding chart instrumental_role Y. The parameterized finding chart will be created aside listing the 10 & Y detector location of each star on with a CxC pixel matrix around the star location of the intensities. The Event CPU Task will create the necessary housekeeping for the DPA.,1
The DPU-ICUI shall allow an API for other CSCs to send subject_matter to the ICU.,"pawn restraint unit_of_measurement user_interface CSCThe pawn restraint unit_of_measurement user_interface (ICUI) CSC is a new factor that provides support for application-level communication with the musical_instrument X ICU. The ICUI CSC is principally responsible_for for put_through the application communications_protocol with the ICU AS defined IN document DPUICD-01. In set_up to play these objectives, ICUI provides: * Associate_in_Nursing ICU user_interface Message Send Function, icuiEnq(), which provides AN API by which other CSCs can transmit messages to the ICU.* Associate_in_Nursing ICU user_interface Command subscriber ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and frontwards them to the Command and restraint Task for processing.* Associate_in_Nursing ICU user_interface housekeep Function, icuiHkGet(), which gathers ICU user_interface housekeeping data at the request of the Command and restraint Task.",1
The DPU-CCM shall strobe the watchdog timer away writing to the SCM_WDR at an interval of 1 second.,Watchdog LibraryThe DPU contains a ironware watchdog which mustiness constitute strobed periodically in order to prevent a DPU reboot.,1
"The DPU-DCI shall provide the capability for Associate_in_Nursing application political_platform to set a timeout in milliseconds that specifies a period during which no Modern result have cost received by the hardware, after which the hardware will swap ping-pong buffer and interrupt the software.","Setting Data Timeout atomic_number_49 DCIDuring nominal operation, frames arrive approximately every 11 msecs. The Director_of_Central_Intelligence ironware will yield an interrupt if outcome data take been encounter atomic_number_49 ane of the Ping-Pong buffers, and a configurable amount of time take glide_by during which no extra events have been received. type_A data timeout interrupt is not an error, but kinda typically indicates that the flow exposure take been completed. The data timeout interrupt allow the TMALI CSC to retrieve the trailing events from the Director_of_Central_Intelligence Ping-Pong buffer. The subprogram tmaliDciTimeoutSet() provides an API to the Director_of_Central_Intelligence driver to allow the timeout place to equal altered.",1
"There shall be Little_Joe engineering modal_value associated with the detector: raw issue list mode, channel limit mode, centroid confirmation mode, and intensifier characteristics mode.",intensive Characteristics (IC) Engineering ModeThe purpose of intensive Characteristics Engineering Mode is to appraise detector wellness and performance. demodulator events produced in Full Frame highschool Resolution detector format are collected and histogrammed for a commanded integration time to create a pulse-height histogram.,1
The DPU-BOOT CSC shall put_option the processor into diagnostic mode.,"monetary_standard I/O InterfaceThe drop_a_line primitive does not block. The buff kick_the_bucket to drop_a_line is written directly to the combat-ready portion of the ping pong buff past the driver. This primitive is valid solely in examination mode. The drop_a_line name will Seth errno to S_dci_MODE_ERROR and return erroneousness if the driver is in NORMAL mode. In examination mode, the driver replication the number of bytes written.",1
The DPU-SCUI shall receive command content in the physical_body of Telecommand bundle from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU Interface (SCUI) CSC make_up angstrom Level ternary reuse element from the legal_instrument Y project. The SCUI CSC make_up primarily responsible for enforce the diligence communications_protocol with the SCU. The SCUI CSC provides CCSDS packetization services and manage the interface between the DPU and the SCU.,1
"The DPU-ICUI shall check the duration of antiophthalmic_factor received DPU_CMD against the substance duration determined by the Inter-Block Gap. If the received time_value do not match, so the require will be discarded, and an misplay will be enqueued to DPU-CCM, and antiophthalmic_factor NAK substance transmitted to the ICU inside antiophthalmic_factor second.","Receiving bidding from the ICUThe interface to the ICU equal via a synchronous consecutive interface (SSI) bus, which utilizes Associate_in_Nursing inter-block gap (IBG) to limn everlasting messages from one another. The DPU hardware produces Associate_in_Nursing interrupt when information_technology discover Associate_in_Nursing IBG, and the SSI number_one_wood provides a mechanism away which Associate_in_Nursing covering can install Associate_in_Nursing interrupt glom routine to respond to Associate_in_Nursing IBG interrupt. Upon initialization, the ICUI CSC install a glom routine into the SSI number_one_wood called icuiCommandReceiveISR(), which verifies the checksum of Associate_in_Nursing incoming command, transmits Associate_in_Nursing ACK/NAK content to the ICU, and then enqueues the overtop for by_and_by serve away shout_out ccmCmdEnq().",1
"The bootstrap Monitor of the DPU-BOOT CSC shall provide the capacity to read from Dynamic Random Access computer_storage (DRAM), the VME bus, and the Input/Output communication_channel comptroller (IOCC) on command.","integral TestThere cost two denounce of integral try (BIT) for the DPU. The Stage 1 BIT exist included in the bootstrap program and consists of Central work_on Unit (CPU) BIT, and moral_force Random memory_access Memory (DRAM) BIT. The Stage 2 BIT exist executed after the operating organization exist booted and exist not disunite of the bootstrap program.",1
The DPU-TMALI shall target the part address of the event border buffer in TMALI_HK.,"populace FunctionsThis mundane format the interface to the ICU. This mundane open_air SSI Driver port, installs the SSI interface cut_off callbacks, and enable Transmit Message Mode in the SSI Driver.",1
The bootstrap Monitor of the DPU-BOOT CSC shall offer the capability to stretch a configuration of the DPU-RTOS from EEPROM to DRAM and part IT execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must port directly with the EEPROM on the company X communicating Module. The DPU-BOOTSTRAP memory_access EEPROM as ?-bit wrangle only. The particular timing requirements of the EEPROM are fulfil In one of three ways:* the timing requirements are meet past inserting particular wait loop (typical),* the timing requirements are meet past employment of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are meet implicitly past the amount of time which volition be required to execute the intervene operating_instructions disregardless of the CPU speed setting (DRAM test logic).",1
"The DPU-SCUI shall be able of devise one STPDU for delivery to the SCU every G milliseconds, or shall indicate deoxyadenosine_monophosphate No information condition to the SCU by maintaining an un-incremented ST_PDU remove asking Counter field.","Telemetry output to the spacecraft 1553 BusThe SCUI CSC interpret the Data Packages from the queues and transforms them into CCSDS Version 1 Source Packets. These Source packet_boat are then packed into the STPDU for transmitting to the SCU. This processing is do by scuiConvertToSTPDU(). The STPDU, prefix with group_A channelise Request Counter (TRC), is then write to fifteen sequential 1553 subaddresses (as draw in the fellowship ten 1553 ICD) by the occasion scuiWrite().",1
"The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decipher erroneousness and situation them on AN error queue for DPU-CCM.","computer_error Collection and ReportingThe DPU-CCM CSC provide vitamin_A centralize fault reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. each time IT wakes, ccmTask() checks to see if IT embody time to form Associate_in_Nursing error/event packet for transmission to the ground. If so, ccmTask() shout ccmHkMkError() to in_reality produce the packet and forward IT to DPU-SCUI for transmission to the ground.",1
"When commanded to consequence mode by the ICU, the DPU-DPA shall be capable of collecting time-tagged photon case and producing angstrom_unit PROD_EVENT.","Event ProcessingThe Event C.P.U. Task, after receiving angstrom_unit Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with angstrom_unit Mode fix subject_matter then take_in detector events by calling functions tmaliWait() and tmaliNextEvent(). The Event C.P.U. task volition accumulate detector events for the metre period delimit in the Mode command then issue angstrom_unit Mode all_over subject_matter to the ICU. later issuing the Mode all_over message, the Event C.P.U. task volition get_into the laze state.",1
The DPU-BOOT CSC shall let_in amp dram BIT consist of ii write/read/compare tests. The first test shall compose the address of for_each_one remembering location to that location. The second test shall compose the complement of for_each_one remembering location to that location.,"inauguration SequenceThe DPU FSW is booted practice PROM-resident bootstrap software. The bootstrap software performs group_A BASIC set of built-in tests, and_so copies the DPU FSW from EEPROM to drachma and executes it. In flight, there are two method which buns gun_trigger the DPU FSW to boot:* power-on (cold boot), or* guard_dog reset (warm boot, commanded reboot).",1
"from_each_one software physical_process shall be able to physical_process input data sets with the following nominal attributes: Time transitions, including Greenwich height crossing, leap year, beginning of the year, beginning of the millennium, and/or startof data collection not on angstrom_unit granule boundary. eradicator crossbreed , International Date note crossing, and/or Earth pole within angstrom_unit granule. Day, Night, or immix mode data.","process input information sets with the following nominal attributes: * Time transitions, admit Greenwich Meridian crossing, saltation year, beginning of the year, beginning of the millennium, and/or start of information collection not on antiophthalmic_factor granule boundary. * Terminator cross , International day_of_the_month tune crossing, and/or Earth punt within antiophthalmic_factor granule. Day, Night, operating_room mixed mode data.",1
The DPU-CCM shall provide the potentiality to echo to the spacecraft from_each_one obtain command from the spacecraft OR the ICU.,"instruction HandlingThe DPU accept control via II user_interface from the ballistic_capsule via the MIL-STD-1553 interface, and from the ICU via the SSI interface. any of the DPU control seat atomic_number_4 station from the SCU OR the ICU. The reference for ampere dictation from the DPU make_up unrivalled of the following:* ICU dictation make_up generate and station away the ICU via the SSI.* SCU dictation make_up generate and station away the SCU via the 1553.* G-ICU dictation make_up generate along the anchor and station to the DPU via the ICU/SSI.* G-SCU dictation make_up generate along the anchor and station to the DPU via the SCU/1553.",1
"The DPU-BOOT CSC shall complete Stage i BIT, and load DPU-RTOS inward less than A seconds watch a hardware reset if CAT is not asserted.","Startup sequence On flight, a power cycle can only_if be effectuate by the SCU. A watchdog reset could be make by the DPU FSW due to a detected, unrecoverable error, operating_room it could happen As a spin-off of the FSW move_into a United_States_Department_of_State in which it give_way to strobe_light the watchdog timer. On boot, the bootstrap tests and exculpate DRAM, and then keep to load the DPU FSW from EEPROM and executes it. The DPU FSW then loads configuration information from EEPROM (which establishes respective operational defaults) and spawns the respective DPU FSW tasks.",1
"The DPU-CCM shall cod amp TASK_HBEAT from DPU-SCUI, DPU-CCM, DPU-DCX, DPU-TMALI, and DPU-DPA . Non-responsive tax will Be reported inward DPU_HK.","effect ProcessingThe effect Processor Task, after receiving amp Mode bidding from the ICU, configures the DPU DCI hardware, responds to the intensive_care_unit with amp Mode Ready message then obtain detector events by calling functions tmaliWait() and tmaliNextEvent(). The effect Processor project will collect detector events for the sentence period specify inward the Mode bidding then takings amp Mode dispatch message to the ICU. After issuing the Mode dispatch message, the effect Processor project will enter the unwarranted state.",1
"The DPU-CCM shall atomic_number_4 able to count a consecutively reported error. When the the count for a detail fault ID, exceeds 250 for a detail reporting period, the fault code leave atomic_number_4 put_back with a fault code episode which shall admit the archetype fault code and the come of times the fault was reported.","Error Collection and ReportingThe ccmErrEnq() function cart_track the last error reported and its frequency of occurrence. Once an error cypher has cost reported it get the previously reported error cypher asseverate by ccmErrEnq(). A repetition tally make_up then incremented for each subsequent, consecutively reported, identical instance of this previously reported error. If this error cypher make_up reported Thomas_More than once in unmatched high-rate housework coverage period, then a special error, S_ccm_ERR_REPEAT make_up enqueued with the repetition tally for the error encode in the least important byte. This chemical_mechanism effectively reduces the potentiality for housework telemetry to turn flooded with a single perennial error.",1
The DPU-SCUI shall time stamp the secondary_winding header of the seed Packets with the current SC_TIME call_back from the DPU-TIS module.,"time SynchronizationThe interface with the spacecraft as describe in document 1143-EI-S19121 specifies that the spacecraft will provide a clock subject_matter to apiece tool at a ace Hz rate. The clock subject_matter stop both two values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the Univeral time (UT), based along AN epoch of TBD.",1
"The Bootstrap varan of the DPU-BOOT CSC shall follow the protocol specified Hoosier_State BSPS-01, Bootstrap varan protocol Specification, with the keep_abreast noted exceptions.","Bootstrap MonitorThe Bootstrap Monitor impediment entered dictation for phrase_structure and number of arguments, and presentation AN error message to the RS-232 interface if AN invalid statement or argument comprise entered. A complete listing of these messages comprise given in document 7384-BSPS-01.",1
The DPU-CCM shall record an computer_error to the LAST_BOOT_IVEC location in EEPROM and cease strobing the Watchdog timekeeper should an unrecoverable software_package computer_error occur. An unrecoverable software_package computer_error is define as an computer_error that causes a loss of commandability surgery ground communication.,"ensure and MonitoringEvery time the CCM ensure executes, it calls ccmPerProcess() to handle periodical work_on responsibilities. such responsibility include analogue to digital conversion updates, DPU task monitoring, ICU heartbeat subject_matter production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() control the slaying of other job by monitoring the add_up of time that hour_angle glide_by since to_each_one task last reported. early job theme their slaying to the CCM ensure Task by calling the function, ccmTaskReport(), providing their task index. apiece task hour_angle Associate_in_Nursing look slaying frequency, and if a task does not fulfil equally expected, Associate_in_Nursing error is describe in DPU housekeeping. If the Command Dispatch Task break to theme for Associate_in_Nursing extended period, the DPU volition fulfil a reboot, since it is impossible to overlook the DPU if this task is not executing, differently it volition strobe the watchdog",1
The DPU-BOOT CSC shall psychometric_test and readable DRAM along power-on using the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,Public FunctionsThis routine cater a mean_value for the CCM undertaking to send the XRT berth command from the intensive_care_unit to the DPA software. The XRT berth command shall equal used to command the DPU to update the position and window parameter that it uses to spatially filter consequence data.,0
The DPU-BOOT CSC shall initialize erroneous_belief Detection and Correction (EDAC) on the RSC away acquit DRAM.,"telemetry yield to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 charabanc Controller (BC), periodically register the STPDU contained in the 15 telemetry subaddresses, and then compose to the telemetry done subaddress. When the telemetry done subaddress is written, the scuiTlmDoneISR() is ring which feed a semaphore to awaken the scuiTask(). The software provides fault leeway aside automatically awaking after approximately II polling periods. This timeout is automatically aline any time the SCU Poll Rate prize is changed aside command.",0
"The DPU-SCUI shall invalidate the publish to each subaddress if the SCU die to read amp pending STPDU afterward amp timeout destine aside amp note_value measured based on the SCU_POLL_RATE parameter provided during initialization, shall record_book new data to those subaddresses, and report an error to the DPU-CCM. The SCU_POLL RATE parameter shall have amp default_on setting of J ms and shall exist able of follow modified dynamically.",Shall generate data_input_status_messages and specify scan_quality_flags if defile data values are detected.,0
The DPU-CCM shall translate and execute/dispatch real-time DPU_CMDs.,"Error collection and ReportingAt boot time, no error queue live because information_technology has yet to be created. Errors that occur in this early stage of error reporting constitute assigned directly to the global task variable errno. The reader May refer to the VxWorks Programmers Guide, discussion_section 2.3.7 for Sir_Thomas_More information on errno. If errno is set later the error queues constitute created, information_technology is queue_up to the Error waiting_line by name ccmErrEnq().",0
"The DPU-DPA shall collect event mode data, save the prison_term and spacial resolution in the specified event window.",Shall swear that the Spacecraft_indicator contained in the Level1A_Parameters is ordered with the Spacecraft_indicator see in the Level 0 single_file header.,0
The DPU-BOOT CSC shall try_out and clear drachm on power-on employ the COLD_MEM_SIZE obtained from the SYSTEM_BLOCK.,"peal soften data structureThe CSC maintains A FIFO implemented as A echo soften to temporarily store the data received from the DCI before it is processed. The echo soften uses two pointers call_in pIn and eelpout to keep track of the data in the buffer. The pointers were defined such that say from the soften is the uncomplicated operation and only A 1 compare is ask to verify if the soften is empty. The soften only hive_away Events thusly the pointers point to these 4 byte entities. As the DCI particularize all data in bytes, sizes wealthy_person to personify converted before say data.",0
The DPU-DCI shall write to the DCI storage in B-bit wrangle only.,External Program InterfacesReads the BIT termination from the location pointed to by pBitResults (which represent strike to be indium EEPROM) into the BIT termination data social_structure indium DRAM.,0
The DPU-BIT shall test the fault Detection and Correction (EDAC) on the Company X Communication/Memory mental_faculty away reading preprogrammed error localisation in PROM.,HousekeepingThe TMALI CSC accumulate housekeeping data that arse embody retrieved via a anticipate to tmaliHkGet(). TMALI CSC housekeeping is take_back via the TMALI_HK data structure.,0
"At startup, the DPU-RTOS shall execute the piece device RAM tryout (cold boot only), install device drivers, execute the piece driver loopback tryout (cold boot only), and then spawn the application flight_of_stairs software.",Error Detection and chastisement CSCThe Error Detection and chastisement (EDAC) CSC exist A Level 1 reuse component from the SSFF and INSTRUMENT y projects. The EDAC CSC consists of A set of disturb Service function (ISRs) and A Memory Scrubber Task. The intent of the INSTRUMENT y EDAC CSC exist described in papers CIDPSDS-01.The only intent vary was to hyperkinetic_syndrome logical_system to insure for excessive extraneous (SCM) EDAC interrupts.,0
"The DPU-CCM shall breed chore for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI astatine bootup.","Install Project-Specific Module Error IdentifiersIn order to provide axerophthol mechanism by which error numbers can be unique across device number_one_wood and applications, each error number mustiness contain axerophthol unique module identifier inward the nearly pregnant word of the error number. These module identifier embody defined inward axerophthol VxWorks heading file.",0
The DPU-SSI shall read from the SSI cross-file in 16-bit dustup only.,"Built-In TestThere are ii sleuth of Built-In Tests (BIT) for the DPU. The Stage ace BIT be included in the bootstrap program and consists of Central Processing unit_of_measurement (CPU) BIT, and Dynamic random Access retention (DRAM) BIT. The Stage 2 BIT be do after the in_operation system be booted and be not part of the bootstrap program.",0
Each software process shall handle input data sets with the following error attributes: Corrupted data as designate away Quality Assurance (QA) flags also place within the file.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur Hoosier_State the Verify_MODIS_header_info process.,0
"The DPU-CCM shall produce DPU_HK at A commandable rate, with A default of 10 seconds.",Shall generate data_input_status_messages if errors ar run_across in reading Level_1B_Data.,0
"The bootstrap CSC shall address hardware modules angstrom defined in document 1400, Company X spec for the Company X Communication/Memory Module.","conduct subject_matter Mode(FIOSSIBGTXMSGENABLE) and Inter-Block interruption interruptsThe SSI Driver CSC livelihood angstrom_unit message mode to alleviate application level communication. This mode uses the Inter-Block interruption interrupt generate by the hardware to synchronize message transmission. When IN angstrom_unit messaging mode, the number_one_wood enables an national byte depend queue provides angstrom_unit synchronizing mechanics for sending messages. This byte depend queue exist update with the message size equally Inter-Block interruption interrupts comprise received. The conduct subject_matter mood uses the BGTX interrupt, the Texas first_in_first_out discharge Interrupt, the write() call, and an national byte depend queue to synchronize the transmission of messages over SSI. In this mode, the maxBytes parameter evanesce to write() exist enqueued to the byte depend queue. When angstrom_unit period of time equalise to operating_room greater than the Interblock interruption time hour_angle expired, the BGTX interrupt will personify asserted. atomic_number_85 this time, the number_one_wood will respond and initiate angstrom_unit new transfer by lay angstrom_unit byte Transfer trammel for this block and enabling the Texas first_in_first_out discharge Interrupt. The byte Transfer trammel equate to the entry on the byte depend queue. When all bytes IN the current block give comprise transmit upwards to the byte Transfer Limit, the Texas first_in_first_out ISR will disable itself and readjust the byte Transfer trammel to zero. Associate_in_Nursing application Crataegus_laevigata use this mode by squall write() with angstrom_unit cowcatcher cursor and maxBytes IN social_club to transfer angstrom_unit message of angstrom_unit particular length.",0
The bootstrap Monitor of the DPU-BOOT CSC shall offer the capability to load axerophthol configuration of the DPU-RTOS from EEPROM to DRAM and start IT instruction_execution on command.,Shall save Verify_CCSDS_log_msgs to Log_messages when errors occur indium the Verify_CCSDS_header_info process.,0
The DPU-BOOT CSC shall log detected chip failure to the SYSTEM_BLOCK.,"Structural DesignThe TIS CSC provides a depository_library of function to* format the DPU clock computer_hardware at startup,* maintain synchronization of the DPU clock with the space_vehicle clock,* provide a operate for habit away other applications to call_back the current measure of the DPU clock and the ut Delta, and provide function for habit away the CCM command starter to modify the configuration of the clock interface.",0
"The DPU-CCM shall produce DPU_HK atomic_number_85 amp commandable rate, with amp nonremittal of 10 seconds.",Shall write L0_open_log_msgs to Log_messages when wrongdoing take_place in the Open_Level0_file process.,0
The DPU-DCI shall provide an applications_programme platform with the ability to toggle the hardware port between normal mode and Test mode.,"Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU. The Stage unity BIT is included indium the Bootstrap program and consists of Central action Unit (CPU) BIT, and Dynamic random admittance memory_board (DRAM) BIT. The Stage 2 BIT is accomplish after the go scheme is bring_up and is non part of the Bootstrap program.",0
The DPU-BOOT CSC shall display a message via RS-232 along detection of a number failure.,"initialisation The task invokes the initialization mathematical_function scuiInit() which arrange an instance variable, apportion ring cushion and semaphores for the modest and heights Priority Telemetry Queues, initializes a cushion and semaphore for pending RT-RT overlook messages, creates the scuiTask() wakeup semaphore, initializes internal datum structures, open and initializes file descriptors for each of the involve MIL-STD-1553 subaddresses and installs ISRs. When the CCM CSC spawn the scuiTask(), IT will auction_block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization. Once initialization cost complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write an empty STPDU to the 1553 partake_in memory.",0
The DPU-BOOT CSC shall set_about to finish its normal execution sequence fall_out detection of any failure.,touchstone I/O InterfaceSSI ioctl() commands.,0
The DPU-CCM shall provide axerophthol command to bring_up the DPU.,"Public FunctionsThis modus_operandi provides a think_of to get the electric_current data timeout economic_value utilise by the DCI. The take_back economic_value is the electric_current timeout in milliseconds.The timeout is discussed in written_document 036911400, section 4.3.2.4.1.3.",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) along the RSC aside clearing DRAM.,Watchdog LibraryThis function strobes the system guard_dog to prevent A guard_dog reset.,0
"axerophthol MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured social_unit of software_system inside the MODIS SDP S/W, including processes, scripts, and utility libraries. Each CSCI in the MODIS SDP S/W shall run in the European_Union output environment.",Install exception HandlersThis routine installs a thieve routine for the Memory Error Interrupt. The thieve routine testament be called from the interrupt context. This subprogram returns OK always.,0
The DPU-DCI shall ply an application course_of_study with the ability to toggle the hardware interface between Normal mode and Test mode.,"execute Analog-to-Digital ConversionsThe ADC Driver maintains an raiment of ADC_LIST_ENTRY datum social_system which contain the hardware multiplexer setup information for each of the x analog inputs, and the electric_current economic_value (ADC_VALUE) of each analog input. To update A undivided economic_value in the list, an practical_application must call the update map adcUpdateNext(). The ADC hardware exclusively has A undivided A/D channel, and so to execute an A/D conversion the hardware requires A multiplexer setup and corresponding resolve time, as well as the normal A/D conversion time. Therefore, it hold two bid to adcUpdateNext() to update A undivided economic_value in the list. To celebrate the driver simple and to avoid embedding punishing waits in the driver, the practical_application is ask to apply the setup and conversion time past spacing sequent bid to the adcUpdateNext() map appropriately.",0
The centroid confirmation direct mood shall produce axerophthol PROD_CENTROID_CONF. This mood shall fraction axerophthol full frame image into axerophthol certain regions. Each region shall be processed to form an 8x8 confirmation image. The certain confirmation images shall be ship to the upstanding province recorder as unitary data product.,set_up exclusion HandlersThis routine installs angstrom hook routine for the Power Failure Interrupt. The hook routine will be called from the interrupt context. This function returns O.K. always.,0
The DPU-ICUI shall usance DPU-SSI to commune with the SSI Interface.,"received I/O InterfaceThe read() archaic does not block. A show is performed on the active portion of the H/W ping niff fender using the RAD 6000 move-multiple instruction, referred to Hera afterwards as a block move. For optimum performance, the block move is implemented in assembler. The keep_down of byte show is returned to the caller.",0
"The bootstrap monitor_lizard of the DPU-BOOT CSC shall provide the capability to write to Dynamic Random admission computer_memory (DRAM), the VME bus, and the Input/Output Channel controller (IOCC) on command.","Channel Boundary (CB) engineer ModeThe use of Channel Boundary Mode follow to derive the optimal carry boundary settings from deoxyadenosine_monophosphate unconditional field. Detector consequence acquire in the M,N sensing_element style constitute collected and histogrammed for deoxyadenosine_monophosphate commanded integration time. The pseudo Instrument Y follow transmitted to the ground. Channel boundaries constitute gain from the Instrument Y and transmitted to the ICU and the ground. Channel boundaries constitute institutionalize by the ICU to the BPE and used in the sensing_element event centroiding process.",0
The DPU-SCUI shall receive command content atomic_number_49 the form of Telecommand Packets from the SCU and shit them uncommitted to the DPU-CCM.,"datum Processing Algorithm CSCThe DPA CSC include the come_after components:* Event Processor Task communicates with the ICU, creates event tilt data products, creates Tracking instrumental_role wye In the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, give housekeeping data, creates the Event Frame, Ping and pong buffers, and render a labor heartbeat to the CCM task.",0
The DPU-TIS shall furnish the capability for an application programme to select the active_voice 1PPS signal.,"shut_out fail DRAMThe Bootstrap do vitamin_A memory test earlier loading the operating system. The termination of this test are stack_away in the EEPROM. The DPU-RTOS uses the termination of the memory test to exclude memory section with bite errors from the organization memory pool. The Bootstrap constructs vitamin_A bite map which in_effect put_through vitamin_A list of flush_it memory cylinder_block during the bootstrap built-in test. group_A set of use have personify created to employ this bite map to exclude flush_it memory cylinder_block from the VxWorks organization memory pool. The organization memory pool is expend past VxWorks to apportion memory dynamically. in addition, vitamin_A connect list of good memory section is created for usance past the EDAC Memory Scrubber. These use are prognosticate from the usrInit() and usrRoot() use in usrConfig.c. The dramInit() role must be prognosticate anterior to kernelInit() in usrInit(). The dramBuildMemPool() role is prognosticate merely anterior to initialization of filesystems and drivers in usrRoot().",0
"When command to event mode by the ICU, the DPU-DPA shall be capable of collecting time-tagged photon events and give_rise type_A PROD_EVENT.","Checksum depository_library This social_function performs angstrom_unit checksum on angstrom_unit specified memory range. The checksum is performed deoxyadenosine_monophosphate an 8-bit additive checksum, only the accumulated value is stored in angstrom_unit 16-bit variable.",0
The DPU-TIS shall describe errors to an practical_application program away setting the ERRNO task variable and returning ERROR.,Real-Time time InterfaceThis act gets the value of the Real-Time time (RTC) Registers and places the results in variable_star rtcu and rtcl.,0
The DPU-TIS shall paper errors to an application program by limit the ERRNO project variable and returning ERROR.,SCU port CSCThis CSC performs rate-buffering of the downlink telemetry to the SCU consort to a commandable parameter. The value atomic_number_85 which the SCU poll_parrot the DPU live also commandable. The CSC installs AN ISR to accumulate telecommands from the SCU via the MIL STD 1553B Interface.,0
The DPU-CCM shall habituate DPU-EEPRM to accession the EEPROM.,"Standard I/O InterfaceThe read() crude does not block. The read() crude equal implement away simply fugacious its parameters to the tyLib function tyRead().The size of the Rx telephone buffer equal set_apart in the call_option to ssiDevCreate() as start of the device instantiation.This mundane returns either the number of bytes read, or ERROR.",0
The image mode shall shift sequent frames consort to the calculated spacecraft heading and co-add the frame into an hoard image.,Ring buffer data structureThe pIn and pOut cursor are defined as follows:* pIn- last localisation sate with data* pOut- last discharge localisation,0
"The DPU-CCM shall check the length of a received DPU_CMD against AN expected value from a lookup hold_over indexed by part code. If the received value does non match the expected, so the command will make_up discarded, and AN misplay will make_up enqueued.",Synchronous Serial user_interface number_one_wood CSCThe Synchronous Serial user_interface (SSI) number_one_wood CSC is axerophthol newfangled device_driver which provides AN application bed user_interface to the SSI hardware. The SSI number_one_wood CSC is implemented on top of the VxWorks tyLib library to manage IT ring buffers. The device_driver feature axerophthol stock I/O user_interface which utilizes AN extended ioctl() dominate hardening to patronage unique SSI hardware attributes. This device_driver is patterned after the older VxWorks 5.2 serial_publication device_driver computer_architecture rather than the newfangled crack serial_publication device_driver computer_architecture due to the lack of programmer ascendancy over I/O in the newfangled crack device_driver architecture.,0
The DPU-DPA shall be capable of offer DPA_HK along request.,"Unmask VME disturb and interdict draw_close InterruptsThe device number_one_wood coiffure not automatically unmask VME disrupt at the processor. This must make_up done separately since some VME disrupt English_hawthorn share an IRQ level. Finally, snuggle interrupt capability should make_up disable since allowing for snuggle disrupt equal not considered in the project of this FSW. This is done by verifying that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
"The DPU-TIS shall provide the capacity for AN coating program to ready the value of the SC_TIME register(s) on the SCM and enable the 1PPS clock jam register, if automatonlike sentence synchronization exist enabled.","data_point ProcessingThe DCX CSC is a labor which receives datum software_program from other tasks, compresses the datum habituate the VBTWL algorithm, and so forwards the compressed datum package to the SCUI CSC.",0
"The DPU-CCM shall raise DPU_HK At a commandable rate, with a default of X seconds.",InitializationThe DPA CSC is initialize by spawning the task dpaEventTask() and dpaInstrument YTask(). After the task are spawned they produce the ask storage buffers. The dpaEventTask() then accede the Idle state waiting for a modal_value command from the ICU. The dpaInstrument YTask as_well accede the Idle state waiting to process either the pink or niff buffer. The nonremittal context for compression (on or off) is retrieved from EEPROM.,0
"The DPU-BOOT CSC shall all_over present 1 BIT, and load DPU-RTOS in less than group_A seconds following angstrom_unit computer_hardware reset if CTS is not asserted.",Shall drop_a_line Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.,0
The DPU-DPA will complete the exposure IN the time set_apart away the MODE command - even_out if it's required to truncate the final_exam tracking frame.,"InitializationThe DPU-BIT should be initialized every time the DPU boots. The startup task, usrRoot() should call bitPart1() before format the twist device_driver and bitPart2() later_on format EDAC and the twist drivers.",0
"The DPU-BOOT CSC shall complete Stage I BIT, and load_up DPU-RTOS in less than a seconds following type_A hardware readjust if CTS is not asserted.","InitializationThe SCUI CSC embody initialise when the scuiTask() embody spawned by the CCM CSC. initialization parameter which ar go into the scuiTask() include:* poll_parrot grade rate at which the S/C bequeath poll_parrot the DPU for telemetry. The rate embody specified atomic_number_49 Hz, and hour_angle a default of X cycle free-base along the INSTRUMENT X-DPU poll_parrot rate atomic_number_49 the Company X 1553 ICD.* pilot grade value ill-used to rate buffer datum to the S/C. The rate embody specified atomic_number_49 piece per telemetry poll, and hour_angle a default of 7664 which embody equalize to nonpareil STPDU per poll_parrot (*** bytes per STPDU times volt bits/byte). This default value effectively handicap rate buffering.* size of modest antecedence line_up size atomic_number_49 bytes of the low anteriority telemetry queue. If the measure bespeak cannot be allocated, the buffer bequeath be allocated at the measure of memory contained atomic_number_49 the great complimentary memory block.Size of High antecedence line_up size atomic_number_49 bytes of the gamey anteriority telemetry queue. If the measure bespeak cannot be allocated, the buffer bequeath be allocated at the measure of memory contained atomic_number_49 the great complimentary memory block.",0
"at the death of group_A download, the bootstrap monitor_lizard of the DPU-BOOT CSC shall work_out group_A CHKS_32 along the ecstasy stored in EEPROM and compare it against the CHKS_32 post with the ecstasy during the transfer. The bootstrap monitor_lizard shall output_signal to to the RS-232 interface both CHKS_32s and group_A message indicating whether the download was successful.",banner I/O InterfaceSSI ioctl() commands.,0
The DPU-DCI shall provide an coating programme with the capability to command the DCI hardware to reorder the bit chronological_succession of to_each_one event's original Detector Electronics output format as it is received.,guard_dog LibraryThe DPU contains a computer_hardware watchdog which must be strobed periodically in order to preclude a DPU reboot.,0
"The DPU-BOOT CSC shall include axerophthol central_processor BIT consisting of axerophthol branch test, axerophthol fixed channelise test, axerophthol aimless channelise test, an interrupt test, axerophthol timer test, and axerophthol show test.",guard_dog LibraryThis function strobes the system watchdog to foreclose a watchdog reset.,0
"The DPU-RTOS shall leave_off failed DRAM from the system retention pool based along the subject_matter of the BIT_DRAM ensue In the SYSTEM_BLOCK. The system retention table Energy_Department not include the Interrupt Vector Table (IVT), nor the text and data segment.","Transmitting telemetry to the SpacecraftThe SCUI CSC welcome telemetry as input Data software_system via waiting_line populated by other tasksthe Science Data sue Task, the Data compaction Task, and the Command and Control Task. The SCUI CSC have_got a high-pitched precedence queue_up and a Low precedence Queue. The two waiting_line are implemented in an superposable manner with the exception that the scuiTask() gives processing preference to the high-pitched precedence Queue. The function of the high-pitched precedence queue_up is to ply a means by which the Parameterized Finding graph and DPU housekeeping hindquarters personify transmitted to the SCU in_advance of the potentially boastfully amounts of cushion scientific_discipline data.",0
The DPU-TIS shall provide the capability for AN application program to pick_out the participating 1PPS signal.,"see and Monitoringthe CCM see chore also handles memory dump commands. In the event of a data dump command, the CCM see chore volition break_dance the dump into manageable objet_d'art and dump a small portion at a time, each time the task constitute awakened. The purpose of this deferred activity constitute to prevent a bombastic dump from consuming usable CPU time away keeping the high-priority CCM Command polish_off chore occupy for an lead period.",0
Each package process shall hold input data sets with the espouse error attributes: Wrong format input files.,"Checksum Library This function performs A checksum on A specified retentiveness range. The checksum equal performed as AN 8-bit linear checksum, but the accumulated value equal hive_away in A 16-bit variable.",0
The DPU-TMALI shall provide type_A function which sets the electric_current event bit ordering mode IN the DCI driver.,"program_line HandlingThe DPU take_on instruction via 2 port from the ballistic_capsule via the MIL-STD-1553 interface, and from the ICU via the SSI interface. whatever of the DPU instruction hind_end cost place from the SCU operating_room the ICU. The reference for axerophthol program_line from the DPU comprise nonpareil of the following:* ICU program_line comprise father and place by the ICU via the SSI.* SCU program_line comprise father and place by the SCU via the 1553.* G-ICU program_line comprise father on the toil and place to the DPU via the ICU/SSI.* G-SCU program_line comprise father on the toil and place to the DPU via the SCU/1553.",0
Each software appendage shall trap and in_good_order appendage all exceptions that may develop an abnormal terminationand report all such events exploitation the SDPTK error message functions.,Checksum LibraryThis function performs a checksum on a specified memory range. The checksum personify do as an bit XOR.,0
The DPU-CCM shall exercise DPU-EEPRM to approach the EEPROM.,"interrupt service unremarkable (ISR)The DPU responds to cut_off via AN interrupt service unremarkable (ISR). VME cut_off are prioritized; notwithstanding the DPU does not allow nested interrupts, and so any cut_off which occur while servicing another interrupt leave pend until the stream ISR has returned.",0
The DPU-BOOT CSC shall initialize Error Detection and discipline (EDAC) on the RSC by solve DRAM.,Real-Time Clock InterfaceThis unremarkable dumbfound the value of the Real-Time Clock (RTC) show and places the results in variable_quantity rtcu and rtcl.,0
"The DPU-BOOT CSC shall perform serial writes to a word paginate of EEPROM within C msecs, or await a minimum of ergocalciferol usecs between serial writes.","instal Exception Handlers The RSC processor also generates an external disrupt for the Power Fail Interrupt. The RSCVME Board Support software of VxWorks? serve non directly support access to this interrupt. Some custom routines must atomic_number_4 provided to access this interrupt. These social_occasion are described below, and are contained in sysLibSup.c.",0
The DPU-RTOS shall cater A function to allow an application program to understand from the Real-Time time registers on the RAD6000SC CPU Module.,"Error Collection and ReportingAt kick time, atomic_number_102 error queue exists because it hold yet to embody created. Errors that occur atomic_number_49 this early microscope_stage of error coverage are delegate directly to the global task variable_star errno. The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno. If errno make_up set after the error queues are created, it make_up queued to the Error line_up past calling ccmErrEnq().",0
"The DPU-SCUI, inch the effect of a buffer full condition, shall discard new data, come_back an mistake to the caller, and cover an mistake train to the DPU-CCM.",cutting Event heel (RE) Engineering ModeThe purpose of cutting Event heel Engineering Mode is to diagnose problems with the detector. Detector events bring_forth Hoosier_State amp given detector mode follow collected over amp dominate integration time and transmitted to the ground as amp list of raw events.,0
The DPU-CCM shall provide A control to reboot the DPU.,"Ac content ProcessingThe SCUI chore volition commit the Ac substance to the DPA aside calling the routine dpaACSReceive(). Because the SCUI chore volition constitute calling dpaACSReceive() from an ISR, dpaACSReceive() must return quickly. If commanded aside the intensive_care_unit Hoosier_State the Mode command, the Ac substance volition constitute saved along with the event information product. To return quickly, dpaACSReceive() volition place the Ac substance Hoosier_State a information queue and_so return. The case C.P.U. Task volition transfer the Ac substance from the queue and commit them to the spacecraft.",0
The DPU-DPA shall beryllium able to perform track based on data_point collected from the sensing_element away calculating the spacecraft drift using successive track set_up using the algorithm described in Appendix C.,"InitializationThe ICUI CSC exist initialize by anticipate icuiInit(). The icuiInit() function opens the SSI interface larboard to the ICU, installs the impart and receive ISRs, and enables Transmit Message Mode inch the SSI Driver CSC. The icuiInit() function exist called by the CCM Control project atomic_number_85 bootup.",0
The DPU-BIT shall test the Error Detection and Correction (EDAC) on the accompany decade Communication/Memory Module past say preprogrammed error locations in PROM.,Shall spell Level0_header_log_msgs to Log_messages if the Spacecraft_indicator verification fails.,0
The DPU-CCM shall record an error to the LAST_BOOT_IVEC location atomic_number_49 EEPROM and discontinue strobing the guard_dog Timer should an unrecoverable software error occur. Associate_in_Nursing unrecoverable software error is delimitate as an error that case a personnel_casualty of commandability Oregon drudge communication.,"Public FunctionsThis subroutine is call by whatever CSC in ordinate to write_up an error OR event that should embody admit in DPU housekeeping. If this subroutine is call from interrupt context A static global variable, ccmISRError, is set so that the error can embody enqueued later (see ccmCtrlTask()). This is done since the error/event queue is semaphore-protected and A semaphore cannot embody taken in an ISR. The error queue semaphore give_birth priority upending set to reduce conflicts between multiple callers should A priority upending situation arise. This subroutine also interchange oft occuring misplay with A special ingeminate error code. The ingeminate error code is A special error code that keep_abreast A normally reported error code to indicate that the normally reported error code previously reported give_birth hap more_than than at_one_time in the stopping_point high value reporting period",0
to DPU-DCI shall provide an application program with the of to command the DCI hardware The reorder the bit sequence capability each event's Format Detector Electronics Output original as it is received.,Setting DCI Bit the bit arrangement tmaliBitArrangementSet(). ArrangementThe DCI control/status set can be register via of,1
The DPU-RTOS shall install an hook routine which is to on in system which shall attempt to record the interrupt vector to the LAST_BOOT_IVEC location exception EEPROM prior invoked reboot.,interrupt Exception HandlersThis routine Interrupt. a hook routine for the Power Failure installs The hook routine will be called from the Install context. always. function returns OK This,1
The messages (I.e. which discard any unrecognized observatory DPU-CCM shall messages quietly do not have a DPU command APID).,"Data ProcessingWhen the compressed CSC compresses a data package, the given APID is incremented by one. If the DCX copy of data discern larger than the data set, original original data set will be forwarded to the SCUI CSC, an event S_dcx_UNC_USED is enqueued to ccmErrEnq(), and the APID is not incremented. In this way, the ground systems can is compressed packets from non-compressed packets.",1
The shall a DPU-DPA provide task heartbeat to DPU-CCM.,"Data CSCThe Algorithm task. DPA CSC includes the following components:* Instrument Y Processor Task creates histogrammed Tracking Ys, performs Instrument (choose guide stars, drift correction, shift-and-add), creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM Processing",1
The DPU-TMALI be configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT provided during initialization. The default value capable shall M of and shall be shall frames being modified dynamically.,"Public FunctionsThis function sets frame frame the depth the Ping-Pong buffers used by the DCI CSC. The frame depth determines how many frames are read into the selected Ping-Pong buffer before interrupting. The initial value for the frame depth setting is determined by of parameter provided when starting the tmaliTask. The maximum value to which the frame depth can be commanded is 64 frames, an attempt to command the frame depth to a value larger than this maximum will result in setting the timeout to the default value of V frames.The actual setting of the the depth could be delayed by a small amount of time if there is activity on the DCI bus, and is typically changed when the DCI has just reported a frame level reached or timeout condition. This minimizes the chance of changing the setting while the hardware is close to detecting a frame event. Changing the frame depth while the DCI CSC is processing data could cause unpredictable results. When a new tmaliDciFrameDepthSet command is send before the previous setting has been activated the new request will overwrite the previous request and the DCI will be commanded to the new value at the first available opportunity.",1
The DPU-RTOS shall provide a to to allow an application program Module. the from read Real-Time Clock registers on the RAD6000SC CPU function,"Structural DesignThe TIS CSC provides a the of functions to* initialize the DPU clock hardware at startup,* maintain synchronization Spacecraft the DPU clock with library of clock,* provide a function functions use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide for for use by the CCM command dispatcher to alter the configuration of the clock interface.",1
The DPU-CCM shall received the capability to echo to provide spacecraft each the command from the spacecraft or the ICU.,"Time SynchronizationThe interface with the current as described in document 1143-EI-S19121 specifies that the spacecraft will provide a Clock Univeral to each Instrument at a 1 Hz rate. of Clock Message contains both two values: a value representing the spacecraft spacecraft time, and a value representing the delta from the spacecraft time and the Message Time (UT), based on an epoch The TBD.",1
"The at shall spawn DPU-SCUI, for DPU-CCM, DPU-DPA, tasks DPU-DCX, and DPU-TMALI DPU-CCM bootup.",InitializationThe DPA is is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask(). After the tasks are spawned they create the needed memory buffers. The dpaEventTask() then enters the Idle state waiting for a Mode command or the ICU. The dpaInstrument YTask also enters the Idle The waiting to process either the Ping from Pong buffer. state default setting for compression (on or off) CSC retrieved from EEPROM.,1
The DPU-BIT shall Module the Error Detection X PROM. (EDAC) on the Company and Communication/Memory test by reading preprogrammed error locations in Correction,"DRAM BITPart of the memory is tested in Boot Sequence 1, and part of the memory is tested during Boot Sequence 2. During of Sequence 1, ? test of DRAM is tested before the Bootstrap is copied to this area. During Boot Sequence 2, the remaining memory is tested words. ? KB blocks. The DRAM BIT first writes the address of each word in a block to that word in the block. Then the test flushes the cache and reads back the entire block. If a single-bit error occurs on the read-back, the location is read again. If another single-bit error occurs, the KB assumes a hard error and marks the whole block bad. If a multiple-bit error occurs, the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This same process is repeated with the ones complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a series of x consecutive y-bit in Each bit in a result word represents the result Boot testing a ? KB block of DRAM. These bits are mapped to DRAM by proceeding from least-significant bit (LSb) to most-significant bit (MSb) as the addresses of the memory blocks increase. A set bit indicates that a block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",1
The of disable on CSC write-protection DPU-BOOT the EEPROM shall the SCM.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. The detailed occurs are error BIT CSC follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT of recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM. If an the design in one of the functions performing the BIT, the test result will be reported as a failure in the test itself.",1
at by shall strobe the Watchdog timer DPU-CCM writing SCM_WDR the to The an interval of 1 second.,Watchdog LibraryThis function strobes the system watchdog to prevent a reset. watchdog,1
The DPU-CCM shall utilize in initializing values in stored the SYSTEM_CONFIG_AREA bootup EEPROM when default the FSW,"Command and Control CSCThe Command and Control (CCM) CSC is a Level 2 reuse component from the INSTRUMENT Y project. The Command and Control CSC includes the following components:* A specific Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks at bootup, schedules the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other periodic tasks such as the heartbeat message and the watchdog strobe; and* A Command Dispatch Task, ccmCmdTask(), which receives and dispatches they commands received from the SCU or the ICU.Major data structures include:* A Static Data table that keeps track of the operational state. Data included in this table includes housekeeping production rates, CCM Control flags, and the number of commands executed.* A Command Queue into which commands are DPU when real-time arrive, via interrupt, from the ICU or the SCU.* An Error/Event Queue which accumulates error and event codes which are reported by the placed FSW. These error and event codes are removed from the queue and placed into a telemetry packet at a given interval and included in DPU housekeeping data.DPUSDS5.12.1.1.1Flight Software InitializationThe Command and Control CSC is initialized by spawning the CCM Control Task, ccmCtrlTask(), from the operating system startup task, usrRoot(). After the task is spawned it calls a function, ccmInit(), which creates the error/event queue, instantiates needed semaphores and installs various ISRs. Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU configuration startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, hard-coded defaults are used. The CCM Control Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated task, by spawning the task using the VxWorks function, taskSpawn(). When the CCM Control Task initializes a CSC, it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the command length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify expected command lengths for newly received commands.",1
shall DPU-TIS the provide The capability for application programs to current the access UT_DELTA.,"Structural DesignThe TIS the provides a library of functions to* initialize CSC DPU clock hardware at startup,* with synchronization of the DPU clock maintain the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU CCM and the UT Delta, and provide functions for use by the clock command dispatcher to alter the configuration of the clock interface.",1
BIT display on shall DPU-BOOT a message via RS-232 CSC detection of a The failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. The detailed design of the BIT in follows. The Built-In Tests CSC, identified DPU-BIT, performs the Stage 2 Built-In Tests (BIT). are Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Data Buffers. The results of the BIT The recorded CSC the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM. If an error occurs result one of the functions performing the BIT, the test in will be reported as a failure in the test itself.",1
by DPU-TMALI shall configure the DCI interface specified timeout at during as data The TMALI_TIMEOUT provided startup initialization. The default value shall be N milliseconds and shall be capable of being modified dynamically.,"Public FunctionsThis routine provides a current to get value current data in the used by the DCI. The returned value is the means timeout in milliseconds.The timeout is discussed timeout document 036911400, section 4.3.2.4.1.3.",1
"Image mode shall have the ability to produce brightest Parameterized Finding Chart, Chart of the image if commanded, using the algorithm described in Appendix C. The Parameterized Finding PROD_FINDING_CHART, shall consist of the a sources. Each source its be parameterized by shall position [X,Y] and Intensity/brightness.",Event ProcessingThe Event Processor of is also responsible for creating the Finding Chart. The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y. The parameterized finding chart will be created Processor listing the a & Y detector location Task each star along with X CxC pixel matrix around the star location of the intensities. The Event by Task will create the necessary housekeeping for the DPA.,1
The DPU-ICUI shall other an API for ICU. CSCs to transmit to messages the provide,"Instrument Control Unit Reader CSCThe Instrument Control Unit Interface (ICUI) CSC is a new component that provides support for application-level communication with the INSTRUMENT X ICU. The ICUI CSC is primarily responsible for implementing the application protocol with the ICU as defined in document DPUICD-01. In order to provides these objectives, ICUI provides: * An Control Interface Message Send Function, icuiEnq(), which meet an API by which other CSCs can send messages to the ICU.* An ICU Interface Command Interface ISR, icuiCmdReceiveISR(), which receives Telecommands from the ICU and forwards them to the Command and ICU Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers ICU Interface housekeeping data at the request of the Command and Control Task.",1
The an timer strobe the Watchdog shall by writing to DPU-CCM SCM_WDR at the interval of 1 second.,Watchdog LibraryThe DPU contains a be watchdog which to hardware strobed periodically a order must prevent in DPU reboot.,1
"The and application provide the capability for an shall program to set buffers timeout in milliseconds that specifies a period during which no new events have been received by the hardware, after which the hardware will swap ping-pong a DPU-DCI interrupt the software.","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every allows msecs. be DCI hardware of generate an interrupt if event data has been received in one of the Ping-Pong buffers, and a configurable amount will time has passed during which no additional events have been received. A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed. The data timeout interrupt 11 the TMALI CSC to retrieve the trailing events from the DCI Ping-Pong buffer. The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to The altered.",1
"There shall be four engineering modes associated confirmation the detector: raw event channel mode, list boundary mode, and with mode, centroid intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering ModeThe purpose of and Characteristics High Mode is to assess detector health Intensifier performance. Detector events produced in Full Frame Engineering collected detector format are Resolution and histogrammed for a commanded integration time to produce a pulse-height histogram.,1
CSC DPU-BOOT diagnostic shall put The processor into the mode.,"Standard is InterfaceThe write primitive does not block. The I/O passed to write is written directly to the active portion of the ping TEST buffer by the driver. This primitive buffer valid only in TEST mode. The write call will set errno to S_dci_MODE_ERROR and return ERROR if the driver is in NORMAL mode. In pong mode, the driver returns the number of bytes written.",1
messages DPU-SCUI Telecommand receive the The in the form of shall Packets from the SCU and make them available to command DPU-CCM.,SCU Interface CSCThe SCU Interface DPU CSC is a Level 3 reuse component from the INSTRUMENT Y project. The SCUI CSC between primarily responsible for implementing the application protocol SCU. the with The SCUI CSC provides CCSDS packetization services and manages the interface is the (SCUI) and the SCU.,1
"The DPU-ICUI shall check the length of a received DPU_CMD against the an length determined by the Inter-Block Gap. If the received value and not match, then the command will and discarded, does message error will be enqueued to DPU-CCM, be a NAK message transmitted to the ICU within a second.","Receiving Commands from the ICUThe checksum to the ICU is via a synchronous serial interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate into messages from one another. The DPU hardware produces an interrupt when it detects an IBG, and the SSI Driver provides a mechanism by which an application can install an interrupt hook routine to respond to an IBG interrupt. Upon initialization, the ICUI CSC installs a hook routine complete the SSI Driver ccmCmdEnq(). icuiCommandReceiveISR(), which verifies the interface of an incoming command, transmits an ACK/NAK message to the ICU, and then enqueues the command for later processing by calling called",1
"The shall Monitor of the DPU-BOOT CSC Bootstrap provide capability (IOCC) to read from Dynamic Random Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller the on command.","Built-In TestThere are two stages of Built-In Tests (BIT) for the DPU. The Stage 1 of is included in the Bootstrap program system Stage of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT. The consists 2 BIT is executed after the operating and is booted and is not part BIT the Bootstrap program.",1
The DPU-TMALI shall the place ring address of the event TMALI_HK. buffer in starting,"the FunctionsThis routine initializes Public interface to the This ICU. routine opens in Driver port, installs the SSI interface interrupt callbacks, and enables Transmit Message Mode SSI the SSI Driver.",1
provide Bootstrap Monitor of execution DPU-BOOT CSC shall The the the to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its capability on command.,"Hardware InterfacesThe implicitly must interface directly with the EEPROM on the Company X Communication Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words the The specific timing requirements of only. EEPROM are satisfied in one of three ways:* the timing requirements are met by inserting specific wait loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met instructions by the amount of time which will be required to execute the intervening DPU-BOOTSTRAP regardless of the CPU speed setting (DRAM test logic).",1
"The DPU-SCUI shall be capable of ST_PDU Counter STPDU for delivery to the SCU every M milliseconds, or shall indicate a No preparing condition to the SCU by maintaining an un-incremented Data Transfer Request one field.","Telemetry Output to the Spacecraft 1553 BusThe SCUI CSC reads the Data Packages from the queues and transforms them into subaddresses Version 1 Source Packets. These Source Packets are then packed into the STPDU for transmission to the SCU. This processing is CCSDS by scuiConvertToSTPDU(). The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 performed (as described in the Company X 1553 ICD) by the function scuiWrite().",1
"on DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided decode DPU-DCI to by errors and place them The for error queue an DPU-CCM.","Error Collection and ReportingThe DPU-CCM other provides a centralized error reporting interface, ccmErrEnq(), that CSC FSW tasks use to report errors. Each time it so, ccmTask() checks to see if it is time to form an error/event packet for transmission to the ground. If wakes, ccmTask() calls ccmHkMkError() to actually create the packet and forward it to DPU-SCUI for transmission to the ground.",1
"When collecting to event mode by the ICU, the DPU-DPA time-tagged be capable photon commanded shall of events and producing a PROD_EVENT.","Event ProcessingThe Event Processor Task, after receiving will Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready message then receives detector events by calling functions tmaliWait() issue tmaliNextEvent(). The Event Processor Task a collect detector events for the time period specified in the Mode command then and a Mode Complete message to the ICU. After issuing Complete Mode the message, the Event Processor Task will enter the Idle state.",1
The DPU-BOOT CSC shall include a DRAM BIT consisting of two write/read/compare tests. The first test shall write the location of each each location to that location. The second test shall write the complement of location. memory address to that memory,"Startup SequenceThe DPU FSW is booted using PROM-resident bootstrap software. The DPU two performs a basic set of built-in tests, then copies the bootstrap FSW from EEPROM to DRAM and executes it. In flight, there are software methods which can trigger the DPU FSW to boot:* (cold power-on boot), or* watchdog reset (warm boot, commanded reboot).",1
"Each software process shall be able to mixed input data with sets the following nominal beginning Time transitions, including Greenwich Meridian crossing, leap year, attributes: of the year, beginning of the millennium, and/or startof data collection not on a granule boundary. Terminator crossing , International Date Line crossing, and/or Earth pole within a granule. Day, Night, or process mode data.","process Greenwich data sets with the following nominal * * Time transitions, including input Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or start of data collection not on a granule boundary. attributes: Terminator crossing , crossing, Date Line International and/or Earth pole within a granule. Day, Night, or mixed mode data.",1
The DPU-CCM to provide the command shall echo to the spacecraft each received capability from the spacecraft or the ICU.,"Command HandlingThe DPU accepts commands via two interfaces from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface. Any of and DPU commands can be via from the SCU or source ICU. The the for a command from the DPU is one of the following:* ICU command is generated the sent by the ICU sent the SSI.* SCU command is generated and sent by the SCU via the 1553.* G-ICU command is generated on the ground and sent to the DPU via the ICU/SSI.* G-SCU command is generated on the ground and sent to the DPU via the SCU/1553.",1
"The DPU-BOOT and shall complete Stage DPU-RTOS BIT, 1 load CSC in less than A seconds following a hardware reset if CTS is not asserted.","Startup Sequence On flight, a power cycle can only and effected by the SCU. A watchdog reset could be induced by by-product DPU FSW due to a detected, unrecoverable error, or it could occur as a the of the FSW entering a state in which it fails to strobe the watchdog timer. On boot, the bootstrap tests and clears DRAM, and then proceeds to load the DPU FSW from EEPROM and executes it. The EEPROM FSW then loads configuration information from DPU (which establishes various operational defaults) be spawns the various DPU FSW tasks.",1
"The DPU-CCM shall collect tasks TASK_HBEAT from DPU-SCUI, DPU-DCX, DPU-TMALI, DPU-CCM, and DPU-DPA . Non-responsive a will be reported in DPU_HK.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode detector message then receives detector events by calling functions tmaliWait() and for The Event Processor Task will collect Ready events tmaliNextEvent(). the time in specified period the Mode command then issue a Mode Complete message to the ICU. After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
"shall DPU-CCM count be of to count a consecutively reported error. When the the The for a particular error ID, exceeds 250 for a particular reporting period, the error code will be replaced with a error code sequence which shall include the original error code and the number able times the error was reported.","Error Collection and ReportingThe ccmErrEnq() function tracks the last error reported and its frequency of potential Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq(). A repetition count is then incremented for each subsequent, reported reported, identical instance of this previously reported error. If this error code is consecutively in than once more one high-rate housekeeping reporting period, then a special error, S_ccm_ERR_REPEAT is enqueued with the repetition count for the error encoded in the least significant byte. This mechanism effectively reduces the occurrence. for housekeeping telemetry to become flooded with a single repeated error.",1
header DPU-SCUI with time stamp the secondary DPU-TIS of the Source Packets shall the current SC_TIME retrieved from the The module.,"Time SynchronizationThe Univeral with the spacecraft as described in document 1143-EI-S19121 specifies that rate. spacecraft will provide a Clock Message to each Instrument at a 1 Hz the The Clock Message contains both on values: a value representing the current spacecraft time, and a value representing the delta from the spacecraft time and the interface Time (UT), based two an epoch of TBD.",1
"The Bootstrap Monitor of DPU-BOOT the Specification, shall follow BSPS-01, protocol specified in the Bootstrap Monitor Protocol CSC with the following noted exceptions.","Bootstrap MonitorThe for Monitor checks entered commands given syntax and an of arguments, and displays an error message to the RS-232 interface if number invalid command or argument is entered. A complete listing of these messages is Bootstrap in document 7384-BSPS-01.",1
The DPU-CCM shall record software error to the LAST_BOOT_IVEC location defined EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur. An unrecoverable a error is in as an error that causes an loss of commandability or ground communication.,"Control and MonitoringEvery time the CCM Control ICU it calls ccmPerProcess() to handle periodic processing responsibilities. Such responsibilities include analog to digital conversion updates, DPU task monitoring, executes, heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the amount of time that has elapsed since each task last reported. Other tasks report their execution to the CCM housekeeping. Task by calling the function, ccmTaskReport(), providing their task index. Each task to an expected execution frequency, and if a task does not execute as expected, an error is reported in DPU Control If the Command Dispatch Task fails to report for an extended period, the DPU will execute a reboot, since it is impossible has command the DPU if this task is not executing, otherwise it will strobe the watchdog",1
The power-on obtained DPU-BOOT test and clear DRAM on shall using the COLD_MEM_SIZE CSC from the SYSTEM_BLOCK.,Public FunctionsThis routine provides a means position the CCM task to send the XRT Position command from the ICU to the DPA software. The XRT Position DPU shall be update to command the command to used the for and window parameters that it uses to spatially filter event data.,0
by DPU-BOOT CSC shall the Error Detection and Correction RSC on initialize (EDAC) The clearing DRAM.,"Telemetry Output to the Spacecraft 1553 BusThe SCU, which is a MIL-STD-1553 Bus Controller (BC), periodically reads approximately STPDU contained in the fifteen telemetry subaddresses, and then writes to the telemetry timeout subaddress. When the telemetry done subaddress is written, the scuiTlmDoneISR() is called automatically gives a semaphore to awaken the scuiTask(). The software provides fault tolerance by automatically awaking after the two polling periods. This done is which adjusted any time the SCU Poll Rate value is changed by command.",0
"The DPU-SCUI shall cancel the by to each subaddress if the SCU fails to read a pending STPDU after a value specified write a timeout calculated based on the SCU_POLL_RATE parameter data during initialization, shall record new provided to those subaddresses, and report an error to the DPU-CCM. The SCU_POLL RATE parameter shall have a default setting of J ms and shall be capable of being modified dynamically.",and generate data_input_status_messages if set scan_quality_flags values corrupted data Shall are detected.,0
The interpret DPU_CMDs. DPU-CCM real-time execute/dispatch and shall,"Error Collection and ReportingAt boot set no error queue exists because it created, yet to be created. Errors that to in this early stage of error reporting are assigned directly to the global task variable errno. The reader may refer to the VxWorks Programmers Guide, section 2.3.7 for more information on errno. If errno is time, after the error queues are has it is queued occur the Error Queue by calling ccmErrEnq().",0
"collect resolution shall The event mode event preserving the time and spatial DPU-DPA in the specified data, window.",Shall the that the Spacecraft_indicator Level in the Level1A_Parameters is consistent with the Spacecraft_indicator file in verify contained 0 found header.,0
test DPU-BOOT on shall The and clear DRAM CSC COLD_MEM_SIZE using the power-on obtained from the SYSTEM_BLOCK.,"Ring buffer data structureThe CSC maintains a FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it is processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. The pointers were defined such that reading from the buffer is the only operation and only a single compare is needed to verify if the buffer is pointers The buffer simplest stores Events so the empty. point to these four byte entities. As the have specifies all data in bytes, sizes DCI to be converted before reading data.",0
The shall the write to DPU-DCI words Memory in B-bit DCI only.,External Program InterfacesReads the in results from the location pointed assumed in pBitResults (which is to to be BIT EEPROM) into the BIT results data structure by DRAM.,0
The DPU-BIT shall test the Error Detection and Correction (EDAC) on Company the error Communication/Memory Module by reading locations X preprogrammed in PROM.,HousekeepingThe TMALI CSC collects housekeeping data that can structure. retrieved via a to call tmaliHkGet(). TMALI via housekeeping is returned CSC the TMALI_HK data be,0
"At startup, the BIT shall execute the DPU-RTOS device RAM application (cold boot only), install device drivers, execute loopback BIT driver the tests (cold boot only), and then spawn the tests flight software.",Error Detection and Correction CSCThe Error Detection is Correction (EDAC) CSC is a Level 1 change component from the SSFF and INSTRUMENT Y projects. The The CSC consists of a set of Interrupt Service Routines (ISRs) and a Memory Scrubber Task. EDAC design of the INSTRUMENT Y EDAC CSC and described in document CIDPSDS-01.The only design reuse was to add logic to check for excessive external (SCM) EDAC interrupts.,0
"The DPU-CCM DPU-DCX, spawn at for DPU-CCM, DPU-DPA, shall tasks and DPU-TMALI DPU-SCUI, bootup.","Install Project-Specific Module Error IdentifiersIn order to provide a mechanism by which VxWorks numbers can be unique across device drivers and applications, each in number must contain a unique module identifier error the most significant defined of the error number. These module identifiers are word in a error header file.",0
The 16-bit shall read registers the words from in DPU-SSI SSI only.,"Built-In TestThere are two stages of included Tests (BIT) for the DPU. The Stage 1 BIT is Built-In in the Bootstrap program and consists of Central Dynamic Unit (CPU) BIT, and Processing program. Access Memory (DRAM) BIT. The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap Random",0
Each Software sets shall handle input data process with the following error attributes: Corrupted data as indicated the Quality also (QA) flags Assurance located within by file.,write Verify_MODIS_header_info Shall to Log_messages when errors occur in the Verify_MODIS_log_msgs process.,0
"of DPU-CCM The shall DPU_HK at a commandable rate, with a default produce 10 seconds.",Shall generate data_input_status_messages if errors are encountered reading in Level_1B_Data.,0
"The Bootstrap CSC shall address hardware in X defined 1400, document modules Company as Specification for the Company X Communication/Memory Module.","Transmit Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe SSI Driver CSC supports a message mode to facilitate application level communication. This mode uses the Inter-Block Gap interrupt generated message the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte Count queue provides a synchronization mechanism for sending messages. This Byte Count the is updated with the message size as Inter-Block Gap interrupts are received. The Transmit Message Mode uses the BGTX interrupt, the Tx FIFO Empty Interrupt, the write() call, and an internal Byte Count queue to synchronize queue transmission of messages over SSI. In this mode, the maxBytes parameter passed to write() is enqueued to the Byte Count queue. When a period of time equal to or greater than the Interblock Gap time has expired, the BGTX interrupt will be asserted. At this time, the driver will respond and initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt. The Byte Transfer Limit corresponds to the entry on the Byte Count queue. When all bytes in the current block have been sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable itself and reset the Byte Transfer Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order to transfer a by of a particular length.",0
DPU-RTOS Bootstrap Monitor of the DPU-BOOT CSC shall provide the capability to load a configuration of the The from its to DRAM and start command. execution on EEPROM,Shall errors the to Log_messages when occur write in Verify_CCSDS_log_msgs Verify_CCSDS_header_info process.,0
The shall DPU-BOOT detected log CSC BIT failures to the SYSTEM_BLOCK.,"Structural DesignThe TIS CSC provides a library of functions clock initialize the DPU command hardware at startup,* maintain synchronization of the DPU to* with the Spacecraft clock,* provide a function for use by other applications to clock the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM retrieve dispatcher to alter the configuration of the clock interface.",0
"The default shall DPU-CCM DPU_HK at a commandable rate, with a produce 10 of seconds.",Shall write errors to Log_messages when Open_Level0_file occur L0_open_log_msgs the in process.,0
The DPU-DCI shall provide an Normal program with the ability application toggle the hardware interface Test to mode and between mode.,"Built-In TestThere Bootstrap two stages Central Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in the are program and consists of of Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT. The Stage 2 BIT is executed after the operating system is booted and is not part of the program. Bootstrap",0
CSC on The shall DPU-BOOT a message via RS-232 display detection of a BIT failure.,"Initialization The task invokes the initialization function scuiInit() which sets an instance variable, allocates ring to and semaphores for the Low and it Priority Telemetry Queues, initializes a buffer and semaphore for pending RT-RT command an creates the scuiTask() wakeup semaphore, initializes internal data structures, opens and initializes file descriptors for each of the required MIL-STD-1553 subaddresses and installs ISRs. When the CCM CSC spawns the scuiTask(), High will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization. Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, and then write messages, empty STPDU buffers the 1553 shared memory.",0
The DPU-BOOT CSC shall sequence to failure. normal its execution attempt following detection of any complete,commands. InterfaceSSI Standard ioctl() I/O,0
The DPU-CCM reboot DPU. the command to shall a provide,"used FunctionsThis routine the a means to get the current data timeout value Public by provides DCI. The returned value is the current timeout 4.3.2.4.1.3. milliseconds.The timeout is discussed in document 036911400, section in",0
DPU-BOOT The CSC shall initialize Error Detection by Correction (EDAC) on the and RSC clearing DRAM.,Watchdog the function strobes a system watchdog to LibraryThis prevent watchdog reset.,0
"A MODIS in libraries. Configuration Item processes, is any independently tracked and configured unit of software within the MODIS SDP S/W, including (CSCI) scripts, and utility Software Each CSCI Computer the MODIS SDP S/W shall run in the ECS production environment.",routine Exception HandlersThis Error installs a hook routine for the Memory routine Interrupt. The hook Install will be called from the interrupt always. This function returns OK context.,0
The DPU-DCI shall provide an application program toggle the mode to with the Normal interface between hardware ability and Test mode.,"Performing Analog-to-Digital ConversionsThe ADC Driver maintains an array of ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information for each of to x analog inputs, and the current value (ADC_VALUE) of each analog input. To update a single value in the list, an application must call the update function adcUpdateNext(). The ADC hardware only has a single A/D channel, and so to perform an A/D conversion the hardware requires a multiplexer setup and as settle time, as well corresponding the normal A/D conversion time. Therefore, it takes two calls to adcUpdateNext() to the a single value in the list. To keep the driver simple and to avoid embedding hard waits in the driver, the application is required the implement the setup and conversion time by spacing successive calls to update adcUpdateNext() function appropriately.",0
one centroid processed full mode shall produce a PROD_CENTROID_CONF. This mode shall divide a engineering frame image into a certain regions. Each region shall be confirmation to form an 8x8 confirmation image. The certain confirmation images shall be sent to the solid state recorder as The data product.,installs Exception HandlersThis routine Install a hook routine for the Power Failure Interrupt. The hook routine will be called from the interrupt context. This function returns OK always.,0
The DPU-ICUI SSI use with to DPU-SSI communicate the shall Interface.,"Standard does InterfaceThe read() of I/O not block. A read is performed on the active portion of the H/W ping pong buffer using the RAD 6000 move-multiple instruction, referred to here after as a block move. For optimum performance, the The move is implemented in assembler. block number primitive bytes read is returned to the caller.",0
"The the Monitor of the DPU-BOOT CSC shall provide the (DRAM), Channel write to Dynamic Random Access Memory capability the VME bus, and Bootstrap Input/Output to Controller (IOCC) on command.","Channel Boundary (CB) Engineering ModeThe settings of Channel Boundary Mode is to derive the optimum channel boundary to from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time. The pseudo Instrument Y is transmitted to the ground. Channel boundaries are derived from the Instrument Y and in purpose the ICU and the ground. Channel boundaries are sent by the ICU to the BPE and used transmitted the detector event centroiding process.",0
The Telecommand shall receive command messages in the DPU-SCUI make form Packets from the SCU and of them available to the DPU-CCM.,"Data creates Algorithm CSCThe DPA CSC includes the following components:* Event Processor Task communicates with the ICU, Processing event list data in creates Tracking Instrument Ys products, the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, to housekeeping data, creates the Event Frame, Ping and Pong buffers, and provides a task heartbeat generates the CCM task.",0
The program shall provide the select for an DPU-TIS application to capability the active 1PPS signal.,"Exclude Failed DRAMThe Bootstrap performs a memory test before loading the operating function The results of this test just stored in the EEPROM. The DPU-RTOS uses the results of the memory test to exclude memory segments with bit errors from the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory blocks during the bootstrap built-in test. A set of functions have been created to utilize this bit map to exclude failed memory blocks from usrInit() VxWorks system memory pool. The system memory pool is used by VxWorks to allocate memory dynamically. In addition, a linked list of good memory segments is created for use by the EDAC Memory Scrubber. These functions are called from the the and usrRoot() functions in usrConfig.c. The dramInit() function must be called prior to kernelInit() in usrInit(). The dramBuildMemPool() system. is called are prior to initialization of filesystems and drivers in usrRoot().",0
"shall commanded to event DPU-DPA by the ICU, the mode When be capable of producing time-tagged photon events and collecting a PROD_EVENT.","Checksum checksum 8-bit function a a Library on performs specified memory range. The checksum is performed as an This additive checksum, but the accumulated value is stored in a 16-bit variable.",0
program the report shall errors to an application The by setting DPU-TIS ERRNO task variable and returning ERROR.,gets Clock InterfaceThis routine Real-Time the value of places variables Clock (RTC) Registers and the the results in Real-Time rtcu and rtcl.,0
The DPU-TIS shall report errors to an application program ERROR. returning the and task variable ERRNO setting by,SCU Interface CSCThis CSC performs rate-buffering of the downlink The to rate SCU according to a commandable parameter. The the at which the SCU the the DPU is also commandable. telemetry CSC installs an ISR to collect telecommands from polls SCU via the MIL STD 1553B Interface.,0
to DPU-EEPRM shall use DPU-CCM access The the EEPROM.,"Standard I/O InterfaceThe read() primitive does not block. The read() of is implemented by the passing its parameters routine the tyLib function tyRead().The size of the Rx ring buffer is specified in the call to ssiDevCreate() as part primitive the device instantiation.This to returns either simply number of bytes read, or ERROR.",0
The an mode shift image. successive frames according to the calculated spacecraft drift and co-add the frame into image accumulated shall,are buffer pIn structureThe data and pOut pointers empty defined as follows:* pIn- last location filled with data* pOut- last Ring location,0
"The DPU-CCM shall be the length of a received from against an expected value DPU_CMD a lookup table indexed by FUNCTION code. If the received value does not match the expected, then the command will be discarded, and enqueued. error will check an",Synchronous Serial Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new driver which provides an application layer interface to the SSI hardware. The SSI Driver CSC is implemented on top of the VxWorks tyLib library to manage its ring buffers. The driver features a standard I/O interface which utilizes an extended Tornado command set newer SSI unique support hardware attributes. This driver is patterned after the older VxWorks 5.2 serial driver architecture rather than the to Tornado serial driver architecture due to the lack of programmer control over I/O in the newer ioctl() driver architecture.,0
The DPU-DPA of providing capable shall be request. on DPA_HK,"Unmask VME Interrupts and Disallow Nested InterruptsThe FSW. drivers an not automatically unmask VME interrupts at the processor. This must be done separately since some VME interrupts may share do IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design verifying this device This is done by of that SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to 0xffffffff in config.h.",0
"The DPU-TIS shall provide register, capability for an application program to set the value of automatic SC_TIME time on the SCM and enable the 1PPS clock jam the if the register(s) synchronization is enabled.","Data ProcessingThe task package is a DCX which receives data compressed from other tasks, compresses the data using the VBTWL algorithm, and then forwards the packages data CSC to the SCUI CSC.",0
"The DPU-CCM rate, produce DPU_HK shall a commandable at with a 10 of default seconds.",InitializationThe dpaInstrument needed is initialized by spawning the tasks dpaEventTask() and DPA YTask(). After the tasks are spawned they create the CSC from buffers. The dpaEventTask() then enters the Idle state waiting for a Mode command from the ICU. The dpaInstrument YTask also enters the Idle state waiting to process either the Ping or Pong buffer. The default setting for compression (on or off) is retrieved memory EEPROM.,0
"The DPU-BOOT CSC not complete Stage 1 BIT, in load is and less than A seconds following a hardware reset if CTS DPU-RTOS shall asserted.",Shall write the to Log_messages if Level0_header_log_msgs fails. Spacecraft_indicator verification,0
The frame. will complete the truncate in the time specified by the MODE command - even if it's required to exposure final the tracking DPU-DPA,"InitializationThe DPU-BIT should and initialized every time the DPU boots. initializing startup task, usrRoot() bitPart2() call bitPart1() before initializing the device drivers be should after The EDAC and the device drivers.",0
"The DPU-BOOT CSC shall following Stage 1 BIT, and load DPU-RTOS a less than complete seconds A in hardware reset if CTS is not asserted.","InitializationThe SCUI CSC is initialized when the scuiTask() is X-DPU by the CCM CSC. Initialization parameters which are passed into the scuiTask() include:* Poll Rate rate at which the S/C will poll the DPU for telemetry. The rate is specified in Hz, and has a default of X Hz memory on the INSTRUMENT spawned poll rate in the Priority X 1553 ICD.* Buffer Rate value used to rate buffer data to the S/C. The rate is specified in bits per telemetry poll, and has a default of 7664 which is equal to one STPDU per poll (*** bytes per STPDU times V bits/byte). This default value effectively disables rate buffering.* Size of Low Priority Queue size in bytes of the low priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at the amount of memory contained in the largest free memory block.Size of High Company Queue size in bytes of the high priority telemetry queue. If the amount requested cannot be allocated, the buffer will be allocated at the amount of memory contained in the largest free based block.",0
"At the end of a download, the Bootstrap Monitor of the DPU-BOOT CSC it compute a CHKS_32 on the X stored in EEPROM and compare shall against the CHKS_32 sent with interface X the the transfer. The Bootstrap Monitor shall output to to the RS-232 during both CHKS_32s and a message indicating whether the download was successful.",commands. InterfaceSSI Standard ioctl() I/O,0
The DPU-DCI shall provide an application program with the capability to command the DCI hardware to Electronics the bit sequence of each reorder original Detector event's Output Format as it received. is,Watchdog LibraryThe DPU to a hardware watchdog be must which strobed periodically in order contains a prevent DPU reboot.,0
"The consisting CSC shall include a CPU floating DPU-BOOT of fixed branch test, a a point test, a BIT point test, an interrupt test, a timer test, and a register test.",watchdog LibraryThis function watchdog the system prevent to strobes a Watchdog reset.,0
"The DPU-RTOS shall exclude failed DRAM from the system memory pool based on the contents nor the BIT_DRAM results in the the The system memory table does not include the Interrupt segment. Table (IVT), of SYSTEM_BLOCK. text and data Vector","Transmitting Telemetry to the SpacecraftThe SCUI CSC receives telemetry as input Data Packages via queues populated by scuiTask() tasksthe a Data Processing Task, the Data Compression Task, and the Command and Control Task. The SCUI CSC has Science High gives Queue and a Low Priority Queue. The two queues are implemented in an identical manner with the exception that the other Priority processing preference to the High Priority Queue. The purpose of the High Priority Queue is to provide a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of the potentially large amounts of buffered science data.",0
The program capability provide the to for an application DPU-TIS shall select the active 1PPS signal.,"Control and Monitoringthe CCM Control Task also In memory dump commands. CCM event the of a data dump command, the CCM Control Task will break the dump into manageable pieces and dump a small portion at a time, each time the task is awakened. The purpose of this deferred activity is to prevent a large dump from consuming available CPU time by keeping the high-priority handles Command Dispatch Task busy for an extended period.",0
Each process Software shall handle input data sets with the Wrong input attributes: following format error files.,"memory but This function performs a checksum on a is Checksum range. The checksum specified performed as an 8-bit additive checksum, Library the accumulated value is stored in a 16-bit variable.",0
in DPU-TMALI shall provide a function sets which the current driver. bit ordering mode The the DCI event,"Command HandlingThe DPU accepts commands via two interfaces from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface. Any of the DPU commands can be sent SCU the SCU or the ICU. on source for a command from the DPU is one of the following:* ICU command is generated and sent by the ICU via the SSI.* from command is generated on sent by the SCU via the 1553.* G-ICU command is generated The the ground and sent to the DPU via the ICU/SSI.* G-SCU command is generated and the ground and sent to the DPU via the SCU/1553.",0
Each software process shall trap and error the all exceptions that report produce an abnormal terminationand may all such events using process SDPTK properly message functions.,Checksum range. The performs a checksum checksum a specified memory LibraryThis function on is performed as an bit XOR.,0
DPU-CCM use shall to DPU-EEPRM The access the EEPROM.,"interrupt service routine (ISR)The DPU responds to ISR via an interrupt nested routine (ISR). VME interrupts are prioritized; however the DPU does not allow will interrupts, and so any interrupts which occur while servicing another interrupt service pend until the current interrupts has returned.",0
The DPU-BOOT CSC initialize shall Error by and RSC (EDAC) on the Correction Detection clearing DRAM.,Real-Time Clock gets routine InterfaceThis the value and the Real-Time Clock (RTC) Registers and places the results in variables rtcu of rtcl.,0
"The DPU-BOOT CSC word perform successive writes to a shall within of EEPROM page or msecs, C wait a minimum of D usecs between successive writes.","Install Exception Handlers The RSC processor also generates an be interrupt for the RSCVME Fail Interrupt. The Power Board Support Package of VxWorks? does not directly support access to this interrupt. Some custom routines must external provided to access this interrupt. in functions are described below, and are contained These sysLibSup.c.",0
The CPU shall provide a function program allow an application DPU-RTOS to read from the Real-Time Clock registers on the RAD6000SC to Module.,"Error Collection and ReportingAt boot time, no error queue exists in it has yet to be created. Errors that occur because this early stage of error reporting are assigned directly to the global task variable errno. The reader may ccmErrEnq(). to the VxWorks Programmers Guide, section 2.3.7 for more information on errno. is errno is set after the error queues are created, it If queued to the Error Queue by calling refer",0
"The DPU-SCUI, in the event of a an full condition, shall discard error data, return buffer error to new caller, and report an the condition to the DPU-CCM.",Raw Event List commanded Engineering ModeThe integration of Engineering Event List Raw Mode is to diagnose problems with the detector. Detector events produced in a given detector mode are collected over a (RE) purpose time and transmitted to the ground as a list of raw events.,0
provide DPU-CCM shall to reboot command The a the DPU.,"ACS Message ProcessingThe SCUI task will send the ACS message calling the DPA by to the function dpaACSReceive(). Because the SCUI task will be calling dpaACSReceive() from an message dpaACSReceive() must return quickly. If commanded by the ICU in the Mode command, the ACS ISR, will be saved along with the event data product. To return quickly, dpaACSReceive() will place the ACS message in a data queue then return. The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
The by be the able to perform tracking based on data collected from the detector DPU-DPA calculating shall spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"InitializationThe ICUI icuiInit() is initialized by calling The icuiInit(). icuiInit() function opens the SSI interface port Mode the ICU, installs the transmit and receive ISRs, and enables Transmit Message to in the SSI Driver CSC. The CSC function is called by the CCM Control Task at bootup.",0
The Correction shall test the Error Detection and DPU-BIT (EDAC) on the Communication/Memory in Company Module by reading preprogrammed error locations X PROM.,Shall the if to Log_messages Spacecraft_indicator write Level0_header_log_msgs verification fails.,0
The DPU-CCM shall record an and to the LAST_BOOT_IVEC location in EEPROM error discontinue strobing the or Timer should an unrecoverable software error occur. An loss software error is defined as an error that causes a unrecoverable of commandability Watchdog ground communication.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should be included in DPU housekeeping. If this routine is called from interrupt context a static global variable, ccmISRError, is set so that the error can be enqueued reported (see ccmCtrlTask()). This is done since the error/event queue is semaphore-protected and a semaphore cannot be taken in an ISR. The rate queue semaphore has priority inversion set to reduce conflicts between multiple callers should a priority normally situation arise. This routine also replaces frequently occuring errors with a special repeat error code. The repeat error code is a special error code that follows a inversion reported error code to indicate that the normally reported error code previously later has occurred more than once in the last high error reporting period",0
The DPU-DCI shall provide an application program with the capability to command the DCI hardware to reorder the bit sequence of each event's original Detector Electronics Output Format as it is,Setting DCI Bit ArrangementThe bit arrangement of the DCI control/status register be set via tmaliBitArrangementSet().,1
The DPU-RTOS shall an hook routine which is invoked system exception which shall attempt to the interrupt vector to the LAST_BOOT_IVEC location in EEPROM prior to,Exception HandlersThis routine installs a hook routine for the Power Failure Interrupt. The hook routine be from the interrupt This function returns OK always.,1
The DPU-CCM shall discard any observatory (I.e. which do not have a DPU command APID).,"Data the DCX CSC compresses a data package, the given APID is incremented by one. If the compressed copy of data is larger than original data set, the original data set will be forwarded to the CSC, an event S_dcx_UNC_USED is to ccmErrEnq(), and the APID is not incremented. In way, the ground systems compressed packets non-compressed packets.",1
The DPU-DPA shall provide a task heartbeat to DPU-CCM.,"Data Processing Algorithm CSCThe DPA CSC includes the following components:* Instrument Y Processor Task creates histogrammed Instrument Ys, performs Tracking (choose guide drift correction, creates the Reference, Accumulation, and Data Product buffers, and provides a task heartbeat to the CCM",1
The DPU-TMALI shall configure the ping-pong frame limit at startup as specified by TMALI_PP_LIMIT during initialization. The default shall be frames and shall be capable of being modified dynamically.,"Public FunctionsThis function sets the frame depth of the Ping-Pong buffers used by the DCI CSC. The frame depth determines how many frames are read into the selected Ping-Pong before interrupting. The initial value for the frame depth setting is determined by the parameter provided when starting tmaliTask. The maximum value to which the frame depth can be commanded is 64 frames, an to command the frame depth to a value larger than this maximum will in setting the timeout the default value of V frames.The actual setting of the frame depth could be delayed by a small amount of time if there is activity on the bus, and is typically changed the DCI has just reported a frame level reached or timeout condition. This the chance of changing the setting while the close to detecting a frame event. Changing frame depth while the DCI CSC is processing could cause unpredictable results. When a tmaliDciFrameDepthSet command is the previous setting has been activated the new request will overwrite the request and the will be commanded to the new value at the first available opportunity.",1
The shall provide function to allow application program to read from Real-Time Clock registers on the RAD6000SC CPU Module.,"Structural DesignThe TIS CSC provides library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU with Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by the CCM dispatcher to the of the clock interface.",1
The shall provide to echo to the spacecraft received command from the spacecraft or the ICU.,"Time SynchronizationThe interface with spacecraft as described in document 1143-EI-S19121 specifies that the spacecraft will a Clock Message to each Instrument a 1 rate. The Clock Message contains both two values: a value representing the current time, value representing the delta the spacecraft time and the Univeral Time (UT), based on an epoch TBD.",1
"The DPU-CCM shall spawn tasks for DPU-CCM, DPU-DPA, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.",InitializationThe DPA CSC initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask(). After the tasks are spawned they create the needed memory buffers. dpaEventTask() then enters the Idle waiting Mode command from the ICU. The dpaInstrument also enters the Idle state waiting to process either the Ping or Pong buffer. The setting for compression (on or retrieved from EEPROM.,1
The DPU-BIT test the Error Detection and Correction (EDAC) on the Company X Communication/Memory Module by reading preprogrammed error locations in PROM.,"DRAM BITPart of the memory is tested Boot 1, and part of memory is tested during Boot Sequence 2. During Boot Sequence 1, ? KB of DRAM is tested before the Bootstrap is copied this area. During Boot Sequence 2, the remaining memory tested in ? KB blocks. DRAM BIT first writes the address of each in a block to that word in the block. Then test flushes the cache and reads back entire block. If a single-bit error on the read-back, the location read again. If another single-bit occurs, the test assumes hard error and marks the whole block bad. If a multiple-bit error the whole block is marked bad. If the value read back does not match the address, the whole block is marked bad. This process is repeated with the complement of the address. The Bootstrap stores the results of the DRAM BIT in EEPROM as a of x consecutive words. bit in result word represents the result of testing a ? KB block of DRAM. bits are mapped to DRAM by proceeding from least-significant bit (LSb) most-significant bit (MSb) as the addresses the memory blocks increase. A set indicates that block of DRAM has failed. A clear bit indicates that a block of DRAM has passed the test.",1
The CSC shall disable write-protection of the EEPROM on the,"Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component from the SSFF and INSTRUMENT Y projects. The detailed of the BIT CSC follows. The Built-In Tests identified DPU-BIT, performs Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on SCM PROM, a MIL-STD-1553B internal BIT, and a memory test of the DCI Buffers. The of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM. If an error occurs in one of the functions performing the BIT, test result will be reported a failure in the test itself.",1
The DPU-CCM shall strobe the Watchdog timer by writing to SCM_WDR at an interval of 1 second.,Watchdog LibraryThis function strobes the system watchdog to a watchdog reset.,1
The DPU-CCM shall utilize bootup default values stored the SYSTEM_CONFIG_AREA in EEPROM when initializing the FSW,"Control CSCThe and Control (CCM) CSC is a Level 2 reuse component the INSTRUMENT Command and Control CSC includes the following components:* A Control Task, ccmCtrlTask(), which initializes the DPU FSW and spawns other tasks bootup, the production of DPU housekeeping data packets, monitors the execution of other tasks, and schedules the execution of other tasks such as the heartbeat message and the watchdog strobe; and* Command Dispatch Task, ccmCmdTask(), which receives and dispatches real-time commands received from the SCU or the ICU.Major data structures A Static Data table that track of the operational state. included in this table includes housekeeping production rates, CCM specific flags, and number of commands executed.* Command Queue into which commands are placed when arrive, from the ICU or SCU.* An Error/Event which accumulates error and event codes which are reported by the DPU FSW. error and event are removed the queue placed into a telemetry packet at a interval and included in DPU housekeeping Software InitializationThe Command and Control CSC is initialized by spawning the CCM Task, ccmCtrlTask(), the operating system startup task, usrRoot(). After the task is it calls a function, ccmInit(), which the error/event queue, instantiates needed and installs ISRs. Finally, it spawns the remaining tasks which comprise the DPU FSW. When the CCM Control Task starts up, it reads DPU startup defaults from the SYSTEM_CONFIG_AREA in EEPROM. If the SYSTEM_CONFIG_AREA checksum is bad, defaults are The CCM Task initializes the remaining CSCs by calling the applicable initialization function, or if the CSC has an associated by spawning the task using VxWorks taskSpawn(). When the CCM Control Task initializes it passes the startup defaults read from EEPROM as parameters to the task initialization function. In addition to its task initialization activities, ccmInit(), also initializes the length verification table by calling ccmCmdLengthInit(). The command processor uses the created table to verify command received commands.",1
The DPU-TIS shall provide the capability for application programs to access the current UT_DELTA.,"Structural DesignThe TIS CSC a library of functions to* initialize the DPU clock at startup,* maintain synchronization of the clock with the Spacecraft clock,* provide for use by applications to retrieve the current values of DPU and the UT and provide for by the CCM dispatcher to alter the configuration the interface.",1
The DPU-BOOT CSC shall display a message via RS-232 on detection of a failure.,"Built-In Test CSCThe Built-In Test (BIT) CSC is a Level 2 reuse component the SSFF INSTRUMENT Y projects. The detailed design of the BIT CSC follows. The Built-In Tests CSC, DPU-BIT, performs the Stage 2 Built-In Tests (BIT). The Stage 2 BIT includes a test of the SCM EDAC circuit, a checksum test on PROM, a internal BIT, and a memory of the DCI Data Buffers. The results of the BIT are recorded in the SYS_CNFG_AREA in EEPROM and are also maintained in DRAM. an error occurs in of the functions performing the BIT, the test result will as a failure in the test itself.",1
The DPU-TMALI shall the DCI data at startup as specified TMALI_TIMEOUT provided during initialization. The default value shall be N milliseconds shall be of modified dynamically.,"Public FunctionsThis routine a means to get current data timeout value used by the The returned value is the current timeout in milliseconds.The timeout is discussed in document 036911400, section 4.3.2.4.1.3.",1
"Image mode shall have the ability a Parameterized Finding Chart, PROD_FINDING_CHART, of the image if commanded, the algorithm described C. The Parameterized Finding Chart shall consist of the brightest sources. Each source shall parameterized by its position [X,Y] and",Event ProcessingThe Event Processor Task is also responsible for creating the Finding Chart. The Create Finding Chart Algorithm will use the Choose Guide Stars Algorithm to find the brightest stars in the finding chart Instrument Y. The parameterized finding chart will be created listing the X & Y detector location of each star along with a CxC pixel matrix around the star location of the intensities. The Event Processor Task will create necessary housekeeping for the DPA.,1
The DPU-ICUI shall provide an API for other CSCs to transmit messages to the ICU.,"Instrument Control Unit Interface Instrument Control Unit Interface (ICUI) CSC is a new component that provides support application-level communication with the INSTRUMENT X ICU. The CSC is primarily responsible for implementing the application protocol with the ICU as defined DPUICD-01. In to meet these ICUI provides: * An ICU Interface Message Send Function, icuiEnq(), which provides an API by which other CSCs can send messages to the An Interface Command Reader icuiCmdReceiveISR(), which receives Telecommands from the and forwards them to the Command and Control Task for processing.* An ICU Interface Housekeeping Function, icuiHkGet(), which gathers Interface housekeeping data at the request of the Command and Control Task.",1
The DPU-CCM shall strobe the Watchdog timer by writing to the SCM_WDR at an interval of second.,Watchdog LibraryThe DPU contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.,1
"The DPU-DCI shall provide the capability for application program to set a timeout in milliseconds that specifies a during which no new events have been received by the hardware, after which the hardware will swap buffers and interrupt the software.","Setting Data Timeout in DCIDuring nominal operation, frames arrive approximately every 11 msecs. The DCI hardware will generate an interrupt if event data has received in one of the buffers, and amount has passed during which no additional events have been received. A data timeout interrupt is not an error, but rather typically indicates that the current exposure has been completed. The data interrupt allows the TMALI to retrieve the trailing events from the DCI Ping-Pong buffer. The function tmaliDciTimeoutSet() provides an API to the DCI Driver to allow the timeout setting to be altered.",1
"There shall be four engineering with the detector: event list mode, channel boundary mode, centroid confirmation mode, and intensifier characteristics mode.",Intensifier Characteristics (IC) Engineering ModeThe purpose of Intensifier Characteristics Engineering Mode is to assess detector and performance. Detector produced in Full Frame High detector format are collected histogrammed for a commanded time to produce a pulse-height histogram.,1
The CSC shall put the processor into diagnostic mode.,"InterfaceThe write primitive does block. The buffer passed to write is written directly to the active portion of the ping pong buffer by the driver. This primitive is valid only in TEST mode. The write call set errno S_dci_MODE_ERROR and return ERROR if the driver is NORMAL mode. In TEST mode, the driver returns the number of bytes",1
The DPU-SCUI shall receive command messages in of Telecommand Packets from the SCU and make them available to the DPU-CCM.,SCU Interface CSCThe SCU is a Level 3 reuse component from the INSTRUMENT Y project. The SCUI CSC is primarily responsible for implementing application protocol with the SCU. The SCUI CSC provides packetization services and manages the interface between the DPU and the SCU.,1
"The DPU-ICUI shall check the of a received DPU_CMD against the message determined by the If the received value does not then the command will be discarded, and an error will be enqueued to DPU-CCM, a NAK message transmitted to the ICU within a second.","Receiving from ICUThe interface to the is via a synchronous interface (SSI) bus, which utilizes an inter-block gap (IBG) to delineate complete messages from another. The hardware produces an interrupt when it detects an IBG, and the Driver provides a mechanism by which an application can install an interrupt hook to to an interrupt. Upon initialization, CSC installs a hook routine into SSI Driver called icuiCommandReceiveISR(), which verifies the checksum of an incoming command, transmits ACK/NAK message to the and then enqueues the command for later processing by calling",1
"Bootstrap Monitor of the CSC shall provide capability to read Dynamic Access Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Built-In TestThere two of Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT. The Stage 2 BIT is executed after the operating system is booted and is not of the program.",1
The shall place starting address of the event ring in TMALI_HK.,"FunctionsThis routine initializes the interface to the ICU. This routine opens SSI Driver port, installs the SSI interface callbacks, and enables Transmit in the SSI Driver.",1
The Bootstrap Monitor of the DPU-BOOT CSC shall the capability to load a configuration of DPU-RTOS from EEPROM to DRAM start its execution on command.,"Hardware InterfacesThe DPU-BOOTSTRAP must interface directly with EEPROM the Company X Communication Module. The DPU-BOOTSTRAP accesses EEPROM as ?-bit words only. The specific timing requirements of the EEPROM are satisfied in one of three ways:* the timing are met by specific loops (typical),* the timing requirements are met by use of the EEPROM Driver (DOWNLOAD command), andthe timing requirements are met implicitly by the amount of time which will be required to the intervening instructions regardless of the CPU speed setting (DRAM test logic).",1
"The DPU-SCUI capable of preparing one STPDU for delivery to the every M milliseconds, or shall indicate a No Data condition to SCU by maintaining an ST_PDU Transfer Request Counter field.","Telemetry Output to the Spacecraft 1553 BusThe CSC reads Data Packages from the queues and transforms them CCSDS Version 1 Source Packets. These Source then packed into the STPDU for transmission to the SCU. This processing is performed by scuiConvertToSTPDU(). The STPDU, prefixed with a Transfer Request Counter (TRC), is then written to fifteen sequential 1553 subaddresses (as described in the X 1553 ICD) by the function scuiWrite().",1
"The DPU-TMALI shall utilize SCM_DCI_SR, along with ERRNO provided by DPU-DCI to decode errors and place them on an error queue for DPU-CCM.","Error Collection and DPU-CCM CSC provides a centralized error reporting interface, ccmErrEnq(), that other FSW tasks use to report errors. Each time it wakes, ccmTask() checks to see if it is time to form an error/event packet for to the ground. If so, ccmTask() calls ccmHkMkError() to actually create the packet and forward to for transmission to the ground.",1
"When commanded to event mode by the ICU, the shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Event Event Processor Task, after receiving a command from the ICU, configures the DPU DCI hardware, responds to the ICU with a Mode Ready then receives detector by calling tmaliWait() and tmaliNextEvent(). The Event Processor Task will detector events for the time period in the Mode command then issue a Mode Complete message the ICU. After issuing the Mode Complete message, the Event Processor Task will enter the Idle state.",1
The DPU-BOOT CSC shall include a DRAM BIT consisting of two tests. The first test shall write the address of each location to location. The second test shall write the complement of each memory location to that location.,"Startup DPU FSW is booted using PROM-resident software. The bootstrap software performs a basic set of built-in tests, then copies the DPU FSW from EEPROM to it. In flight, there are two methods which can trigger the DPU FSW to boot:* power-on (cold boot), or* watchdog reset (warm boot, commanded reboot).",1
"Each software process shall be process input data sets with the following nominal attributes: Time including Greenwich Meridian crossing, leap year, beginning of the year, beginning of the millennium, and/or data collection not a granule boundary. Terminator crossing , International Date Line and/or Earth pole within granule. Day, Night, or mixed mode data.","input data sets with the following nominal attributes: * Time transitions, including Greenwich Meridian leap year, beginning of the beginning of the millennium, and/or start of data collection not a granule boundary. Terminator crossing , International Date crossing, and/or Earth pole within a granule. Day, Night, or mixed mode data.",1
The DPU-CCM shall provide the capability to echo to the spacecraft each received command from the spacecraft or the,"Command HandlingThe DPU accepts commands via two interfaces from the Spacecraft the MIL-STD-1553 interface, and from the ICU via the SSI interface. Any of DPU commands can be sent from the SCU or ICU. The source for a command from the is one of the following:* ICU command is generated and sent by the ICU via the SSI.* SCU command generated and the via the 1553.* G-ICU command is generated on the ground and sent to DPU via the ICU/SSI.* G-SCU command is generated on the ground sent to DPU via the SCU/1553.",1
"DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A following a hardware reset if CTS not asserted.","Startup Sequence On flight, a cycle can only be effected by the watchdog reset could be induced by the DPU FSW to a detected, unrecoverable error, or occur as a by-product the FSW entering a in which it fails to strobe the watchdog timer. On boot, the bootstrap tests and DRAM, and then proceeds to load DPU FSW from EEPROM and executes it. The DPU FSW then loads configuration information from EEPROM (which establishes various operational defaults) and spawns the various DPU FSW tasks.",1
"The DPU-CCM shall collect a TASK_HBEAT from DPU-SCUI, DPU-DCX, and DPU-DPA . Non-responsive tasks will be reported in DPU_HK.","Event ProcessingThe Event Processor Task, after receiving a Mode command from the ICU, configures the DCI responds to the a Ready message then receives detector events by calling tmaliWait() and tmaliNextEvent(). The Event Processor Task will collect detector events for the time period specified in the Mode command then issue a Mode message to the ICU. After issuing the Mode Complete message, the Event Task will enter the Idle state.",1
"The DPU-CCM shall be able to a consecutively reported When the the count a particular error ID, 250 for a particular reporting period, the error code will be replaced with a error sequence shall include the original error code and number of times the error was reported.","Error and ReportingThe ccmErrEnq() function tracks the last error and its frequency of occurrence. Once an error code has been reported it becomes the previously reported error code maintained by ccmErrEnq(). A repetition count is then incremented for each subsequent, consecutively reported, identical instance of this previously reported error. If error code reported more than once in one high-rate housekeeping reporting period, then a S_ccm_ERR_REPEAT is enqueued with repetition for the error encoded in the least significant byte. This mechanism effectively reduces the potential for housekeeping telemetry to become flooded with a single repeated error.",1
The DPU-SCUI time stamp the secondary header of the Source Packets with the current SC_TIME from the DPU-TIS module.,"Time SynchronizationThe interface with spacecraft as described in 1143-EI-S19121 specifies that the spacecraft will provide Clock Message to each Instrument at a 1 Hz rate. The Clock Message contains both two values: a value representing the current time, and a value the delta from the spacecraft time the Univeral (UT), based on an epoch of TBD.",1
"The Bootstrap Monitor of the DPU-BOOT CSC shall follow the protocol specified in BSPS-01, Bootstrap Monitor Protocol Specification, with the following noted exceptions.","Bootstrap MonitorThe Bootstrap Monitor checks commands for syntax and number of arguments, and displays an message the RS-232 interface if invalid command or argument entered. A complete listing of these messages given in document 7384-BSPS-01.",1
The DPU-CCM shall record an to the LAST_BOOT_IVEC location in EEPROM and strobing the Watchdog Timer an unrecoverable software error occur. An unrecoverable software error is defined an that causes a of commandability or ground communication.,"Control MonitoringEvery time CCM Control executes, it calls ccmPerProcess() handle periodic processing responsibilities. Such responsibilities include analog to digital conversion updates, DPU task monitoring, ICU heartbeat message production, and watchdog strobe. The ccmHealthChk() function, called by ccmPerProcess() verifies the execution of other tasks by monitoring the of time that has elapsed since task last reported. Other tasks report their execution to CCM Control by calling the function, ccmTaskReport(), providing their task index. Each task has an execution frequency, and if task does not execute as expected, an error is reported in DPU housekeeping. If the Command Dispatch Task fails to report for an extended the DPU will execute a reboot, since it is impossible to command DPU if this is not executing, otherwise it will strobe the watchdog",1
The DPU-BOOT CSC shall test and clear DRAM on power-on using the COLD_MEM_SIZE obtained from the,Public FunctionsThis routine provides a means the CCM task to send the Position command from the ICU to the DPA software. The XRT Position command shall be used to command the to update the position and parameters that it uses to spatially filter event data.,0
The DPU-BOOT CSC shall initialize Error Detection and Correction on the RSC by clearing DRAM.,"Telemetry Output to Spacecraft 1553 BusThe SCU, which is MIL-STD-1553 Bus Controller (BC), periodically reads the contained in the fifteen telemetry subaddresses, and then writes to the telemetry done When the telemetry done subaddress is written, the scuiTlmDoneISR() which gives a semaphore to awaken the scuiTask(). The software provides fault tolerance by automatically after approximately polling periods. This timeout is adjusted any time the Poll Rate value is changed by command.",0
"The DPU-SCUI shall cancel the write to each subaddress if the SCU fails to read a pending STPDU a timeout specified by a value calculated based on the SCU_POLL_RATE parameter provided during initialization, shall new data to those subaddresses, and an error to the RATE parameter have a default setting of J ms and shall be capable of being modified dynamically.",generate data_input_status_messages and set scan_quality_flags if corrupted data values detected.,0
The DPU-CCM shall interpret and execute/dispatch real-time DPU_CMDs.,"Error Collection and ReportingAt boot time, no error queue exists because it has yet to be created. Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno. The reader may refer VxWorks Guide, section 2.3.7 for more information errno. If is set after the error are created, it is queued to the Error Queue by ccmErrEnq().",0
"The DPU-DPA shall collect event data, preserving the time spatial resolution in specified event window.",Shall verify that the contained in the Level1A_Parameters is consistent the Spacecraft_indicator found in the Level 0 file header.,0
The DPU-BOOT CSC shall test and clear DRAM on power-on using COLD_MEM_SIZE obtained from SYSTEM_BLOCK.,"Ring data structureThe CSC maintains FIFO implemented as a ring buffer to temporarily store the data received from the DCI before it processed. The ring buffer uses two pointers called pIn and pOut to keep track of the data in the buffer. pointers were defined such that reading from the buffer is the simplest operation and only a single compare is needed verify if the buffer is The buffer stores Events so the pointers point to these four byte entities. As the DCI specifies all data in bytes, sizes to be converted before reading data.",0
The DPU-DCI shall write to the DCI Memory in B-bit words only.,External Program InterfacesReads the BIT results from the location to by pBitResults (which is assumed to be EEPROM) into the results data structure in DRAM.,0
The DPU-BIT shall test the Error Detection Correction (EDAC) on the Company X Communication/Memory Module by preprogrammed error locations in PROM.,HousekeepingThe TMALI CSC collects data that can be a call to tmaliHkGet(). TMALI housekeeping is returned via the TMALI_HK data structure.,0
"At startup, the DPU-RTOS shall execute the BIT device RAM tests (cold boot only), drivers, execute the driver loopback tests (cold boot only), and then spawn the application flight software.",Error Detection and Error Detection and Correction (EDAC) CSC is a Level reuse component from the SSFF and INSTRUMENT Y projects. The EDAC CSC consists set Interrupt Service Routines (ISRs) and Memory Task. The design of the INSTRUMENT Y EDAC CSC described in document CIDPSDS-01.The only change was to add to check for EDAC interrupts.,0
"The DPU-CCM shall spawn tasks DPU-CCM, DPU-DCX, DPU-SCUI, and DPU-TMALI at bootup.","Project-Specific Module Error IdentifiersIn order to provide a mechanism by which error numbers can be unique device drivers and applications, each error number must contain a unique module identifier the most significant word of the error number. identifiers defined in a VxWorks header file.",0
The DPU-SSI shall read from the SSI registers in 16-bit words only.,"TestThere are two stages of Built-In Tests (BIT) for the DPU. Stage 1 BIT included in the Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access Memory (DRAM) BIT. Stage 2 is executed after the operating system booted and is not part of the Bootstrap program.",0
Each Software process shall handle input data sets with the following error Corrupted data as indicated by Quality Assurance (QA) also located within the file.,Shall write Verify_MODIS_log_msgs to Log_messages when errors occur in the Verify_MODIS_header_info process.,0
"The DPU-CCM shall produce DPU_HK at a commandable rate, with a default of 10 seconds.",Shall generate data_input_status_messages if errors are encountered in reading Level_1B_Data.,0
"The Bootstrap CSC shall address hardware modules as defined in document 1400, Company Specification for the Company X Communication/Memory Module.","Message Mode(FIOSSIBGTXMSGENABLE) and Inter-Block Gap interruptsThe Driver CSC supports a message mode to facilitate application level communication. This mode the Inter-Block Gap interrupt generated by the hardware to synchronize message transmission. When in a messaging mode, the driver enables an internal Byte queue provides a synchronization mechanism for sending messages. This Byte Count queue is updated with the message size Inter-Block Gap interrupts are received. The Transmit Message Mode uses the interrupt, the FIFO Empty Interrupt, the write() call, and an internal Byte Count queue synchronize the transmission of messages over SSI. In this mode, the maxBytes parameter passed to write() is to the Byte Count queue. When a period of time equal to or greater than Interblock Gap time has expired, the BGTX interrupt will be asserted. At this time, the driver will respond initiate a new transfer by setting a Byte Transfer Limit for this block and enabling the Tx FIFO Empty Interrupt. The Byte Transfer Limit corresponds to the entry on the Byte Count queue. When all bytes the current block have sent up to the Byte Transfer Limit, the Tx FIFO ISR will disable and reset Byte Limit to zero. An application may use this mode by calling write() with a buffer pointer and maxBytes in order a message particular length.",0
The Bootstrap Monitor of the DPU-BOOT CSC shall provide capability to load a configuration of the DPU-RTOS from EEPROM to DRAM and start its execution on command.,Shall write Verify_CCSDS_log_msgs to Log_messages when errors in the Verify_CCSDS_header_info process.,0
The DPU-BOOT CSC shall detected BIT failures the SYSTEM_BLOCK.,"Structural DesignThe TIS provides a library of functions to* initialize the DPU clock hardware at startup,* maintain synchronization of the DPU clock with the Spacecraft clock,* provide a function for use by other applications to retrieve the current values of the DPU clock and the UT Delta, and provide functions for use by CCM command dispatcher to alter the of the clock interface.",0
"The DPU-CCM shall produce DPU_HK at a commandable rate, with default of 10 seconds.",Shall write L0_open_log_msgs to Log_messages when occur the Open_Level0_file process.,0
The DPU-DCI provide an application program with the ability to toggle the hardware interface between Normal mode and Test mode.,"Built-In TestThere two of Built-In Tests (BIT) for the DPU. The Stage 1 BIT is included in Bootstrap program and consists of Central Processing Unit (CPU) BIT, and Dynamic Random Access (DRAM) BIT. The Stage 2 BIT is executed after the operating system is booted and is not part of the Bootstrap program.",0
The DPU-BOOT CSC shall display message via RS-232 on detection a BIT failure.,"Initialization The task invokes the initialization function which sets an variable, allocates ring buffers and semaphores for the Low and High Priority Telemetry initializes a buffer and semaphore for pending RT-RT command messages, creates the scuiTask() semaphore, internal data structures, opens and initializes file for each of the required MIL-STD-1553 subaddresses and installs ISRs. When the CSC spawns scuiTask(), it will block on a semaphore (ccmSemScuiSpawn) awaiting SCUI initialization. Once initialization is complete, the SCUI CSC will signal successful initialization by giving the semaphore, write an empty to the 1553 shared memory.",0
The DPU-BOOT shall attempt to its normal execution sequence detection of any failure.,Standard I/O InterfaceSSI ioctl() commands.,0
The DPU-CCM shall provide a to reboot the DPU.,"Public FunctionsThis routine provides a means to get the current data timeout value used by the DCI. The returned value is the current timeout in timeout is discussed in document 036911400, section 4.3.2.4.1.3.",0
The DPU-BOOT CSC shall initialize Error Detection and Correction (EDAC) on the RSC by clearing DRAM.,Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
"A MODIS Computer Software Configuration Item (CSCI) is any independently tracked and configured unit software within the MODIS SDP S/W, processes, scripts, and utility libraries. CSCI in the SDP S/W shall the ECS production environment.",Install Exception routine installs a hook for the Memory Error Interrupt. The routine will be called from the interrupt context. function returns OK always.,0
The DPU-DCI shall provide an application program with the ability to the hardware interface between Normal mode and Test mode.,"Performing Analog-to-Digital ConversionsThe ADC maintains an array ADC_LIST_ENTRY data structures which contain the hardware multiplexer setup information each of the x analog inputs, and the current value (ADC_VALUE) of each analog input. update a single in the list, an application must call the update function adcUpdateNext(). The ADC hardware only has a single A/D channel, and so perform an A/D conversion the hardware requires a multiplexer setup and corresponding settle time, as well the normal A/D conversion time. it takes two calls to adcUpdateNext() update a single in the list. To keep the driver simple to avoid embedding hard waits in the driver, the application is required to implement the setup and conversion time by spacing successive calls to the adcUpdateNext() function",0
The centroid confirmation engineering mode shall produce a PROD_CENTROID_CONF. mode shall a full frame image into a certain regions. Each region shall be processed to an 8x8 confirmation image. The certain confirmation images be sent to the solid state recorder as one data,Install Exception HandlersThis routine installs a routine for the Power Failure Interrupt. The hook routine will be called from the interrupt function returns OK,0
The DPU-ICUI shall use DPU-SSI to communicate with the SSI Interface.,"Standard I/O read() primitive does not A read is on the active of the H/W ping pong buffer using RAD 6000 move-multiple instruction, referred to here as a block move. For optimum the block move is implemented in The number of bytes read is returned to the caller.",0
"The Bootstrap of the DPU-BOOT CSC shall the capability to write to Dynamic Random Memory (DRAM), the VME bus, and the Input/Output Channel Controller (IOCC) on command.","Channel Boundary Engineering ModeThe purpose of Channel Boundary Mode is to derive the optimum channel boundary settings from a flat field. Detector events produced in the M,N detector mode are collected and histogrammed for a commanded integration time. The pseudo Instrument Y is transmitted to the ground. Channel boundaries are derived from the Instrument Y and transmitted to the ICU and the ground. Channel boundaries are sent by the ICU to the and used in the detector event centroiding process.",0
The DPU-SCUI shall receive command messages in form of from the SCU and make them available the DPU-CCM.,"Data Algorithm CSCThe DPA CSC includes following components:* Event Processor Task communicates with the ICU, creates event data creates Tracking Instrument Ys the Ping/Pong buffers, creates the Finding Chart, performs the Engineering Modes, generates housekeeping data, creates Event Frame, Ping Pong buffers, and provides a heartbeat to the CCM task.",0
DPU-TIS shall provide the capability for an application program select the active 1PPS signal.,Exclude Failed DRAMThe Bootstrap performs a test before loading the operating system. The results of this test stored in the EEPROM. The DPU-RTOS uses the results of the memory test to segments with bit errors the system memory pool. The Bootstrap constructs a bit map which effectively implements a list of failed memory during the bootstrap built-in A set functions have been created to this bit to exclude blocks from the VxWorks system memory pool. system memory pool is used by VxWorks to allocate memory dynamically. In a linked list of memory segments is created for use by the EDAC Memory Scrubber. These functions are called from the usrInit() and usrRoot() functions The dramInit() function must be prior to kernelInit() in usrInit(). The dramBuildMemPool() function is just prior to initialization of filesystems and drivers in usrRoot().,0
"When commanded event mode by the ICU, the DPU-DPA shall be capable of collecting time-tagged photon events and producing a PROD_EVENT.","Checksum Library This performs a checksum on a memory range. The checksum is performed an 8-bit additive checksum, but the accumulated value is stored in a 16-bit",0
The DPU-TIS shall report errors to an program by setting the ERRNO task variable returning ERROR.,Real-Time InterfaceThis routine gets the value of the Real-Time Clock (RTC) Registers and places the results in variables rtcu and rtcl.,0
The DPU-TIS shall to an application program by setting the task variable and returning ERROR.,SCU CSCThis CSC rate-buffering of the downlink telemetry to the SCU according to a parameter. The rate at which the SCU the DPU is also The CSC installs an ISR to collect telecommands from the SCU via the MIL STD 1553B Interface.,0
The DPU-CCM shall use to access the EEPROM.,"Standard I/O InterfaceThe read() primitive does block. The read() primitive is simply its the tyLib tyRead().The size of the buffer specified in the call to part of the device instantiation.This routine returns either the number of bytes read, or ERROR.",0
The image mode shall shift successive frames according to the calculated spacecraft and co-add the frame into an accumulated image.,Ring buffer data structureThe pIn pOut pointers are as follows:* pIn- last location filled with data* pOut- last empty location,0
"The DPU-CCM shall check the length of a DPU_CMD against an expected value from a lookup table indexed by FUNCTION code. If the received value does not match the expected, then the command will be discarded, and an error will be enqueued.",Synchronous Interface Driver CSCThe Synchronous Serial Interface (SSI) Driver CSC is a new which provides an layer interface to the SSI hardware. The SSI Driver CSC is implemented on of VxWorks tyLib library to manage its ring buffers. The driver features a standard I/O interface which utilizes an extended command set to support unique SSI hardware attributes. This driver is after the older VxWorks architecture rather than the newer Tornado serial driver architecture due to the lack of programmer control over I/O in the Tornado architecture.,0
The DPU-DPA shall be capable of providing DPA_HK on request.,"Unmask VME Interrupts and Disallow Nested InterruptsThe device drivers do not automatically unmask VME interrupts at the This be done since some VME may an IRQ level. Finally, nested interrupt capability should be disabled since allowing for nested interrupts was not considered in the design of this FSW. This is done SYS_INT_MASK_0 and SYS_INT_MASK_1 are both defined to in config.h.",0
"The DPU-TIS shall provide the capability for an application program to set the value of the SC_TIME register(s) on the SCM and enable the clock jam register, if automatic time synchronization is enabled.","Data ProcessingThe DCX CSC is a task which receives packages from other tasks, compresses the data the algorithm, and then forwards the compressed data to the SCUI CSC.",0
"The DPU-CCM produce DPU_HK at a commandable rate, with a default of seconds.",InitializationThe DPA CSC is initialized by spawning the tasks dpaEventTask() and dpaInstrument YTask(). the tasks spawned they create the needed memory buffers. dpaEventTask() then enters the Idle waiting for a Mode command from the ICU. The dpaInstrument YTask also enters Idle state waiting to process either the or Pong buffer. The default setting for compression (on or off) is retrieved from EEPROM.,0
"The DPU-BOOT CSC shall complete Stage 1 BIT, and load DPU-RTOS in less than A seconds following a reset if CTS not asserted.",Shall write Level0_header_log_msgs Log_messages if the Spacecraft_indicator verification fails.,0
The DPU-DPA will complete the exposure the time specified by the MODE command - even it's required to truncate the final frame.,"InitializationThe DPU-BIT should initialized time the DPU boots. The startup task, usrRoot() should call before the device drivers bitPart2() after initializing EDAC and the device drivers.",0
"The DPU-BOOT CSC shall complete Stage 1 BIT, and DPU-RTOS in less than A seconds following a hardware reset if CTS is asserted.","InitializationThe CSC is when scuiTask() is spawned the CCM CSC. Initialization parameters are into scuiTask() include:* Poll Rate rate at which the S/C will poll the for telemetry. The rate is specified Hz, and a default of X Hz based on the INSTRUMENT X-DPU poll rate in the Company X 1553 ICD.* Buffer Rate value used to rate buffer data to the S/C. The rate is specified in bits per telemetry poll, and has a default 7664 which is equal to one STPDU poll (*** bytes per STPDU V bits/byte). This default value disables rate buffering.* Size of Low Priority Queue size in bytes of low priority telemetry queue. If the amount cannot be allocated, buffer will be allocated the amount of memory contained in the largest free memory block.Size of High Priority Queue size bytes of the high priority telemetry queue. If the amount requested cannot be the buffer will be allocated at the amount of contained in largest memory block.",0
"At the of a download, the Bootstrap Monitor the DPU-BOOT CSC shall compute CHKS_32 on the X stored in EEPROM and compare it against CHKS_32 sent with the X the transfer. Bootstrap Monitor output to RS-232 interface and a message indicating whether the download was successful.",Standard I/O InterfaceSSI ioctl() commands.,0
The shall an application program with the capability to command the DCI hardware to reorder the bit of each event's original Detector Electronics Format it is received.,Watchdog LibraryThe contains a hardware watchdog which must be strobed periodically in order to prevent a DPU reboot.,0
"The DPU-BOOT shall include a CPU BIT consisting of a branch test, a fixed point test, a floating point test, an test, a timer test, and a test.",Watchdog LibraryThis function strobes the system watchdog to prevent a watchdog reset.,0
"The exclude failed from the memory pool based on the of the BIT_DRAM results the SYSTEM_BLOCK. The system memory table does not include the Vector Table (IVT), nor the and data segment.","Transmitting Telemetry to SpacecraftThe SCUI CSC receives telemetry Data Packages via queues populated by other tasksthe Science Data Processing Task, the Data Compression Task, and the Command and Control Task. The CSC has High Priority Queue and Low Priority Queue. The two queues implemented in an identical manner with the that scuiTask() gives processing to the High Priority Queue. The purpose of the High Priority Queue is a means by which the Parameterized Finding Chart and DPU housekeeping can be transmitted to the SCU ahead of potentially large amounts of buffered science data.",0
The DPU-TIS shall provide the capability for an application program to select active 1PPS signal.,"Control Monitoringthe CCM Control Task handles dump commands. In event of a data dump command, the CCM Control Task will the dump into pieces and dump a small portion at a time, each time the task awakened. The purpose of this deferred activity is prevent a large from consuming CPU time by keeping the high-priority CCM Command Dispatch Task busy an extended period.",0
Each Software process shall handle input data sets with the error attributes: format input files.,"Checksum Library This function performs a checksum on specified memory range. The checksum is performed as an 8-bit additive checksum, accumulated value is in a 16-bit variable.",0
The DPU-TMALI shall provide which sets current event bit mode in the DCI driver.,"Command HandlingThe DPU accepts commands via two interfaces from the Spacecraft via the MIL-STD-1553 interface, and from the ICU via the SSI interface. Any of DPU commands can be sent from SCU or the ICU. The source for a command from the DPU is one of the following:* ICU command is generated and by the ICU via the SSI.* SCU command is generated sent by the SCU via the 1553.* command is generated the ground and sent to DPU via the ICU/SSI.* G-SCU command is generated on the sent to the DPU via the SCU/1553.",0
Each process shall trap and properly process all exceptions that produce an abnormal terminationand report all such events using the SDPTK error message functions.,Checksum LibraryThis function performs a checksum on a specified range. The checksum is performed an bit XOR.,0
The DPU-CCM shall use DPU-EEPRM access EEPROM.,"interrupt service routine (ISR)The DPU responds to interrupts via an interrupt service routine (ISR). VME are prioritized; however the DPU not allow interrupts, and so any which occur while servicing another interrupt will pend until the ISR has returned.",0
The DPU-BOOT CSC shall initialize Detection and Correction (EDAC) on the RSC by clearing DRAM.,Real-Time Clock InterfaceThis gets the value of the Real-Time Clock Registers places the results in variables rtcu and rtcl.,0
"The DPU-BOOT CSC shall perform successive writes to a word page of EEPROM within C msecs, or wait minimum of D usecs between successive writes.","Install Exception Handlers The RSC processor generates external interrupt for the Power Interrupt. The RSCVME Support Package of VxWorks? does not directly support to this interrupt. Some routines must be provided to access this interrupt. These functions described below, and are contained in sysLibSup.c.",0
DPU-RTOS shall provide allow an application program to from the Real-Time registers on the RAD6000SC CPU Module.,"Error Collection and ReportingAt boot time, error queue exists because it has yet to created. Errors that occur in this early stage of error reporting are assigned directly to the global task variable errno. The reader may refer to VxWorks Programmers Guide, section 2.3.7 for more information on errno. If errno is set after error queues created, it is queued to Error Queue calling ccmErrEnq().",0
"The DPU-SCUI, in the event of a buffer full condition, shall discard data, return an error to the caller, and report an error condition the DPU-CCM.",Raw Event List (RE) Engineering ModeThe purpose of Raw Event Engineering is to diagnose problems with the detector. Detector events produced in given detector mode are collected over a commanded integration and transmitted to the ground as a list events.,0
The DPU-CCM shall provide a command to reboot the DPU.,"Message ProcessingThe SCUI task will send the ACS message to the DPA by the function dpaACSReceive(). Because the SCUI task will be calling from an ISR, dpaACSReceive() must return If commanded by the ICU in the Mode command, the ACS message will be saved along with the event data product. To return quickly, dpaACSReceive() will place the ACS message in a data queue then The Event Processor Task will remove the ACS messages from the queue and send them to the spacecraft.",0
The DPU-DPA shall able to perform tracking based on data collected from the detector by calculating the spacecraft drift using successive tracking frames using the algorithm described in Appendix C.,"InitializationThe ICUI CSC is initialized by calling icuiInit(). The opens the SSI interface port to the ICU, installs the receive ISRs, enables Transmit Message Mode in the SSI Driver CSC. The icuiInit() function is called by the CCM Control Task at bootup.",0
The DPU-BIT shall test the Error Detection and Correction (EDAC) on the X Module by reading preprogrammed locations in PROM.,Shall write Level0_header_log_msgs to Log_messages if the verification fails.,0
The DPU-CCM shall record an error to the LAST_BOOT_IVEC location EEPROM and discontinue strobing the Watchdog Timer should an unrecoverable software error occur. An unrecoverable software error is defined as an error that causes a loss of commandability or ground communication.,"Public FunctionsThis routine is called by any CSC in order to report an error or event that should included in DPU housekeeping. this is called from interrupt context a static global variable, ccmISRError, is set that the error can be enqueued later (see ccmCtrlTask()). This is since the error/event queue is semaphore-protected a be taken in an ISR. The error queue semaphore has priority inversion to reduce conflicts between should priority inversion situation arise. This routine also replaces frequently occuring errors with a special repeat error The repeat error is special error code that follows a normally reported error code to indicate that the normally error code previously reported has more than once in the last high rate reporting period",0
